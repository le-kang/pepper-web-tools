{
  "!name": "qi",
  "qi": {
    "ALBehaviorManager": {
      "startBehavior": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Start a behavior. Return when the behavior is started. Throw if the behavior cannot be started or does not exist. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::startBehavior__ssCR"
      },
      "removeDefaultBehavior": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Remove the given behavior from the default behaviors It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::removeDefaultBehavior__ssCR"
      },
      "preloadBehavior": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Load a behavior It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (Returns true if it was successfully loaded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::preloadBehavior__ssCR"
      },
      "getBehaviorNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get behaviors It returns a Promise which is either resolved with the given value (Returns the list of behaviors prefixed by their type (User/ or System/). DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isBehaviorRunning": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Tell if supplied name corresponds to a running behavior It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (Returns true if the name supplied is a running behavior) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::isBehaviorRunning__ssCR"
      },
      "addDefaultBehavior": {
        "!type": "fn(behavior: ?) -> Promise.Prototype",
        "!doc": "Set the given behavior as default It takes 1 argument(s): [behavior] - behavior It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::addDefaultBehavior__ssCR"
      },
      "getUserBehaviorNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get user's behaviors It returns a Promise which is either resolved with the given value (Returns the list of user's behaviors prefixed by User/. DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getInstalledBehaviors": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Returns the behaviors list) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getInstalledBehaviors"
      },
      "isBehaviorInstalled": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Returns true if it is a valid behavior It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (Returns true if it is a valid behavior) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::isBehaviorInstalled__ssCR"
      },
      "resolveBehaviorName": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Find out the actual <package>/<behavior> path behind a behavior name. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (Returns the actual <package>/<behavior> path if found, else an empty string. Throws an ALERROR if two behavior names conflicted.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::resolveBehaviorName__ssCRC"
      },
      "getBehaviorTags": {
        "!type": "fn(behavior: ?) -> Promise.Prototype",
        "!doc": "Get tags found on the given behavior. For more details about tags, see:alanimatedspeech-advanced It takes 1 argument(s): [behavior] - behavior It returns a Promise which is either resolved with the given value (The list of tags found.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getBehaviorTags__ssCR"
      },
      "runBehavior": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Start a behavior and wait for its end. Return when the behavior is stopped. Throw if the behavior cannot be started or does not exist. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::runBehavior__ssCR"
      },
      "isBehaviorPresent": {
        "!type": "fn(prefixedBehavior: ?) -> Promise.Prototype",
        "!doc": "Tell if the supplied namecorresponds to an existing behavior. It takes 1 argument(s): [prefixedBehavior] - Prefixed behavior or just behavior's name (latter usage deprecated, in this case the behavior is searched for amongst user's behaviors, then in system behaviors) DEPRECATED in favor of ALBehaviorManager.isBehaviorInstalled. It returns a Promise which is either resolved with the given value (Returns true if it is an existing behavior) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getBehaviorsByTag": {
        "!type": "fn(tag: ?) -> Promise.Prototype",
        "!doc": "Get installed behaviors directories names and filter it by tag. For more details about tags, see:alanimatedspeech-advanced It takes 1 argument(s): [tag] - tag It returns a Promise which is either resolved with the given value (Returns the behaviors list.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getBehaviorsByTag__ssCR"
      },
      "stopAllBehaviors": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stop all behaviors It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::stopAllBehaviors"
      },
      "getSystemBehaviorNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get system behaviors It returns a Promise which is either resolved with the given value (Returns the list of system behaviors prefixed by System/. DEPRECATED in favor of ALBehaviorManager.getInstalledBehaviors.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getBehaviorNature": {
        "!type": "fn(tag: ?) -> Promise.Prototype",
        "!doc": "Get the nature of the given behavior. For more details about natures, see:Behavior property list It takes 1 argument(s): [tag] - tag It returns a Promise which is either resolved with the given value (Returns the nature name of the behavior.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getBehaviorNature__ssCR"
      },
      "getTagList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get tags found on installed behaviors. For more details about tags, see:alanimatedspeech-advanced It returns a Promise which is either resolved with the given value (The list of tags found.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getTagList"
      },
      "isBehaviorLoaded": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Tell if supplied name corresponds to a loaded behavior It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (Returns true if the name supplied is a loaded behavior) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::isBehaviorLoaded__ssCR"
      },
      "getLoadedBehaviors": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get loaded behaviors It returns a Promise which is either resolved with the given value (Returns loaded behaviors) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getLoadedBehaviors"
      },
      "playDefaultProject": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Play default behaviors It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::playDefaultProject"
      },
      "getDefaultBehaviors": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get default behaviors It returns a Promise which is either resolved with the given value (Return default behaviors) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getDefaultBehaviors"
      },
      "stopBehavior": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Stop a behavior It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::stopBehavior__ssCR"
      },
      "getRunningBehaviors": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get running behaviors It returns a Promise which is either resolved with the given value (Return running behaviors) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/albehaviormanager-api.html#ALBehaviorManagerProxy::getRunningBehaviors"
      }
    },
    "ALFsr": {

    },
    "ALChestButton": {

    },
    "ALTracker": {
      "setExtractorPeriod": {
        "!type": "fn(TargetName: ?, Period: ?) -> Promise.Prototype",
        "!doc": "Set the period of the extractor corresponding to the given target name. See:Modules to launch. Only works if the corresponding target name is tracked (callALTrackerProxy::trackbefore). UseALTrackerProxy::getExtractorPeriodto get this value. It takes 2 argument(s): [TargetName] - TargetName [Period] - Period It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setExtractorPeriod__ssCR.iCR"
      },
      "getEffector": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the current effector name. UseALTrackerProxy::setEffectorto set this value. It returns a Promise which is either resolved with the given value (Active effector name. Could be: \"Arms\", \"LArm\", \"RArm\" or \"None\".) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getEffector"
      },
      "isSearchEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return true if the target search process is enabled. UseALTrackerProxy::toggleSearchto set this value. It returns a Promise which is either resolved with the given value (True if the target search process is enabled.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::isSearchEnabled"
      },
      "setRelativePosition": {
        "!type": "fn(Target: ?) -> Promise.Prototype",
        "!doc": "Set the robot position relative to target inMovemode. UseALTrackerProxy::getRelativePositionto get this value. It takes 1 argument(s): [Target] - Target It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setRelativePosition__AL::ALValueCR"
      },
      "trackEvent": {
        "!type": "fn(EventName: ?) -> Promise.Prototype",
        "!doc": "Track an event from ALMemory. The value fromEventNameshould have a predefined structure. It takes 1 argument(s): [EventName] - EventName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::trackEvent__ssCR"
      },
      "setMaximumDistanceDetection": {
        "!type": "fn(MaxDistance: ?) -> Promise.Prototype",
        "!doc": "Set the maximum absolute distance for target detection. If the distance to the target is greater than the distance presented here, the target is considered lost. It takes 1 argument(s): [MaxDistance] - MaxDistance It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setMaximumDistanceDetection__floatCR"
      },
      "getMaximumAcceleration": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get head maximum acceleration. It returns a Promise which is either resolved with the given value (maximum acceleration in rad.s^-2.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getMaximumAcceleration"
      },
      "setTargetCoordinates": {
        "!type": "fn(Coord: ?) -> Promise.Prototype",
        "!doc": "Only work withLandMarkstarget name. Set objects coordinates. UseALTrackerProxy::getTargetCoordinatesto get this value. It takes 1 argument(s): [Coord] - Coord It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setTargetCoordinates__AL::ALValueCR"
      },
      "getSupportedTargets": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get supported target names. It returns a Promise which is either resolved with the given value (Array of supported target names. See:Target names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getSupportedTargets"
      },
      "lookAt": {
        "!type": "fn(Position: ?, Frame: ?, FractionMaxSpeed: ?, UseWholeBody: ?) -> Promise.Prototype",
        "!doc": "Look at the target position with head in desired frame. If tracker is active, it's stopped and restarted at the last location of active target after lookAt. This is a blocking call. It takes 4 argument(s): [Position] - Position [Frame] - Frame [FractionMaxSpeed] - FractionMaxSpeed [UseWholeBody] - UseWholeBody It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::lookAt__std::vector:float:CR.iCR.floatCR.bC"
      },
      "getExtractorPeriod": {
        "!type": "fn(TargetName: ?) -> Promise.Prototype",
        "!doc": "Get the current period of the extractor corresponding to the given target name. See:Modules to launch. Only works if the corresponding target name is tracked (callALTrackerProxy::trackbefore). UseALTrackerProxy::setExtractorPeriodto set this value. It takes 1 argument(s): [TargetName] - TargetName It returns a Promise which is either resolved with the given value (Current period in milliseconds of the extractor corresponding to the given target name.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getExtractorPeriod__ssCR"
      },
      "getRelativePosition": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the robot position relative to target inMovemode. UseALTrackerProxy::setRelativePositionto set this value. It returns a Promise which is either resolved with the given value (Final goal of the tracking: [coordX, coordY, coordWz, thresholdX, thresholdY, thresholdWz].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getRelativePosition"
      },
      "stopTracker": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stop the tracker. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::stopTracker"
      },
      "getActiveTarget": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get active target name set withALTrackerProxy::track. See:Target names. Or event name set withALTrackerProxy::trackEvent. It returns a Promise which is either resolved with the given value (Tracked target name.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getActiveTarget"
      },
      "getMaximumDistanceDetection": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get target maximum distance detection. If the distance to the target is greater than the distance presented here, the target is considered lost. By default, this parameter is set to a very high value, so no target will be considered lost with this setting. UseALTrackerProxy::setMaximumDistanceDetectionto set this value. It returns a Promise which is either resolved with the given value (maximum distance in meter for target detection.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getMaximumDistanceDetection"
      },
      "isNewTargetDetected": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return true if a new target was detected since the lastALTrackerProxy::getTargetPosition. It returns a Promise which is either resolved with the given value (True if a new target was detected.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::isNewTargetDetected"
      },
      "getTimeOut": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the current target lost timeout value. It returns a Promise which is either resolved with the given value (timeout value in milliseconds.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getTimeOut"
      },
      "getRobotPosition": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Only available withLandMarkstarget name. Get the [x, y, z, wx, wy, wz] position of the robot in coordinate system set withALTrackerProxy::setTargetCoordinates. This is done assuming an average target size, so it might not be very accurate. It returns a Promise which is either resolved with the given value (Vector of 6 floats corresponding to the robot position 6D.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getRobotPosition"
      },
      "setSearchFractionMaxSpeed": {
        "!type": "fn(FractionMaxSpeed: ?) -> Promise.Prototype",
        "!doc": "Set search process fraction max speed. It takes 1 argument(s): [FractionMaxSpeed] - FractionMaxSpeed It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setSearchFractionMaxSpeed__floatCR"
      },
      "registerTarget": {
        "!type": "fn(TargetName: ?, Param: ?) -> Promise.Prototype",
        "!doc": "Register the predefined target with parameters (RedBall: diameter of ball). Subscribe to corresponding extractor and stock the last position if tracker is running. If the target is already registered, only parameters are updated. It takes 2 argument(s): [TargetName] - TargetName [Param] - Param It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::registerTarget__ssCR.AL::ALValueCR"
      },
      "setMaximumAcceleration": {
        "!type": "fn(MaxAcceleration: ?) -> Promise.Prototype",
        "!doc": "Set the maximum absolute acceleration for head. It takes 1 argument(s): [MaxAcceleration] - MaxAcceleration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setMaximumAcceleration__float"
      },
      "getTargetPosition": {
        "!type": "fn(Frame: ?) -> Promise.Prototype",
        "!doc": "Get the [x, y, z] position of active target in desired frame. This is done assuming an average target size, so it might not be very accurate. It takes 1 argument(s): [Frame] - Frame It returns a Promise which is either resolved with the given value (Vector of 3 floats corresponding to the target position 3D.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getTargetPosition__iCR"
      },
      "setMoveConfig": {
        "!type": "fn(Config: ?) -> Promise.Prototype",
        "!doc": "Set a move config to be used when theMovemode is activated. UseALTrackerProxy::getMoveConfigto get this value. It takes 1 argument(s): [Config] - Config It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setMoveConfig__AL::ALValueCR"
      },
      "getMode": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the current mode defined withALTrackerProxy::setMode. It returns a Promise which is either resolved with the given value (The current tracker predefined mode. See:Tracking modes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getMode"
      },
      "track": {
        "!type": "fn(TargetName: ?) -> Promise.Prototype",
        "!doc": "Set the predefined target to track and start tracking process. Target name need to be registered before withALTrackerProxy::registerTarget. It takes 1 argument(s): [TargetName] - TargetName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::track__ssCR"
      },
      "getMaximumVelocity": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get head maximum velocity. UseALTrackerProxy::setMaximumVelocityto set this value. It returns a Promise which is either resolved with the given value (maximum velocity in rad.s^-1.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getMaximumVelocity"
      },
      "getRegisteredTargets": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get registered targets names. UseALTrackerProxy::registerTargetto register a target. It returns a Promise which is either resolved with the given value (A list of registered targets names. See:Target names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getRegisteredTargets"
      },
      "getMoveConfig": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the move config set withALTrackerProxy::setMoveConfig. For further details, see:Move config. It returns a Promise which is either resolved with the given value (The move config used whenMoveis activated.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getMoveConfig"
      },
      "unregisterTargets": {
        "!type": "fn(TargetNames: ?) -> Promise.Prototype",
        "!doc": "Unregister predefined targets and unsubscribe from corresponding extractors. It takes 1 argument(s): [TargetNames] - TargetNames It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::unregisterTargets__std::vector:ss:CR"
      },
      "setMode": {
        "!type": "fn(Mode: ?) -> Promise.Prototype",
        "!doc": "Set the tracker in the predefined mode. UseALTrackerProxy::getModeto get this value. It takes 1 argument(s): [Mode] - Mode It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setMode__ssCR"
      },
      "initialize": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Initialize all tracker parameters with default values. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::initialize"
      },
      "isTargetLost": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return true if the target is lost. It returns a Promise which is either resolved with the given value (True if the target was lost.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::isTargetLost"
      },
      "getAvailableModes": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get available modes. See:Tracking modes. It returns a Promise which is either resolved with the given value (A list of available mode names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getAvailableModes"
      },
      "getTargetCoordinates": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Only work withLandMarkstarget name. Get objects coordinates set withALTrackerProxy::setTargetCoordinates. It returns a Promise which is either resolved with the given value (Objects coordinates.Could be:[[first object coordinate], [second object coordinate]][[x1, y1, z1], [x2, y2, z2]].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getTargetCoordinates"
      },
      "setMaximumVelocity": {
        "!type": "fn(MaxVelocity: ?) -> Promise.Prototype",
        "!doc": "Set the maximum absolute velocity for head. It takes 1 argument(s): [MaxVelocity] - MaxVelocity It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setMaximumVelocity__float"
      },
      "isActive": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return true if Tracker is running. It returns a Promise which is either resolved with the given value (True if tracker is running.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::isActive"
      },
      "getSearchFractionMaxSpeed": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get search process fraction max speed. It returns a Promise which is either resolved with the given value (Search process movement fraction max speed.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::getSearchFractionMaxSpeed"
      },
      "pointAt": {
        "!type": "fn(Effector: ?, Position: ?, Frame: ?, FractionMaxSpeed: ?) -> Promise.Prototype",
        "!doc": "Point at the target position with arms in desired frame. If tracker is active, it's stopped and restarted at the last location of active target after pointAt. This is a blocking call. It takes 4 argument(s): [Effector] - Effector [Position] - Position [Frame] - Frame [FractionMaxSpeed] - FractionMaxSpeed It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::pointAt__ssCR.std::vector:float:CR.iCR.floatCR"
      },
      "unregisterTarget": {
        "!type": "fn(TargetName: ?) -> Promise.Prototype",
        "!doc": "Unregister a predefined target and unsubscribe from corresponding extractor. It takes 1 argument(s): [TargetName] - TargetName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::unregisterTarget__ssCR"
      },
      "setEffector": {
        "!type": "fn(Effector: ?) -> Promise.Prototype",
        "!doc": "Set an end-effector to move for tracking. Tracker always used theHead. UseALTrackerProxy::getEffectorto get this value. It takes 1 argument(s): [Effector] - Effector It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setEffector__ssCR"
      },
      "setTimeOut": {
        "!type": "fn(TimeMs: ?) -> Promise.Prototype",
        "!doc": "Set target lost timeout in milliseconds. It takes 1 argument(s): [TimeMs] - TimeMs It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::setTimeOut__iCR"
      },
      "toggleSearch": {
        "!type": "fn(pSearch: ?) -> Promise.Prototype",
        "!doc": "Enables/disables the target search process. Target search process occurs only when the target is lost. UseALTrackerProxy::isSearchEnabledto get this value. It takes 1 argument(s): [pSearch] - pSearch It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::toggleSearch__bCR"
      },
      "unregisterAllTargets": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Unregister all targets and unsubscribe from all extractors. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/trackers/altracker-api.html#ALTrackerProxy::unregisterAllTargets"
      }
    },
    "ALRobotPosture": {
      "applyPosture": {
        "!type": "fn(postureName: ?, speed: ?) -> Promise.Prototype",
        "!doc": "Set all the joints of the robot in the configuration of the asked predefined posture. It takes 2 argument(s): [postureName] - postureName [speed] - speed It returns a Promise which is either resolved with the given value (Returns if the predefined posture was reached.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::applyPosture__ssCR.floatCR"
      },
      "getPostureFamily": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the Posture family. For further details, see:Posture family. It returns a Promise which is either resolved with the given value (Returns the name of the current posture family.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::getPostureFamily"
      },
      "setMaxTryNumber": {
        "!type": "fn(maxTryNumber: ?) -> Promise.Prototype",
        "!doc": "Sets the maximum number of tries performed byALRobotPostureProxy::goToPosturebefore returning a fail. It takes 1 argument(s): [maxTryNumber] - maxTryNumber It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::setMaxTryNumber__iCR"
      },
      "getPostureFamilyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns a vector with all predefined postures families. It returns a Promise which is either resolved with the given value (A vector with all predefined postures families.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::getPostureFamilyList"
      },
      "getPostureList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns a vector with all predefined postures. It returns a Promise which is either resolved with the given value (A vector with all predefined postures.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::getPostureList"
      },
      "goToPosture": {
        "!type": "fn(postureName: ?, speed: ?) -> Promise.Prototype",
        "!doc": "Makes the robot go to the predefined posture asked in parameter. It is possible to modify the speed of the move. The move is \"intelligent\": it will start from beginning posture of the robot, and choose all the steps to reach the asked posture. It takes 2 argument(s): [postureName] - postureName [speed] - speed It returns a Promise which is either resolved with the given value (Returns if the predefined posture was reached.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::goToPosture__ssC.floatC"
      },
      "getPosture": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the name of the currentpredefined postures. If the current posture is not in the predefined postures, it returns \"Unknown\". It returns a Promise which is either resolved with the given value (A string with the name of the current posture.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::getPosture"
      },
      "stopMove": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stop the current posture interpolation. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrobotposture-api.html#ALRobotPostureProxy::stopMove"
      }
    },
    "ALMemory": {
      "getDataListName": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the key names for all the key-value pairs in memory It returns a Promise which is either resolved with the given value (A list containing the keys in memory) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getDataListName"
      },
      "removeEvent": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Removes a event from memory and unsubscribes any exiting subscribers. It takes 1 argument(s): [name] - Name of the event to remove. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "removeData": {
        "!type": "fn(key: ?) -> Promise.Prototype",
        "!doc": "Removes a key-value pair from memory It takes 1 argument(s): [key] - key It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::removeData__ssCR"
      },
      "getExtractorEvent": {
        "!type": "fn(extractorName: ?) -> Promise.Prototype",
        "!doc": "Gets the list of all events generated by a given extractor It takes 1 argument(s): [extractorName] - extractorName It returns a Promise which is either resolved with the given value (A list containing the names of the events associated with the given extractor) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getExtractorEvent__ssCR"
      },
      "unregisterModuleReference": {
        "!type": "fn(moduleName: ?) -> Promise.Prototype",
        "!doc": "Informs ALMemoryProxy that a module doesn't exist anymore. It takes 1 argument(s): [moduleName] - moduleName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::unregisterModuleReference__ssCR"
      },
      "addMapping": {
        "!type": "fn(service: ?, signal: ?, event: ?) -> Promise.Prototype",
        "!doc": "Add a mapping between signal and event It takes 3 argument(s): [service] - Name of the service [signal] - Name of the signal [event] - Name of the event It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribeToEvent": {
        "!type": "fn(name: ?, callbackModule: ?, callbackMethod: ?) -> Promise.Prototype",
        "!doc": "Subscribes to an event and automatically launches the module that declared itself as the generator of the event if required. It takes 3 argument(s): [name] - name [callbackModule] - callbackModule [callbackMethod] - callbackMethod It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::subscribeToEvent__ssCR.ssCR.ssCR"
      },
      "getIntPtr": {
        "!type": "fn(key: ?) -> Promise.Prototype",
        "!doc": "Gets a pointer to a int data item. Beware, the pointer will only be valid during the lifetime of the ALMemory object. Use with care, at initialization, not every loop. Insert a data item if needed. Throw if the data item has not the expected type. Only meaningful when called from code running in the same process as ALMemory. It takes 1 argument(s): [key] - Name of the data. It returns a Promise which is either resolved with the given value (A pointer to int) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getListData": {
        "!type": "fn(keyList: ?) -> Promise.Prototype",
        "!doc": "Gets the values associated with the given list of keys. This is more efficient than calling getData many times, especially over the network. It takes 1 argument(s): [keyList] - keyList It returns a Promise which is either resolved with the given value (An array containing all the values corresponding to the given keys.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getListData__AL::ALValueCR"
      },
      "unsubscribeToMicroEvent": {
        "!type": "fn(name: ?, callbackModule: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the given event. No further notifications will be received. It takes 2 argument(s): [name] - name [callbackModule] - callbackModule It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::unsubscribeToMicroEvent__ssCR.ssCR"
      },
      "setDescription": {
        "!type": "fn(name: ?, description: ?) -> Promise.Prototype",
        "!doc": "Sets the description of a memory entry. It takes 2 argument(s): [name] - name [description] - description It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::setDescription__ssCR.ssCR"
      },
      "getDescriptionList": {
        "!type": "fn(keys: ?) -> Promise.Prototype",
        "!doc": "Gets a description of all given keys It takes 1 argument(s): [keys] - keys It returns a Promise which is either resolved with the given value (An array of (key, type, description) where type is \"data\" or \"event\") or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getDescriptionList__std::vector:ss:CR"
      },
      "subscriber": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Return a dynamic object with a signal namedsignalwhich will trigger when the event is triggered. If the event does not exist, it is created. SeeSubscribing to an event from ALMemory. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::subscriber__ssCR"
      },
      "declareEvent": {
        "!type": "fn(eventName: ?) -> Promise.Prototype",
        "!doc": "Declares an event to allow future subscriptions to the event It takes 1 argument(s): [eventName] - eventName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::declareEvent__ssCR"
      },
      "getEventHistory": {
        "!type": "fn(key: ?) -> Promise.Prototype",
        "!doc": "A sequence of past values of the key with their timestamps as an array of ALValues, each with 3 items: * memoryKey value, * first part of the timestamp (seconds), * second part of the timestamp (microseconds). It takes 1 argument(s): [key] - key It returns a Promise which is either resolved with the given value (A sequence of past values of the key with their timestamps as an array of ALValues, each with 3 items: * memoryKey value, * first part of the timestamp (seconds), * second part of the timestamp (microseconds).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getEventHistory__ssCR"
      },
      "removeMicroEvent": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Removes a micro event from memory and unsubscribes any existing subscribers. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::removeMicroEvent__ssCR"
      },
      "getDataOnChange": {
        "!type": "fn(key: ?, deprecatedParameter: ?) -> Promise.Prototype",
        "!doc": "Blocks the caller until the value of a key changes It takes 2 argument(s): [key] - key [deprecatedParameter] - deprecatedParameter It returns a Promise which is either resolved with the given value (an array containing all the retrieved data) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getDataOnChange__ssCR.iCR"
      },
      "getData": {
        "!type": "fn(key: ?) -> Promise.Prototype",
        "!doc": "Gets the value of a key-value pair stored in memory It takes 1 argument(s): [key] - key It returns a Promise which is either resolved with the given value (The data as an AL::ALValue. This can often be cast transparently into the original type.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getData__ssCR"
      },
      "getFloatPtr": {
        "!type": "fn(key: ?) -> Promise.Prototype",
        "!doc": "Gets a pointer to a float data item. Beware, the pointer will only be valid during the lifetime of the ALMemory object. Use with care, at initialization, not every loop. Insert a data item if needed. Throw if the data item has not the expected type. Only meaningful when called from code running in the same process as ALMemory. It takes 1 argument(s): [key] - Name of the data. It returns a Promise which is either resolved with the given value (A pointer to float) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getType": {
        "!type": "fn(key: ?) -> Promise.Prototype",
        "!doc": "Gets the storage class of the stored data. This is not the underlying POD type. It takes 1 argument(s): [key] - key It returns a Promise which is either resolved with the given value (String type: Data, Event, MicroEvent) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getType__ssCR"
      },
      "insertData": {
        "!type": "fn(key: ?, value: ?) -> Promise.Prototype",
        "!doc": "Inserts a key-value pair into memory, where value is an int It takes 2 argument(s): [key] - key [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::insertData__ssCR.iCR"
      },
      "getTimestamp": {
        "!type": "fn(memoryKey: ?) -> Promise.Prototype",
        "!doc": "Gets memoryKey value and its timestamps. It takes 1 argument(s): [memoryKey] - memoryKey It returns a Promise which is either resolved with the given value (An ALValue with 3 items: * memoryKey value, * first part of the timestamp (seconds), * second part of the timestamp (microseconds).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getTimestamp__ssCR"
      },
      "raiseEvent": {
        "!type": "fn(name: ?, value: ?) -> Promise.Prototype",
        "!doc": "Publishes the given data to all subscribers. It takes 2 argument(s): [name] - name [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::raiseEvent__ssCR.AL::ALValueCR"
      },
      "insertListData": {
        "!type": "fn(list: ?) -> Promise.Prototype",
        "!doc": "Inserts a list of key-value pairs into memory. It takes 1 argument(s): [list] - list It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::insertListData__AL::ALValueCR"
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets a list containing the names of all the declared events It returns a Promise which is either resolved with the given value (A list containing the names of all events) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getEventList"
      },
      "getMicroEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets a list containing the names of all the declared micro events It returns a Promise which is either resolved with the given value (A list containing the names of all the microEvents) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getMicroEventList"
      },
      "subscribeToMicroEvent": {
        "!type": "fn(name: ?, callbackModule: ?, callbackMessage: ?, callbackMethod: ?) -> Promise.Prototype",
        "!doc": "Subscribes to a microEvent. Subscribed modules are notified on their callback method whenever the data is updated, even if the new value is the same as the old value. It takes 4 argument(s): [name] - name [callbackModule] - callbackModule [callbackMessage] - callbackMessage [callbackMethod] - callbackMethod It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::subscribeToMicroEvent__ssCR.ssCR.ssCR.ssCR"
      },
      "getSubscribers": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets a list containing the names of subscribers to an event. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (List of subscriber names) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getSubscribers__ssCR"
      },
      "unsubscribeToEvent": {
        "!type": "fn(name: ?, callbackModule: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes a module from the given event. No further notifications will be received. The module capable of generating the event is automatically stopped when the last subscriber unsubscribes. It takes 2 argument(s): [name] - name [callbackModule] - callbackModule It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::unsubscribeToEvent__ssCR.ssCR"
      },
      "getDataList": {
        "!type": "fn(filter: ?) -> Promise.Prototype",
        "!doc": "Gets a list of all key names that contain a given string It takes 1 argument(s): [filter] - filter It returns a Promise which is either resolved with the given value (A list of all the data key names that contain the given string.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getDataList__ssCR"
      },
      "getDataPtr": {
        "!type": "fn(key: ?) -> Promise.Prototype",
        "!doc": "Gets a pointer to 32 a bit data item. Beware, the pointer will only be valid during the lifetime of the ALMemoryProxy object. Use with care, at initialization, not every loop. It takes 1 argument(s): [key] - key It returns a Promise which is either resolved with the given value (A pointer converted to int) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::getDataPtr__ssCR"
      },
      "raiseMicroEvent": {
        "!type": "fn(name: ?, value: ?) -> Promise.Prototype",
        "!doc": "Publishes the given data to all subscribers. It takes 2 argument(s): [name] - name [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almemory-api.html#ALMemoryProxy::raiseMicroEvent__ssCR.AL::ALValueCR"
      }
    },
    "ALBattery": {
      "enablePowerMonitoring": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enables or disables power monitoring. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/albattery-api.html#ALBatteryProxy::enablePowerMonitoring__b"
      },
      "getBatteryCharge": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get battery charge. It returns a Promise which is either resolved with the given value (Return the battery charge in percent.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/albattery-api.html#ALBatteryProxy::getBatteryCharge"
      }
    },
    "ALBarcodeReader": {
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(paused: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [paused] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(subscriberName: ?, framerate: ?) -> Promise.Prototype",
        "!doc": "Sets the extractor framerate for a chosen subscriber It takes 2 argument(s): [subscriberName] - Name of the subcriber [framerate] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALAudioDevice": {
      "flushAudioOutputs": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "This methods clears all the samples that may remain to be sent to the loudspeaker. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::flushAudioOutputs"
      },
      "subscribe": {
        "!type": "fn(module: ?) -> Promise.Prototype",
        "!doc": "This function allows a module which inherits from the ALSoundExtractor class to subscribe to the ALAudioDevice module. Once the module is subscribed, the function 'process' of the module (the module needs to contain one) will be automatically and regularly called with raw data from microphones as inputs. The call to this method can be replaced by a call tostartDetection()within a NAOqi module that inherits from ALSoundExtractor. It takes 1 argument(s): [module] - module It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::subscribe__ssCR"
      },
      "getLeftMicEnergy": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the signal energy on the left microphone averaged on a 170ms buffer. The computation of the energy must first be enabled withALAudioDeviceProxy::enableEnergyComputation. It returns a Promise which is either resolved with the given value (energy [0,32768]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::getLeftMicEnergy"
      },
      "closeAudioOutputs": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Closes the audio device for playback. close the audio device for capture. You can call this method if you want to send sound to alsa in another program than naoqi while naoqi is running (with aplay for example) It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setParameter": {
        "!type": "fn(pParamName: ?, pParamValue: ?) -> Promise.Prototype",
        "!doc": "This method sets the specified internal parameter ('outputSampleRate' or 'inputBufferSize') inputBufferSize can bet set to 8192 or 16384. Warning: when speech recognition is running, a buffer size of 8192 is used. Don't change it during the recognition process. outputSampleRate can bet set to 16000 Hz, 22050 Hz, 44100 Hz or 48000 Hz. Warning: if speech synthesis is running, a sample rate of 16000 Hz or 22050 Hz is used (depending of the language). Don't change it during the synthesis process It takes 2 argument(s): [pParamName] - Name of the parameter to set ('outputSampleRate' or 'inputBufferSize'). [pParamValue] - The value to which the specified parameter should be set. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getRightMicEnergy": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the signal energy on the right microphone averaged on a 170ms buffer. The computation of the energy must first be enabled withALAudioDeviceProxy::enableEnergyComputation. It returns a Promise which is either resolved with the given value (energy [0,32768]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::getRightMicEnergy"
      },
      "getFrontMicEnergy": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the signal energy on the front microphone averaged on a 170ms buffer. The computation of the energy must first be enabled withALAudioDeviceProxy::enableEnergyComputation. It returns a Promise which is either resolved with the given value (energy [0,32768]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::getFrontMicEnergy"
      },
      "openAudioOutputs": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Opens the audio device for playback. If you closed the audio outputs with the closeAudioOutputs method, you must call this method to ear or send sound onto the nao's loudspeakers. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "muteAudioOut": {
        "!type": "fn(mute: ?) -> Promise.Prototype",
        "!doc": "Mutes the output device. It takes 1 argument(s): [mute] - mute It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::muteAudioOut__bCR"
      },
      "setClientPreferences": {
        "!type": "fn(name: ?, sampleRate: ?, channels: ?, deinterleaved: ?) -> Promise.Prototype",
        "!doc": "By using this method a module can specify the format of the signal that will be sent after subscribing toALAudioDevice. If no call to this method is made, the default format sent to this module is 4 channels interleaved at 48000Hz. Note that for now, only the following combinations are available: It takes 4 argument(s): [name] - name [sampleRate] - sampleRate [channels] - channels [deinterleaved] - deinterleaved It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::setClientPreferences__ssCR.iCR.iCR.iCR"
      },
      "isOutputClosed": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Allows to know if audio ouputs are closed or not It returns a Promise which is either resolved with the given value (True if audio outputs are closed / False otherwise) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getParameter": {
        "!type": "fn(pParamName: ?) -> Promise.Prototype",
        "!doc": "This method returns the specified internal parameter ('outputSampleRate' or 'inputBufferSize'). The value -1 is returned if the specified parameter is not valid. It takes 1 argument(s): [pParamName] - Name of the parameter to get ('outputSampleRate' or 'inputBufferSize'). It returns a Promise which is either resolved with the given value (value of the specified parameter) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getRearMicEnergy": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the signal energy on the rear microphone averaged on a 170ms buffer. The computation of the energy must first be enabled withALAudioDeviceProxy::enableEnergyComputation. It returns a Promise which is either resolved with the given value (energy [0,32768]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::getRearMicEnergy"
      },
      "getOutputVolume": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the overall output volume of the system. This volume can be set withALAudioDeviceProxy::setOutputVolume. It returns a Promise which is either resolved with the given value (volume [0,100]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::getOutputVolume"
      },
      "isInputClosed": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Allows to know if audio inputs are closed or not It returns a Promise which is either resolved with the given value (True if audio inputs are closed / False otherwise) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "closeAudioInputs": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Closes the audio device for capture. You can call this method if you want to have access to the alsa input buffers in another program than naoqi while naoqi is running (with arecord for example) It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopMicrophonesRecording": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "This method stops the recording started by the call toALAudioDeviceProxy::startMicrophonesRecording. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::stopMicrophonesRecording"
      },
      "setOutputVolume": {
        "!type": "fn(volume: ?) -> Promise.Prototype",
        "!doc": "Sets the overall output volume of the system. This volume can be collected withALAudioDeviceProxy::getOutputVolume. It takes 1 argument(s): [volume] - volume It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::setOutputVolume__iCR"
      },
      "enableEnergyComputation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Enables the computation of the energy on each input channel (this computation is off by default). The result of this computation can be collected by calling: It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::enableEnergyComputation"
      },
      "unsubscribe": {
        "!type": "fn(module: ?) -> Promise.Prototype",
        "!doc": "This function allows a module which inherits from the ALSoundExtractor class to unsubscribe from the ALAudioDevice module. This stops the regular calls to the module callback \"process\". The call to this method can be replaced by a call tostopDetection()within a NAOqi module that inherits from ALSoundExtractor. It takes 1 argument(s): [module] - module It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::unsubscribe__ssCR"
      },
      "disableEnergyComputation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Disables the computation of the energy on each input channel. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::disableEnergyComputation"
      },
      "sendRemoteBufferToOutput": {
        "!type": "fn(nbOfFrames: ?, buffer: ?) -> Promise.Prototype",
        "!doc": "By using this method a remote module (a module running outside the robot) can send a signal to the robot's loudspeakers. This signal should be formated as a 16 bits stereo interleaved buffer. The size of this buffer should also not exceed 16384. It takes 2 argument(s): [nbOfFrames] - nbOfFrames [buffer] - buffer It returns a Promise which is either resolved with the given value (True if the operation is successful - False otherwise) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::sendRemoteBufferToOutput__iCR.AL::ALValueCR"
      },
      "playSine": {
        "!type": "fn(frequence: ?, gain: ?, pan: ?, duration: ?) -> Promise.Prototype",
        "!doc": "Play a sine wave which the specified characteristics. It takes 4 argument(s): [frequence] - frequence [gain] - gain [pan] - pan [duration] - duration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::playSine__iCR.iCR.iCR.floatCR"
      },
      "sendLocalBufferToOutput": {
        "!type": "fn(nbOfFrames: ?, buffer: ?) -> Promise.Prototype",
        "!doc": "By using this method a local module (a module running on the robot) can send a signal to the robot's loudspeakers. This signal should be formated as a 16 bits stereo interleaved buffer. The size of this buffer should also not exceed 16384. It takes 2 argument(s): [nbOfFrames] - nbOfFrames [buffer] - buffer It returns a Promise which is either resolved with the given value (True if the operation is successful - False otherwise) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::sendLocalBufferToOutput__iCR.iCR"
      },
      "isAudioOutMuted": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Tells if the audio output device has been muted by a call toALAudioDeviceProxy::muteAudioOut. It returns a Promise which is either resolved with the given value (True if the output device has been muted, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::isAudioOutMuted"
      },
      "openAudioInputs": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Opens the audio device for capture. If you closed the audio inputs with the closeAudioInputs method, you must call this method to be able to access to the sound data of the nao's microphones. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFileAsInput": {
        "!type": "fn(fileName: ?) -> Promise.Prototype",
        "!doc": "This method notifiesALAudioDevicethat audio inputs should be read in the specified file instead. The specified sound file must be a .wav file containing 48000Hz, 16bits, 4 channels interleaved signals. It takes 1 argument(s): [fileName] - fileName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::setFileAsInput__ssCR"
      },
      "startMicrophonesRecording": {
        "!type": "fn(fileName: ?) -> Promise.Prototype",
        "!doc": "This method records the signal collected on the microphones directly into the specified file. It takes 1 argument(s): [fileName] - fileName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiodevice-api.html#ALAudioDeviceProxy::startMicrophonesRecording__ssCR"
      }
    },
    "ALAudioRecorder": {
      "stopMicrophonesRecording": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "This method stops the recording of the signal collected by the microphones started withALAudioRecorderProxy::startMicrophonesRecording. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiorecorder-api.html#ALAudioRecorderProxy::stopMicrophonesRecording"
      },
      "startMicrophonesRecording": {
        "!type": "fn(filename: ?, type: ?, samplerate: ?, channels: ?) -> Promise.Prototype",
        "!doc": "This method launches the recording of the audio signal measured by the microphones formated as specified. The resulting recording is written in the specified file. It takes 4 argument(s): [filename] - filename [type] - type [samplerate] - samplerate [channels] - channels It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudiorecorder-api.html#ALAudioRecorderProxy::startMicrophonesRecording__ssCR.ssCR.iCR.AL::ALValueCR"
      }
    },
    "ALDialog": {
      "mute": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Mute dialog It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setConceptKeepInCache": {
        "!type": "fn(conceptName: ?, language: ?, content: ?) -> Promise.Prototype",
        "!doc": "Set the content of a dynamic concept It takes 3 argument(s): [conceptName] - concept name [language] - language [content] - concept content It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "runTopics": {
        "!type": "fn(topicsPathName: ?) -> Promise.Prototype",
        "!doc": "CallsALDialogProxy::loadTopic,ALDialogProxy::activateTopicandALDialogProxy::subscribefor the topics given in parameter, then starts the speech recognition on the robot. It takes 1 argument(s): [topicsPathName] - topicsPathName It returns a Promise which is either resolved with the given value (a list of short names of the run topics.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::runTopics__std::vector:ss:"
      },
      "enableTriggerSentences": {
        "!type": "fn(enableTriggerSentences: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [enableTriggerSentences] - Enable trigger sentences if true It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getUserList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the list of user IDs if you have added at least one data for this user with $user/variable=value. User ID are given byALDialogProxy::openSessioncalled byALAutonomousLife. It returns a Promise which is either resolved with the given value (List of user IDs (int).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getUserList"
      },
      "loadTopic": {
        "!type": "fn(topicFilePath: ?) -> Promise.Prototype",
        "!doc": "Loads the topic, exports and compiles the corresponding context files so that they are ready to be used by the speech recognition engine (ASR). The name of the topic (defined in the first line of the specified file) is returned by the function, so that it can be used elsewhere in the code. It takes 1 argument(s): [topicFilePath] - topicFilePath It returns a Promise which is either resolved with the given value (Name of the loaded topic. Any syntax errors in the topic file are thrown as exceptions.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::loadTopic__ssCR"
      },
      "convertNUToLong": {
        "!type": "fn(Language: ?) -> Promise.Prototype",
        "!doc": "Convert language from NU format to Long format It takes 1 argument(s): [Language] - language in NU format It returns a Promise which is either resolved with the given value (language in Long format ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "loadTopicContent": {
        "!type": "fn(topicContent: ?) -> Promise.Prototype",
        "!doc": "Works exactly likeALDialogProxy::loadTopic, but instead of a topic's path, its qichat code can be passed directly to the method. It takes 1 argument(s): [topicContent] - topicContent It returns a Promise which is either resolved with the given value (Name of the loaded topic. Any syntax errors in the topic file are thrown as exceptions.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::loadTopicContent__ssCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getLanguageListNUToLong": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get language map NU to Long format It returns a Promise which is either resolved with the given value (get language map NU to Long format) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getAllLoadedTopics": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getAllLoadedTopics"
      },
      "deactivateTag": {
        "!type": "fn(tagName: ?, topicName: ?) -> Promise.Prototype",
        "!doc": "If you load and activate your own topic, all tags inside it are active by default. It takes 2 argument(s): [tagName] - tagName [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::deactivateTag__ssCR.ssCR"
      },
      "convertLongToNU": {
        "!type": "fn(Language: ?) -> Promise.Prototype",
        "!doc": "Convert language from Long format to NU format It takes 1 argument(s): [Language] - language in Long format It returns a Promise which is either resolved with the given value (language in NU format ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isContentNeedsUpdate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "True if new content was installed It returns a Promise which is either resolved with the given value (True if content was updated since last compilation) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setASRConfidenceThreshold": {
        "!type": "fn(threshold: ?) -> Promise.Prototype",
        "!doc": "Set the minimum confidence required to recognize words. Better to use confidence by asr model It takes 1 argument(s): [threshold] - input string that simulate humain sentence It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActivatedTopics": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getActivatedTopics"
      },
      "closeSession": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Closes the current dialog session and stores all the related ALMemory variables in the database dedicated to ALDialog. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::closeSession"
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "resetLanguage": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Sets the language of the dialog engine to the preferred language of the robot. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::resetLanguage"
      },
      "enableLogAudio": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Enable sending log audio (recorded conversation) to the cloud It returns a Promise which is either resolved with the given value (Enable audio log) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getLanguage": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the language of the dialog engine. It returns a Promise which is either resolved with the given value (a language name.Example: \"English\".For the complete list of supported languages, see:Dialog - List of supported Languages,Dialog - List of supported Languages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getLanguage"
      },
      "getLanguageListISOToNU": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get language map ISO to NU format It returns a Promise which is either resolved with the given value (get language map ISO to NU format) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopDialog": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "If runDialog was started, stops all topics marked as collaborative dialog in application manifest. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::stopDialog"
      },
      "setAnimatedSpeechConfiguration": {
        "!type": "fn(animatedSpeechConfiguration: ?) -> Promise.Prototype",
        "!doc": "Sets the animated speech (speaking movement) configuration used by the dialog. It can be different from the general one, defined with theALSpeakingMovement API. It takes 1 argument(s): [animatedSpeechConfiguration] - animatedSpeechConfiguration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::setAnimatedSpeechConfiguration__AL::ALValueCR"
      },
      "applicationBlackList": {
        "!type": "fn(applicationList: ?) -> Promise.Prototype",
        "!doc": "Black list a list of application It takes 1 argument(s): [applicationList] - List of applications that cannot be launched by dialog It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "removeFallback": {
        "!type": "fn(language: ?, name: ?) -> Promise.Prototype",
        "!doc": "Remove a fallback plugin It takes 2 argument(s): [language] - The language of the plugin [name] - The name of the plugin It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setVariablePath": {
        "!type": "fn(topicName: ?, eventName: ?, path: ?) -> Promise.Prototype",
        "!doc": "Changes event name at runtime. It takes 3 argument(s): [topicName] - topicName [eventName] - eventName [path] - path It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::setVariablePath__ssCR.ssCR.ssCR"
      },
      "getUserData": {
        "!type": "fn(variableName: ?, userID: ?) -> Promise.Prototype",
        "!doc": "Gets a variable value from user dialog database. It takes 2 argument(s): [variableName] - variableName [userID] - userID It returns a Promise which is either resolved with the given value (Variable value (string).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getUserData__ssCR.iCR"
      },
      "endOfUtteranceCallback": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "End of utterance asr callback It returns a Promise which is either resolved with the given value (true if reprocess buffer) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unloadTopic": {
        "!type": "fn(topicName: ?) -> Promise.Prototype",
        "!doc": "Unloads the specified topic and frees the associated memory. It takes 1 argument(s): [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::unloadTopic__ssCR"
      },
      "closeTestSession": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Close the test session It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "runDialog": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Retrieves all topics marked as collaborative dialog in application manifest. Loads, compiles and activates these topics. Application triggers are automatically added in speech recognition if application dialog_applauncher is installed on robot. dialog_applauncher is a basic channel application. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::runDialog"
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "enableSendingLogToCloud": {
        "!type": "fn(EnableLog: ?) -> Promise.Prototype",
        "!doc": "Let the robot send log the cloud It takes 1 argument(s): [EnableLog] - Enable log It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "removeUserData": {
        "!type": "fn(UserID: ?) -> Promise.Prototype",
        "!doc": "Remove a user from the database It takes 1 argument(s): [UserID] - User ID It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "gotoTopic": {
        "!type": "fn(topicName: ?) -> Promise.Prototype",
        "!doc": "Sets the focus to the given topic then says the first activated proposal of the topic (if any). It takes 1 argument(s): [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::gotoTopic__ssCR"
      },
      "generateSentences": {
        "!type": "fn(destination: ?, topic: ?, language: ?) -> Promise.Prototype",
        "!doc": "Generates all possible input sentences to a text file. It takes 3 argument(s): [destination] - destination [topic] - topic [language] - language It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::generateSentences__ssCR.ssCR.ssCR"
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "forceInput": {
        "!type": "fn(input: ?) -> Promise.Prototype",
        "!doc": "Stimulates the dialog engine with the given input as if this input had been given by the speech recognition engine. It takes 1 argument(s): [input] - input It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::forceInput__ssCR"
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "activateTag": {
        "!type": "fn(tagName: ?, topicName: ?) -> Promise.Prototype",
        "!doc": "Activates the given tag in the specified topic. It takes 2 argument(s): [tagName] - tagName [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::activateTag__ssCR.ssCR"
      },
      "gotoTag": {
        "!type": "fn(tagName: ?, topicName: ?) -> Promise.Prototype",
        "!doc": "Warning It takes 2 argument(s): [tagName] - tagName [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::gotoTag__ssC.ssCR"
      },
      "subscribe": {
        "!type": "fn(subscriberName: ?) -> Promise.Prototype",
        "!doc": "Example Python script & dialog topic: It takes 1 argument(s): [subscriberName] - subscriberName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::subscribe__ssCR"
      },
      "setDelay": {
        "!type": "fn(eventName: ?, validity: ?) -> Promise.Prototype",
        "!doc": "This method is related to the qichat event detection feature (see also other related methods:ALDialogProxy::addBlockingEventandALDialogProxy::removeBlockingEvent). If an event is not blocking (that is, does not interrupt the robot's speach immediately), it has a limited validity, by default: 2 seconds. If the robot is currently saying a very long sentence, the event (ex. touching the robot's head) will time out, the robot will not react. It takes 2 argument(s): [eventName] - eventName [validity] - validity It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::setDelay__ssCR.i"
      },
      "addBlockingEvent": {
        "!type": "fn(eventName: ?) -> Promise.Prototype",
        "!doc": "Qichat has an event detection feature - for example touching the robot's head can provoke a verbal reaction. With this method you can declare an event as blocking, so that it will interrupt the robot's speech and the robot will react immediately. By default, the dialog engine waits until the speech is finished and then makes the robot react to the event. In order to restore the default behavior, use theALDialogProxy::removeBlockingEventmethod (or restart naoqi). It takes 1 argument(s): [eventName] - eventName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::addBlockingEvent__ssCR"
      },
      "removeAllLanguageThresholds": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Resets all speech recognition confidence thresholds to default. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::removeAllLanguageThresholds"
      },
      "stopPush": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Makes the dialog engine stop making proposals automatically. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::stopPush"
      },
      "tell": {
        "!type": "fn(input: ?) -> Promise.Prototype",
        "!doc": "Give a sentence to the dialog and get the answer It takes 1 argument(s): [input] - input string that simulate humain sentence It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setConfidenceThreshold": {
        "!type": "fn(grammar: ?, threshold: ?) -> Promise.Prototype",
        "!doc": "For the given grammar, sets the minimum confidence level of a speech recognition result. Below this threshold value, the dialog engine ignores results returned by the ASR (as if the robot did not hear anything). It takes 2 argument(s): [grammar] - grammar [threshold] - threshold It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::setConfidenceThreshold__ssCR.floatCR"
      },
      "clearConcepts": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Clears the contents of all existing dynamic concepts. Does not modify static concepts. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::clearConcepts"
      },
      "setStoppable": {
        "!type": "fn(stoppable: ?) -> Promise.Prototype",
        "!doc": "Is engine stoppable It takes 1 argument(s): [stoppable] - set if engine can be stopped by user session It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "addFallback": {
        "!type": "fn(language: ?, name: ?) -> Promise.Prototype",
        "!doc": "Add a fallback plugin It takes 2 argument(s): [language] - The language of the plugin [name] - The name of the plugin It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getLanguageListLongToNU": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get language map Long to NU format It returns a Promise which is either resolved with the given value (get language map Long to NU format) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFocus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the name of the currently focused topic. To focus a topic, you need to match a rule of that topic. You can also force the focus withALDialogProxy::setFocus. The currently focused topic is also used to make proposals. It returns a Promise which is either resolved with the given value (the currently focused topic's name.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getFocus"
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "addToConcept": {
        "!type": "fn(conceptName: ?, language: ?, content: ?) -> Promise.Prototype",
        "!doc": "Allows to add more words / sentences to an existing, non-empty dynamic concept, without overwriting it. It takes 3 argument(s): [conceptName] - conceptName [language] - language [content] - content It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::addToConcept__ssCR.ssCR.std::vector:ss:CR"
      },
      "setFocus": {
        "!type": "fn(topicName: ?) -> Promise.Prototype",
        "!doc": "If multiple topics can be active at the same time, only one of them is used to generate proposals. This topic is said to have the focus. A call to this function forces the focus to the specified topic. After this call, proposals will be generated from this topic and human inputs will be first parsed through this topic. However, if a rule from a different active topic is matched, the focus will change automatically to that topic. It takes 1 argument(s): [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::setFocus__ssCR"
      },
      "startPush": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Makes the dialog engine start making proposals automatically. After an answer, the dialog engine will automatically say a proposal from the available topics (the proposal will be included in the answer). Dialog engine will first try to say a proposal from the topic having the focus (see:ALDialogProxy::setFocus), then from other topics. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::startPush"
      },
      "openSession": {
        "!type": "fn(id: ?) -> Promise.Prototype",
        "!doc": "Opens a new dialog session. A call to this function restores the dialog user variables to ALMemory from the dialog database. It takes 1 argument(s): [id] - id It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::openSession__i"
      },
      "setNumberOfScopes": {
        "!type": "fn(numberOfScope: ?) -> Promise.Prototype",
        "!doc": "Set how many scopes remains open It takes 1 argument(s): [numberOfScope] - number of scope It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getConfidenceThreshold": {
        "!type": "fn(grammar: ?, language: ?) -> Promise.Prototype",
        "!doc": "For the given grammar and language, gets the minimum confidence level of a speech recognition result. Below this threshold value, the dialog engine ignores the result (as if the robot did not hear anything). It takes 2 argument(s): [grammar] - grammar [language] - language It returns a Promise which is either resolved with the given value (threshold value for the given grammar and language; the default value depends on the robot's configuration, in most cases it's around 0.5.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getConfidenceThreshold__ssCR.ssCR"
      },
      "activateTopic": {
        "!type": "fn(topicName: ?) -> Promise.Prototype",
        "!doc": "Adds the specified topic to the list of the topics that are currently used by the dialog engine to parse the human's inputs. Several topics can be active at the same time but only one will be used to generate proposals (this specific topic is said to have the focus). It takes 1 argument(s): [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::activateTopic__ssCR"
      },
      "getAnimatedSpeechConfiguration": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current animated speech (speaking movement) configuration used by the dialog. It returns a Promise which is either resolved with the given value (an AL::ALValue (in C++) / a list of two-element lists (in Python) with the current values of animated speech parameters.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getAnimatedSpeechConfiguration"
      },
      "stopTopics": {
        "!type": "fn(topicsName: ?) -> Promise.Prototype",
        "!doc": "Deactivates and unloads topics previously run withALDialogProxy::runTopics, then stops the speech recognition. It takes 1 argument(s): [topicsName] - topicsName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::stopTopics__std::vector:ss:"
      },
      "createContext": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Create a context It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isSendingLogToCloud": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Check if the robot is sending the log to the cloud It returns a Promise which is either resolved with the given value (True if currently logging) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "say": {
        "!type": "fn(topicPathAndName: ?, tagName: ?) -> Promise.Prototype",
        "!doc": "Says a tagged sentence from a topic. Does not affect neither the currently activated topic(s) (even if it is the same topic) nor the speech recognition. It takes 2 argument(s): [topicPathAndName] - topicPathAndName [tagName] - tagName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::say__ss.ss"
      },
      "getAllConfidenceThresholds": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "For all the 3 grammars (BNF, SLM, REMOTE) returns the ASR threshold's value for each language. Speech recognition results whose confidence is below this threshold are ignored by the dialog engine. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getAllConfidenceThresholds"
      },
      "getLanguageListNUToISO": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get language map NU to ISO format It returns a Promise which is either resolved with the given value (get language map NU to ISO format) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getASRConfidenceThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the minimum confidence required to recognize words It returns a Promise which is either resolved with the given value (current asr confidence) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "dialogAnswered": {
        "!type": "fn(variableName: ?, variableValue: ?, message: ?) -> Promise.Prototype",
        "!doc": "It takes 3 argument(s): [variableName] - variable name [variableValue] - variable value [message] - message It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "enableCategory": {
        "!type": "fn(enableCategory: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [enableCategory] - Enable category if true It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getStoppable": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Is engine stoppable It returns a Promise which is either resolved with the given value (Is engine stoppable) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "forceOutput": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Forces the robot to say a proposal, if any is available. A proposal will be said either from the currently focused topic or last focused topic (in case if no topics are focused). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::forceOutput"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getLoadedTopics": {
        "!type": "fn(language: ?) -> Promise.Prototype",
        "!doc": "Returns a list of currently loaded topics for a given language. It takes 1 argument(s): [language] - language It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getLoadedTopics__ssCR"
      },
      "getConcept": {
        "!type": "fn(conceptName: ?, language: ?) -> Promise.Prototype",
        "!doc": "Retrieves the content of an existing dynamic concept, set previously withALDialogProxy::setConceptorALDialogProxy::addToConcept. It takes 2 argument(s): [conceptName] - conceptName [language] - language It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getConcept__ssCR.ssCR"
      },
      "deactivateTopic": {
        "!type": "fn(topicName: ?) -> Promise.Prototype",
        "!doc": "Removes the specified topic from list of the topics that are currently used by the dialog engine to parse the human's inputs. Several topics can be active at the same time but only one will be used to generate proposals (this specific topic is said to have the focus). It takes 1 argument(s): [topicName] - topicName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::deactivateTopic__ssCR"
      },
      "setLanguage": {
        "!type": "fn(language: ?) -> Promise.Prototype",
        "!doc": "Sets the language of the dialog engine for the current application. It takes 1 argument(s): [language] - language It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::setLanguage__ssCR"
      },
      "convertNUToISO": {
        "!type": "fn(Language: ?) -> Promise.Prototype",
        "!doc": "Convert language from NU format to ISO format It takes 1 argument(s): [Language] - language in NU format It returns a Promise which is either resolved with the given value (language in ISO format ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "convertISOToNU": {
        "!type": "fn(Language: ?) -> Promise.Prototype",
        "!doc": "Convert language from ISO format to NU format It takes 1 argument(s): [Language] - language in ISO format It returns a Promise which is either resolved with the given value (language in NU format ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "resetAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Resets the status of all topics: all proposals can be used again. Scopes (u1 rules) are closed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::resetAll"
      },
      "insertUserData": {
        "!type": "fn(variableName: ?, variableValue: ?, userID: ?) -> Promise.Prototype",
        "!doc": "Inserts directly a variable in user dialog database. It takes 3 argument(s): [variableName] - variableName [variableValue] - variableValue [userID] - userID It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::insertUserData__ssCR.ssCR.iCR"
      },
      "compileBundle": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Compile all for ASR It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "compileAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Can be optionally called after a series of loadTopic in order to build dialog model and speech recognition model. If not called the compilation occurs once at runtime. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::compileAll"
      },
      "enableSimulatedApps": {
        "!type": "fn(simulateApps: ?) -> Promise.Prototype",
        "!doc": "Define if applications will be launched or not It takes 1 argument(s): [simulateApps] - set simulated apps It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setConcept": {
        "!type": "fn(conceptName: ?, language: ?, content: ?) -> Promise.Prototype",
        "!doc": "Sets the specified dynamic concept of the specified language with the given word list. It takes 3 argument(s): [conceptName] - conceptName [language] - language [content] - content It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::setConcept__ssCR.ssCR.std::vector:ss:CR"
      },
      "noPick": {
        "!type": "fn(topicName: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [topicName] - Topic name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "removeBlockingEvent": {
        "!type": "fn(eventName: ?) -> Promise.Prototype",
        "!doc": "This method reverts the functionality previously enabled withALDialogProxy::addBlockingEvent. The given event will no longer immediately interrupt the robot's speech. It takes 1 argument(s): [eventName] - eventName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::removeBlockingEvent__ssCR"
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(subscriberName: ?) -> Promise.Prototype",
        "!doc": "Stops the dialog engine and the speech recognition on the robot if nobody else is subscribed to ALDialog. It takes 1 argument(s): [subscriberName] - subscriberName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::unsubscribe__ssCR"
      },
      "getUserDataList": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets all variable list of a user. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (Variable name list.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/dialog/aldialog-api.html#ALDialogProxy::getUserDataList__iCR"
      }
    },
    "ALFaceDetection": {
      "getLearnedFacesList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets a list containing the name of each learned face. The size of this list is always equal to the number of faces in the data base. It returns a Promise which is either resolved with the given value (List of names) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::getLearnedFacesList"
      },
      "setRecognitionConfidenceThreshold": {
        "!type": "fn(threshold: ?) -> Promise.Prototype",
        "!doc": "Sets a new threshold value for face recognition. This value must be between 0 and 1, with a default of 0.4. Refer toThresholdfor a more complete explanation. It takes 1 argument(s): [threshold] - threshold It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::setRecognitionConfidenceThreshold__float"
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "enableRecognition": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Deprecated It takes 1 argument(s): [enable] - True/False It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "reLearnFace": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Adds a new identification picture to a specific user record. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (true if the operation succeeded) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::reLearnFace__ssCR"
      },
      "getRecognitionConfidenceThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current threshold value used for face recognition. It returns a Promise which is either resolved with the given value (Threshold value.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::getRecognitionConfidenceThreshold"
      },
      "importOldDatabase": {
        "!type": "fn(policy: ?) -> Promise.Prototype",
        "!doc": "Conversion tool. Converts an old data base (NAOqi version < 1.22) to the new format. This needs to be run only once. It takes 1 argument(s): [policy] - policy It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::importOldDatabase__ssCR"
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isTrackingEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether tracking is enabled. Tracking is enabled by default. It returns a Promise which is either resolved with the given value (true/false) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::isTrackingEnabled"
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "learnFace": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Learns a new face and adds it in the database under the specified name. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (true if the operation succeeded) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::learnFace__ssCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(paused: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [paused] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(subscriberName: ?, framerate: ?) -> Promise.Prototype",
        "!doc": "Sets the extractor framerate for a chosen subscriber It takes 2 argument(s): [subscriberName] - Name of the subcriber [framerate] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "clearDatabase": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Removes all learned faces from the database. It returns a Promise which is either resolved with the given value (true if the operation succeeded) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::clearDatabase"
      },
      "isRecognitionEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether recognition is enabled. Recognition is enabled by default. It returns a Promise which is either resolved with the given value (true/false) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::isRecognitionEnabled"
      },
      "enableTracking": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Deprecated It takes 1 argument(s): [enable] - True/False It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "forgetPerson": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Deletes from the database all learned faces corresponding to the specified person. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (true if the operation succeeded) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::forgetPerson__ssCR"
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setRecognitionEnabled": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enables/disables the face recognition process. The remaining face detection process will be faster if face recognition is disabled. Face recognition is enabled by default. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::setRecognitionEnabled__bCR"
      },
      "setTrackingEnabled": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enables/disables face tracking. Enabling tracking usually allows you to follow a face even if the corresponding person is not facing the camera anymore. However, it can lead to more false detections. When active, only one face at a time will be detected. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacedetection-api.html#ALFaceDetectionProxy::setTrackingEnabled__bCR"
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALTactileGesture": {
      "getSequence": {
        "!type": "fn(gestureName: ?) -> Promise.Prototype",
        "!doc": "Get the sequence corresponding to the supplied gesture name. It takes 1 argument(s): [gestureName] - gestureName It returns a Promise which is either resolved with the given value (The sequence of the supplied gesture. Return None if gesture doesn't exist.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altactilegesture-api.html#ALTactileGesture::getSequence__ss"
      },
      "getGesture": {
        "!type": "fn(sequence: ?) -> Promise.Prototype",
        "!doc": "Get the name of the gesture corresponding to the supplied sequence. It takes 1 argument(s): [sequence] - sequence It returns a Promise which is either resolved with the given value (The gesture name corresponding to the supplied sequence. None if the sequence doesn't correspond to any gesture.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altactilegesture-api.html#ALTactileGesture::getGesture__std::vector:ss:"
      },
      "createGesture": {
        "!type": "fn(sequence: ?) -> Promise.Prototype",
        "!doc": "Create a tactile gesture. It takes 1 argument(s): [sequence] - sequence It returns a Promise which is either resolved with the given value (The name of the gesture that's associated with the sequence supplied. Throws RuntimeError if sequence is malformed.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altactilegesture-api.html#ALTactileGesture::createGesture__std::vector:ss:"
      },
      "setSequenceTime": {
        "!type": "fn(sequenceTime: ?) -> Promise.Prototype",
        "!doc": "Change the sequence time. See:ALTactileGesture. It takes 1 argument(s): [sequenceTime] - sequenceTime It returns a Promise which is either resolved with the given value (True on success, False otherwise. Throws RuntimeError if sequenceTime cannot be understood as a float.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altactilegesture-api.html#ALTactileGesture::setSequenceTime__float"
      },
      "setSettleTime": {
        "!type": "fn(settleTime: ?) -> Promise.Prototype",
        "!doc": "Change the settle time. See:ALTactileGesture. It takes 1 argument(s): [settleTime] - settleTime It returns a Promise which is either resolved with the given value (True on success, False otherwise. Throws RuntimeError if settleTime cannot be understood as a float.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altactilegesture-api.html#ALTactileGesture::setSettleTime__float"
      },
      "getGestures": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get all gestures (including dynamically created gestures). It returns a Promise which is either resolved with the given value (Dictionary (name: sequence) of all gestures) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altactilegesture-api.html#ALTactileGesture::getGestures"
      },
      "setHoldTime": {
        "!type": "fn(holdTime: ?) -> Promise.Prototype",
        "!doc": "Change the hold time. See:ALTactileGesture. It takes 1 argument(s): [holdTime] - holdTime It returns a Promise which is either resolved with the given value (True on success, False otherwise. Throws RuntimeError if holdTime cannot be understood as a float.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altactilegesture-api.html#ALTactileGesture::setHoldTime__float"
      }
    },
    "ALLeds": {
      "listGroup": {
        "!type": "fn(groupName: ?) -> Promise.Prototype",
        "!doc": "Lists the devices in the group. It takes 1 argument(s): [groupName] - groupName It returns a Promise which is either resolved with the given value (A vector of string device names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::listGroup__ssCR"
      },
      "on": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Switch to a maximum intensity a LED or Group of LEDs. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::on__ssCR"
      },
      "listGroups": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Lists available group names. It returns a Promise which is either resolved with the given value (A vector of group names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::listGroups"
      },
      "getIntensity": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the intensity of a LED. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (The intensity of the LED.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::getIntensity__ssCR"
      },
      "fadeRGB": {
        "!type": "fn(name: ?, red: ?, green: ?, blue: ?, duration: ?) -> Promise.Prototype",
        "!doc": "There are three overloads of this function: It takes 5 argument(s): [name] - name [red] - red [green] - green [blue] - blue [duration] - duration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::fadeRGB__ssCR.floatCR.floatCR.floatCR.floatCR"
      },
      "fade": {
        "!type": "fn(name: ?, intensity: ?, duration: ?) -> Promise.Prototype",
        "!doc": "Sets the intensity of a LED or Group of LEDs within a given time. It takes 3 argument(s): [name] - name [intensity] - intensity [duration] - duration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::fade__ssCR.floatCR.floatCR"
      },
      "rasta": {
        "!type": "fn(duration: ?) -> Promise.Prototype",
        "!doc": "Launch a green/yellow/red rasta animation on all body. It takes 1 argument(s): [duration] - duration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::rasta__floatCR"
      },
      "listLED": {
        "!type": "fn(arg1: ?) -> Promise.Prototype",
        "!doc": "Lists the devices aliased by a short LED name. It takes 1 argument(s): [arg1] - arg1 It returns a Promise which is either resolved with the given value (A vector of device names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::listLED__ssCR"
      },
      "rotateEyes": {
        "!type": "fn(rgb: ?, timeForRotation: ?, totalDuration: ?) -> Promise.Prototype",
        "!doc": "Launch a rotation using the leds of the eyes. It takes 3 argument(s): [rgb] - rgb [timeForRotation] - timeForRotation [totalDuration] - totalDuration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::rotateEyes__iCR.floatCR.floatCR"
      },
      "earLedsSetAngle": {
        "!type": "fn(degrees: ?, duration: ?, leaveOnAtEnd: ?) -> Promise.Prototype",
        "!doc": "An animation to show a direction with the ears. It takes 3 argument(s): [degrees] - degrees [duration] - duration [leaveOnAtEnd] - leaveOnAtEnd It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::earLedsSetAngle__iCR.floatCR.bCR"
      },
      "off": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Switch to a minimum intensity a LED or Group of LEDs. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::off__ssCR"
      },
      "reset": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Set a LED or Group of LEDs to their default state. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::reset__ssCR"
      },
      "randomEyes": {
        "!type": "fn(duration: ?) -> Promise.Prototype",
        "!doc": "Launch a random animation in eyes It takes 1 argument(s): [duration] - duration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::randomEyes__floatCR"
      },
      "listLEDs": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Lists the short LED names. It returns a Promise which is either resolved with the given value (A vector of LED names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::listLEDs"
      },
      "setIntensity": {
        "!type": "fn(name: ?, intensity: ?) -> Promise.Prototype",
        "!doc": "Sets the intensity of a LED or Group of LEDs. It takes 2 argument(s): [name] - name [intensity] - intensity It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::setIntensity__ssCR.floatCR"
      },
      "createGroup": {
        "!type": "fn(groupName: ?, ledNames: ?) -> Promise.Prototype",
        "!doc": "Makes a group name for ease of setting multiple LEDs. It takes 2 argument(s): [groupName] - groupName [ledNames] - ledNames It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::createGroup__ssCR.std::vector:ss:CR"
      },
      "fadeListRGB": {
        "!type": "fn(name: ?, rgbList: ?, timeList: ?) -> Promise.Prototype",
        "!doc": "Executes a list of color commands for a LED or a group of LEDs (like a timeline for LEDs). It takes 3 argument(s): [name] - name [rgbList] - rgbList [timeList] - timeList It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alleds-api.html#ALLedsProxy::fadeListRGB__ssCR.AL::ALValueCR.AL::ALValueCR"
      }
    },
    "ALBacklightingDetection": {
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(paused: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [paused] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(subscriberName: ?, framerate: ?) -> Promise.Prototype",
        "!doc": "Sets the extractor framerate for a chosen subscriber It takes 2 argument(s): [subscriberName] - Name of the subcriber [framerate] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALVoiceEmotionAnalysis": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Subscribes toALVoiceEmotionAnalysis. This causes the module to start raising the\"ALVoiceEmotionAnalysis/EmotionRecognized\"ALMemoryevent which you can subscribe to by usingALMemoryProxy::subscribeToMicroEvent. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alvoiceemotionanalysis-api.html#ALVoiceEmotionAnalysisProxy::subscribe__ssCR"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes toALVoiceEmotionAnalysis. This causes the module to stop raising the\"ALVoiceEmotionAnalysis/EmotionRecognized\"ALMemoryevent. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alvoiceemotionanalysis-api.html#ALVoiceEmotionAnalysisProxy::unsubscribe__ssCR"
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setParameter": {
        "!type": "fn(parameter: ?, value: ?) -> Promise.Prototype",
        "!doc": "Sets parameters. It takes 2 argument(s): [parameter] - parameter [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alvoiceemotionanalysis-api.html#ALVoiceEmotionAnalysisProxy::setParameter__ssCR.AL::ALValueCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALLaser": {
      "laserOFF": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Disable laser light, the motor will keep turning. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/allaser-api.html#ALLaserProxy::laserOFF"
      },
      "setDetectingLength": {
        "!type": "fn(length_min_l: ?, length_max_l: ?) -> Promise.Prototype",
        "!doc": "Set detection threshold of the laser It takes 2 argument(s): [length_min_l] - length_min_l [length_max_l] - length_max_l It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/allaser-api.html#ALLaserProxy::setDetectingLength__iCR.iCR"
      },
      "laserON": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Enable laser light and sampling It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/allaser-api.html#ALLaserProxy::laserON"
      },
      "setOpeningAngle": {
        "!type": "fn(angle_min_f: ?, angle_max_f: ?) -> Promise.Prototype",
        "!doc": "Set openning angle of the laser It takes 2 argument(s): [angle_min_f] - angle_min_f [angle_max_f] - angle_max_f It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/allaser-api.html#ALLaserProxy::setOpeningAngle__floatCR.floatCR"
      }
    },
    "ALSoundLocalization": {
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Subscribes toALSoundLocalization. This causes the module to start raising the\"ALSoundLocalization/SoundLocated\"ALMemoryevent which you can subscribe to by usingALMemoryProxy::subscribeToMicroEvent. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alsoundlocalization-api.html#ALSoundLocalizationProxy::subscribe__ssCR"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes toALSoundLocalization. This causes the module to stop raising the\"ALSoundLocalization/SoundLocated\"ALMemoryevent. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alsoundlocalization-api.html#ALSoundLocalizationProxy::unsubscribe__ssCR"
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setParameter": {
        "!type": "fn(parameter: ?, value: ?) -> Promise.Prototype",
        "!doc": "Sets parameters. It takes 2 argument(s): [parameter] - parameter [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alsoundlocalization-api.html#ALSoundLocalizationProxy::setParameter__ssCR.AL::ALValueCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALBodyTemperature": {
      "areNotificationsEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get notifications status. Return true if notifications are active. It returns a Promise which is either resolved with the given value (Return true is notifications are active.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/albodytemperature-api.html#ALBodyTemperatureProxy::areNotificationsEnabled"
      },
      "getTemperatureDiagnosis": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the actual state of the temperature diagnosis. Only the highest level of failure is returned. It returns a Promise which is either resolved with the given value (An AL::ALValue containing the actual temperature diagnosis result with the follwing form:[ intLevel of failure severity, [vector<string>The list chain in failure] ]Where:Level of failure severityis 0(NEGLIGIBLE), 1(SERIOUS) or 2(CRITICAL).See:Diagnosis key list,Diagnosis key list.The list of device in failureis a chain name.See:Chains,Chains.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/albodytemperature-api.html#ALBodyTemperatureProxy::getTemperatureDiagnosis"
      },
      "setEnableNotifications": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enables / Disables temperature notifications. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/albodytemperature-api.html#ALBodyTemperatureProxy::setEnableNotifications__b"
      }
    },
    "ALWorldRepresentation": {
      "load": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getObjectAttributes": {
        "!type": "fn(objectName: ?) -> Promise.Prototype",
        "!doc": "Get all object attributes from an object. It takes 1 argument(s): [objectName] - objectName It returns a Promise which is either resolved with the given value (List of all attributes [[AttributeName, AttributeFields] ] where AttributeFields = \"(FieldName fieldtype, ...)\".) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getObjectAttributes__ssCR"
      },
      "getRootName": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (The name of the root object in the world representation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getRootName"
      },
      "selectWithOrder": {
        "!type": "fn(criterion: ?, orderBy: ?, categoryName: ?, attributeName: ?, fields: ?) -> Promise.Prototype",
        "!doc": "Select attributes from a category which match a given criterion and order them according to one field value. It takes 5 argument(s): [criterion] - criterion [orderBy] - orderBy [categoryName] - categoryName [attributeName] - attributeName [fields] - fields It returns a Promise which is either resolved with the given value (The attributes that match, with the following format: [Row0, Row1, ... ] where Rowi = [FieldValue0, FieldValue1, ...]. The field values are given in the order of the attribute definition when the selected fields are \"*\", or else in the order given by the fields argument. The rows are ordered according to the field value.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::selectWithOrder__ssCR.ssCR.ssCR.ssCR.ssCR"
      },
      "getObjectNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the names of all objects from the world. It returns a Promise which is either resolved with the given value (Vector of the object names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getObjectNames"
      },
      "objectCategoryExists": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Tells if an object category exists It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getPosition6D": {
        "!type": "fn(referenceName: ?, objectName: ?) -> Promise.Prototype",
        "!doc": "Get the position of an object from the world relatively to another reference object in the world (with translation and Euler angles). It takes 2 argument(s): [referenceName] - referenceName [objectName] - objectName It returns a Promise which is either resolved with the given value (Position of the object relative to the reference object. This is a 6 dimensional vector containing [x, y, z, Wx, Wy, Wz] where Wx is the rotation around the X axis etc. Will be [0, 0, 0, 0, 0, 0] if one of the two objects does not exist.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getPosition6D__ssCR.ssCR"
      },
      "getChildrenNames": {
        "!type": "fn(objectName: ?) -> Promise.Prototype",
        "!doc": "Get the objects which are direct children of the given object. It takes 1 argument(s): [objectName] - objectName It returns a Promise which is either resolved with the given value (Vector of the object names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getChildrenNames__ssCR"
      },
      "updatePositionWithReference": {
        "!type": "fn(objectName: ?, position6D: ?, storePosition: ?) -> Promise.Prototype",
        "!doc": "Update the position of an object relative to a reference object. It takes 3 argument(s): [objectName] - objectName [position6D] - position6D [storePosition] - storePosition It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::updatePositionWithReference__ssCR.ssCR.std::vector:float:CR.bCR"
      },
      "clearOldPositions": {
        "!type": "fn(objectName: ?, maxAge: ?) -> Promise.Prototype",
        "!doc": "Clear the stored positions (if relevant) of an object type which are older than a given number of seconds. It takes 2 argument(s): [objectName] - objectName [maxAge] - maxAge It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::clearOldPositions__ssCR.iCR"
      },
      "updatePosition": {
        "!type": "fn(objectName: ?, position6D: ?, storePosition: ?) -> Promise.Prototype",
        "!doc": "Update the position of an object relative to its parent. It takes 3 argument(s): [objectName] - objectName [position6D] - position6D [storePosition] - storePosition It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::updatePosition__ssCR.std::vector:float:CR.bCR"
      },
      "select": {
        "!type": "fn(criterion: ?, categoryName: ?, attributeName: ?, fields: ?) -> Promise.Prototype",
        "!doc": "Select attributes in a category which match a given criterion. It takes 4 argument(s): [criterion] - criterion [categoryName] - categoryName [attributeName] - attributeName [fields] - fields It returns a Promise which is either resolved with the given value (The attribute fields that match, with the following format: [Row0, Row1, ... ] where Rowi = [FieldValue0, FieldValue1, ...]. The field values are given in the order of the attribute definition when the selected fields are \"*\", or else in the order given by the fields argument.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::select__ssCR.ssCR.ssCR.ssCR"
      },
      "removeObjectCategory": {
        "!type": "fn(categoryName: ?) -> Promise.Prototype",
        "!doc": "Completely remove a category and all objects belonging to this category. It takes 1 argument(s): [categoryName] - categoryName It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::removeObjectCategory__ssCR"
      },
      "clearObject": {
        "!type": "fn(objectName: ?) -> Promise.Prototype",
        "!doc": "Remove an object and all its descendants from the world. It takes 1 argument(s): [objectName] - objectName It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::clearObject__ssCR"
      },
      "storeObjectWithReference": {
        "!type": "fn(objectName: ?, parentName: ?, referenceName: ?, position6D: ?, categoryName: ?, attributes: ?) -> Promise.Prototype",
        "!doc": "Store a new object in the world, giving its position relative to a reference object and attaching it to a different parent object. It takes 6 argument(s): [objectName] - objectName [parentName] - parentName [referenceName] - referenceName [position6D] - position6D [categoryName] - categoryName [attributes] - attributes It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::storeObjectWithReference__ssCR.ssCR.ssCR.std::vector:float:CR.ssCR.AL::ALValueCR"
      },
      "getObjectCategory": {
        "!type": "fn(objectName: ?) -> Promise.Prototype",
        "!doc": "Get the category of an object. It takes 1 argument(s): [objectName] - objectName It returns a Promise which is either resolved with the given value (Name of the the category (empty string if the object does not exist).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getObjectCategory__ssCR"
      },
      "findObject": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Check if an object is present. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::findObject__ssCR"
      },
      "save": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Save the graph and databases to the disk. It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::save"
      },
      "storeObject": {
        "!type": "fn(objectName: ?, parentName: ?, position6D: ?, categoryName: ?, attributes: ?) -> Promise.Prototype",
        "!doc": "Store a new object. It takes 5 argument(s): [objectName] - objectName [parentName] - parentName [position6D] - position6D [categoryName] - categoryName [attributes] - attributes It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::storeObject__ssCR.ssCR.std::vector:float:CR.ssCR.AL::ALValueCR"
      },
      "getObjectLatestAttributes": {
        "!type": "fn(objectName: ?, latestCount: ?) -> Promise.Prototype",
        "!doc": "Gets all the latest values for all attributes for a specific object. It takes 2 argument(s): [objectName] - objectName [latestCount] - latestCount It returns a Promise which is either resolved with the given value (All latests attributes value for each attribute with the following format [[AttributeName, [[field0Value, field1Value, ...]]], ]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getObjectLatestAttributes__ssCR.iCR"
      },
      "updateAttribute": {
        "!type": "fn(objectName: ?, attributeName: ?, criterion: ?, attributeFields: ?) -> Promise.Prototype",
        "!doc": "Update an attribute value of an object. It takes 4 argument(s): [objectName] - objectName [attributeName] - attributeName [criterion] - criterion [attributeFields] - attributeFields It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::updateAttribute__ssCR.ssCR.ssCR.AL::ALValueCR"
      },
      "getObjectParentName": {
        "!type": "fn(objectName: ?) -> Promise.Prototype",
        "!doc": "Get the parent object name of a given object, if applicable. It takes 1 argument(s): [objectName] - objectName It returns a Promise which is either resolved with the given value (Name of the parent object, or the object itself if it is the root.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getObjectParentName__ssCR"
      },
      "createObjectCategory": {
        "!type": "fn(category: ?, resetCategory: ?) -> Promise.Prototype",
        "!doc": "Create a new object category, with the possibility to retrieved previously stored information on the category. It takes 2 argument(s): [category] - category [resetCategory] - resetCategory It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::createObjectCategory__ssCR.bCR"
      },
      "getObjectsInCategory": {
        "!type": "fn(categoryName: ?) -> Promise.Prototype",
        "!doc": "Get all objects that belong to a given category. It takes 1 argument(s): [categoryName] - categoryName It returns a Promise which is either resolved with the given value (Vector of all object names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getObjectsInCategory__ssCR"
      },
      "getPosition": {
        "!type": "fn(referenceName: ?, objectName: ?) -> Promise.Prototype",
        "!doc": "Get the position of an object relative to another one with quaternion and translation. It takes 2 argument(s): [referenceName] - referenceName [objectName] - objectName It returns a Promise which is either resolved with the given value ([quaternion, translation] where quaternion = [w, x, y, z] and translation = [x, y, z]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getPosition__ssCR.ssCR"
      },
      "getObjectAttributeValues": {
        "!type": "fn(objectName: ?, attributeName: ?, latestCount: ?) -> Promise.Prototype",
        "!doc": "Gets the latest values of a given attributes for a specific object. It takes 3 argument(s): [objectName] - objectName [attributeName] - attributeName [latestCount] - latestCount It returns a Promise which is either resolved with the given value (All latests attribute values for the given attribute, with the following format [field0Value, field1Value, ...] following the attributes fields. Empty if the attribute or the object do not exist.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getObjectAttributeValues__ssCR.ssCR.iCR"
      },
      "getPosition6DAtTime": {
        "!type": "fn(referenceName: ?, objectName: ?, secondsAgo: ?, interType: ?) -> Promise.Prototype",
        "!doc": "Position of the object relative to the reference object. This is a 6 dimensional vector containing [x, y, z, Wx, Wy, Wz] where Wx is the rotation around the X axis etc. Will be [0, 0, 0, 0, 0, 0] if one of the two objects does not exist. It takes 4 argument(s): [referenceName] - referenceName [objectName] - objectName [secondsAgo] - secondsAgo [interType] - interType It returns a Promise which is either resolved with the given value (Position of the object relative to the reference object. This is a 6 dimensional vector containing [x, y, z, Wx, Wy, Wz] where Wx is the rotation around the X axis etc. Will be [0, 0, 0, 0, 0, 0] if one of the two objects does not exist.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::getPosition6DAtTime__ssCR.ssCR.iCR.iCR"
      },
      "storeObjectAttribute": {
        "!type": "fn(objectName: ?, attributeName: ?, attributeFields: ?) -> Promise.Prototype",
        "!doc": "Store a new attribute value of an object. It takes 3 argument(s): [objectName] - objectName [attributeName] - attributeName [attributeFields] - attributeFields It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::storeObjectAttribute__ssCR.ssCR.AL::ALValueCR"
      },
      "deleteObjectAttribute": {
        "!type": "fn(objectName: ?, attributeName: ?, criterion: ?) -> Promise.Prototype",
        "!doc": "Delete object attributes according to a given criterion (for example, with criterion=\"LastSeen>42 OR Size < 1\"). It takes 3 argument(s): [objectName] - objectName [attributeName] - attributeName [criterion] - criterion It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::deleteObjectAttribute__ssCR.ssCR.ssCR"
      },
      "addAttributeToCategory": {
        "!type": "fn(categoryName: ?, attributeName: ?, fields: ?) -> Promise.Prototype",
        "!doc": "Add a new attribute to an existing category. The new category is added to the attribute with the specified fields. Each attribute is unique. It takes 3 argument(s): [categoryName] - categoryName [attributeName] - attributeName [fields] - fields It returns a Promise which is either resolved with the given value (0 if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/worldrepresentation-api.html#ALWorldRepresentationProxy::addAttributeToCategory__ssCR.ssCR.AL::ALValueCR"
      },
      "getAttributesFromCategory": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get all attributes from a category if it exists. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALAutonomousLife": {
      "getAutonomousAbilitiesStatus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the status of all the autonomous abilities. It returns a Promise which is either resolved with the given value (A vector of AutonomousAbilityStatus containing the autonomous ability name, a boolean to know if the autonomous ability is enabled or not and another boolean to know if the autonomous ability is currently running or not.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getAutonomousAbilitiesStatus"
      },
      "getFocusHistory": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "There are two overloads of this function. It is recommended to specify maximum depth to prevent large ALValues from being transmitted. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getFocusHistory"
      },
      "getEnabledLaunchpadPlugins": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get a list of enabled AutonomousLaunchpad Plugins. Enabled plugins will run when AutonomousLaunchpad is started It returns a Promise which is either resolved with the given value (A list of strings of enabled plugins.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActivityStatistics": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets focus count, last focused time, etc for each activity. It returns a Promise which is either resolved with the given value (A map of activity names, with a corresponding map of \"prevFocusTime\", \"prevUnfocusTime\", \"focusCount\", \"totalDuration\". Times are 0 for unlaunched Activities.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getActivityStatistics"
      },
      "setSafeguardEnabled": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Sets if a given safeguard will be handled by Autonomous Life or not. Default for all safeguards is true. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::setSafeguardEnabled__ssCR.bCR"
      },
      "startMonitoringLaunchpadConditions": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Start monitoring ALMemory and reporting conditional triggers with AutonomousLaunchpad. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActivityContextPermissionViolations": {
        "!type": "fn(activity_name: ?) -> Promise.Prototype",
        "!doc": "Gets a list of permissions that would be violated by a given activity in the current context. It takes 1 argument(s): [activity_name] - activity_name It returns a Promise which is either resolved with the given value (An array of strings of the violated permissions.\"nature\": If the activity is solitary but Autonomous Life is in interactive state.\"canRunOnPod\": If the robot is currently on the Charging Station, but the activity does not claim that it can be started on the Charging Station in its properties.\"canRunInSleep\": If the robot is currently asleep, the activity cannot be started.\"error\": If the passed activity name is not actually an activity.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getActivityContextPermissionViolations__ssCR"
      },
      "stopAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "This will stop the focused activity. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::stopAll"
      },
      "setState": {
        "!type": "fn(state: ?) -> Promise.Prototype",
        "!doc": "Lets the developer manually set limited state changes in AutonomousLife. For futher details, see:States. It takes 1 argument(s): [state] - state It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::setState__ssCR"
      },
      "isSafeguardEnabled": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Checks if a given safeguard will be handled by Autonomous Life or not. Default for all safeguards is true. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (A bool, true if Autonomous Life handles the safeguard.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::isSafeguardEnabled__ssCR"
      },
      "getAutonomousActivityStatistics": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets focus count, last focused time, etc just for each autonomous activity. This returns a subset of whatALAutonomousLifeProxy::getActivityStatisticsreturns. An autonomous activity is one that has launch trigger conditions. It returns a Promise which is either resolved with the given value (A map of activity names, with a corresponding map of \"prevFocusTime\", \"prevUnfocusTime\", \"focusCount\", \"totalDuration\". Times are 0 for unlaunched Activities.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getAutonomousActivityStatistics"
      },
      "getAutonomousAbilityEnabled": {
        "!type": "fn(autonomous_ability: ?) -> Promise.Prototype",
        "!doc": "Returns whether an autonomous ability is enabled. It takes 1 argument(s): [autonomous_ability] - autonomous_ability It returns a Promise which is either resolved with the given value (True if enabled, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getAutonomousAbilityEnabled__ssCR"
      },
      "switchFocus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::switchFocus"
      },
      "setLaunchpadPluginEnabled": {
        "!type": "fn(plugin_name: ?, enabled: ?) -> Promise.Prototype",
        "!doc": "Temporarily enables/disables AutonomousLaunchpad Plugins It takes 2 argument(s): [plugin_name] - The name of the plugin to enable/disable [enabled] - Whether or not to enable this plugin It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getRobotOffsetFromFloor": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Retrieves the current offset of the robot from the floor. It returns a Promise which is either resolved with the given value (A float value in meters.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getRobotOffsetFromFloor"
      },
      "setAutonomousAbilityEnabled": {
        "!type": "fn(autonomous_ability: ?, enabled: ?) -> Promise.Prototype",
        "!doc": "Enables or disables a specific autonomous ability or all of them. It takes 2 argument(s): [autonomous_ability] - autonomous_ability [enabled] - enabled It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::setAutonomousAbilityEnabled__ssCR.b"
      },
      "getState": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Retrieves the current state of AutonomousLife. It returns a Promise which is either resolved with the given value (Can be one of theStates.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getState"
      },
      "getLifeTime": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the time in seconds as life sees it. Based on gettimeofday(). It returns a Promise which is either resolved with the given value (The int time in seconds as Autonomous Life sees it.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getLifeTime"
      },
      "getActivityNature": {
        "!type": "fn(activity_name: ?) -> Promise.Prototype",
        "!doc": "Tells you if an activity has \"interactive\" or \"solitary\" nature. It takes 1 argument(s): [activity_name] - activity_name It returns a Promise which is either resolved with the given value (\"interactive\" or \"solitary\") or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getActivityNature__ssCR"
      },
      "getStateHistory": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "There are two overloads of this function. It is recommended to specify maximum depth to prevent large ALValues from being transmitted. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getStateHistory"
      },
      "stopMonitoringLaunchpadConditions": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stop monitoring ALMemory and reporting conditional triggers with AutonomousLaunchpad. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getLaunchpadPluginsForGroup": {
        "!type": "fn(group: ?) -> Promise.Prototype",
        "!doc": "Get a list of AutonomousLaunchpad Plugins that belong to specified group It takes 1 argument(s): [group] - The group to search for the plugins It returns a Promise which is either resolved with the given value (A list of strings of the plugins belonging to the group.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isMonitoringLaunchpadConditions": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets running status of AutonomousLaunchpad It returns a Promise which is either resolved with the given value (True if AutonomousLaunchpad is monitoring ALMemory and reporting conditional triggers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFocusContext": {
        "!type": "fn(key_name: ?) -> Promise.Prototype",
        "!doc": "Gets a value of an ALMemory key that is used in an activity launch trigger condition. The returned value will reflect the value at the time of the most recent autonomous activity focus. Use this to understand why an activity was started autonomously. Times based ongetLifeTime() It takes 1 argument(s): [key_name] - key_name It returns a Promise which is either resolved with the given value (A list of the timestamp of when it was set and the ALValue of the memory key: [seconds, microseconds, value]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::getFocusContext__ssCR"
      },
      "focusedActivity": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Retrieves the current focused activity. It returns a Promise which is either resolved with the given value (The name of the focused activity. Is an empty string (\"\") if no activity is focused.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::focusedActivity"
      },
      "stopFocus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "This will stop the focused activity. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::stopFocus"
      },
      "setRobotOffsetFromFloor": {
        "!type": "fn(offset: ?) -> Promise.Prototype",
        "!doc": "Allows you to set if the robot is on the floor, or higher up such as on a table. It takes 1 argument(s): [offset] - offset It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomouslife-api.html#ALAutonomousLifeProxy::setRobotOffsetFromFloor__floatCR"
      }
    },
    "ALListeningMovement": {
      "setEnabled": {
        "!type": "fn(enabled: ?) -> Promise.Prototype",
        "!doc": "Enables or disables the listening movements. It takes 1 argument(s): [enabled] - enabled It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/allisteningmovement-api.html#ALListeningMovementProxy::setEnabled__bCR"
      },
      "isEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether the listening movements are enabled. It returns a Promise which is either resolved with the given value (True if the listening movements are enabled, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/allisteningmovement-api.html#ALListeningMovementProxy::isEnabled"
      },
      "isRunning": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether the listening movements are running. It returns a Promise which is either resolved with the given value (True if the listening movements are running, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/allisteningmovement-api.html#ALListeningMovementProxy::isRunning"
      }
    },
    "DCM": {
      "set": {
        "!type": "fn(request: ?) -> Promise.Prototype",
        "!doc": "Sends to the DCM buffer a simple request containing a list of timed commands to apply to an Actuator or an Alias. It takes 1 argument(s): [request] - request It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/dcm-api.html#DCMProxy::set__AL::ALValueCR"
      },
      "preferences": {
        "!type": "fn(action: ?, target: ?, keyName: ?, keyValue: ?) -> Promise.Prototype",
        "!doc": "Save updated value from DCM in XML pref file It takes 4 argument(s): [action] - string : 'Save' 'Load' 'Add' [target] - string : 'Chest' 'Head' 'Main' 'All' [keyName] - The name of the key if action = 'Add'. [keyValue] - The ALVAlue of the key to add It returns a Promise which is either resolved with the given value (Nothing) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "calibration": {
        "!type": "fn(calibrationInput: ?) -> Promise.Prototype",
        "!doc": "Calibration of a joint It takes 1 argument(s): [calibrationInput] - A complex ALValue. See red documentation It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getTime": {
        "!type": "fn(offset: ?) -> Promise.Prototype",
        "!doc": "Returns the absolute time used for all timed command in the DCM, with a number of milliseconds (ms) to add or remove to this time. It takes 1 argument(s): [offset] - offset It returns a Promise which is either resolved with the given value (An integer (signed), with 1 ms precision. Be careful: it can roll-over.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/dcm-api.html#DCMProxy::getTime__iCR"
      },
      "getPrefix": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the prefix name for all devices and subDevices (Actuators and Sensors). It returns a Promise which is either resolved with the given value (an array with strings: \"Device/SubDeviceList/\" and \"Device/DeviceList/\") or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/dcm-api.html#DCMProxy::getPrefix"
      },
      "createAlias": {
        "!type": "fn(alias: ?) -> Promise.Prototype",
        "!doc": "Creates an Alias or updates its content. It takes 1 argument(s): [alias] - alias It returns a Promise which is either resolved with the given value (a validated copy of the input parameter.You can use this return to know if one or more Actuator name(s) are wrong.Validation process: if an Actuator name is not found, its name is replaced by a an empty string \"\".) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/dcm-api.html#DCMProxy::createAlias__AL::ALValueCR"
      },
      "setAlias": {
        "!type": "fn(request: ?) -> Promise.Prototype",
        "!doc": "Sends into the DCM buffer a complex request containing several lists of timed commands. Each list is applied to one Actuator, member of an Alias. It takes 1 argument(s): [request] - request It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/dcm-api.html#DCMProxy::setAlias__AL::ALValueCR"
      },
      "special": {
        "!type": "fn(result: ?) -> Promise.Prototype",
        "!doc": "Special DCM commands It takes 1 argument(s): [result] - one string and could be Reset, Version, Chain, Diagnostic, Config It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALMood": {
      "currentPersonState": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the emotional state of the current focused user through a PersonState struct. It returns a Promise which is either resolved with the given value (A struct containing the values of each emotional descriptor of a person.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almood-api.html#ALMood::currentPersonState"
      },
      "ambianceState": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the state of the ambient environement through a AmbianceState struct. It returns a Promise which is either resolved with the given value (A struct containing the values of each emotional descriptor of an ambiance.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almood-api.html#ALMood::ambianceState"
      },
      "persons": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get a list containing all the person present in the memory of the module through a Person struct. It returns a Promise which is either resolved with the given value (A struct containing the persons detected by ALMood with their ID and emotional state.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almood-api.html#ALMood::persons"
      },
      "personStateFromPeoplePerception": {
        "!type": "fn(ID: ?) -> Promise.Prototype",
        "!doc": "Get the emotional state of the user with the identifierIDfrom PeoplePerception through a PersonState struct. It takes 1 argument(s): [ID] - ID It returns a Promise which is either resolved with the given value (A struct containing the values of each emotional descriptor of a person. See above.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almood-api.html#ALMood::personStateFromPeoplePerception__unsigned-i"
      },
      "personStateFromUserSession": {
        "!type": "fn(ID: ?) -> Promise.Prototype",
        "!doc": "Get the emotional state of the user with the identifierIDfrom UserSession through a PersonState struct. It takes 1 argument(s): [ID] - ID It returns a Promise which is either resolved with the given value (A struct containing the values of each emotional descriptor of a person. See above.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almood-api.html#ALMood::personStateFromUserSession__unsigned-i"
      },
      "getEmotionalReaction": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the emotional reaction of the focused user. It returns a Promise which is either resolved with the given value (The detected reaction.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/almood-api.html#ALMood::getEmotionalReaction"
      }
    },
    "ALNavigation": {
      "navigateTo": {
        "!type": "fn(x: ?, y: ?) -> Promise.Prototype",
        "!doc": "Makes the robot navigate to a relative metrical target pose2D expressed in FRAME_ROBOT. The robot computes a path to avoid obstacles. It takes 2 argument(s): [x] - x [y] - y It returns a Promise which is either resolved with the given value (Trueif the robot reached its target at the end orFalseif it has been stopped by obstacles or if it cannot find a path to the target.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alnavigation-api.html#ALNavigationProxy::navigateTo__floatCR.floatCR"
      },
      "relocalizeInMap": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopLocalization": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "loadExploration": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "saveExploration": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopNavigateTo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stops the navigateTo. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "startFreeZoneUpdate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Starts a loop to update the mapping of the free space around the robot. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFreeZone": {
        "!type": "fn(desiredRadius: ?, displacementConstraint: ?) -> Promise.Prototype",
        "!doc": "Returns the current free zone around the robot. Does not make the robot move. It takes 2 argument(s): [desiredRadius] - desiredRadius [displacementConstraint] - displacementConstraint It returns a Promise which is either resolved with the given value (an ALValue [Free Zone Error Code, result radius (meters), [worldMotionToRobotCenterX (meters), worldMotionToRobotCenterY (meters)]]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alnavigation-api.html#ALNavigationProxy::getFreeZone__float.float"
      },
      "navigateToInMap": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "explore": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Start exploration. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getRobotPositionInMap": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "findFreeZone": {
        "!type": "fn(desiredRadius: ?, displacementConstraint: ?) -> Promise.Prototype",
        "!doc": "Looks for a free circular zone of a specified radius not farer than a specified displacement. To do this the robot moves and looks around itself. This is a blocking call. It takes 2 argument(s): [desiredRadius] - desiredRadius [displacementConstraint] - displacementConstraint It returns a Promise which is either resolved with the given value (a cancelable qi::Future<ALValue> [Free Zone Error Code, result radius (meters), [worldMotionToRobotCenterX (meters), worldMotionToRobotCenterY (meters)]]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alnavigation-api.html#ALNavigationProxy::findFreeZone__float.float"
      },
      "stopAndComputeFreeZone": {
        "!type": "fn(desiredRadius: ?, maximumDisplacement: ?) -> Promise.Prototype",
        "!doc": "Stops and returns free zone. It takes 2 argument(s): [desiredRadius] - The radius of the space we want in meters [m]. [maximumDisplacement] - The max distance we accept to move toreach the found place [m]. It returns a Promise which is either resolved with the given value (Returns [errorCode, result radius (m), [worldMotionToRobotCenterX (m), worldMotionToRobotCenterY (m)]]) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopExploration": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stop exploration. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "moveAlong": {
        "!type": "fn(trajectory: ?) -> Promise.Prototype",
        "!doc": "An ALValue describing either a direct trajectory [\"Holonomic\", pathXY, finalTheta, finalTime], or a composed trajectory [\"Composed\", direct trajectories]. It takes 1 argument(s): [trajectory] - trajectory It returns a Promise which is either resolved with the given value (Truewhen the robot executed the trajectory completely, and also when it has been definitely stopped by obstacles.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alnavigation-api.html#ALNavigationProxy::moveAlong__AL::ALValueCR"
      },
      "getExplorationPath": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "startLocalization": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMetricalMap": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALFaceCharacteristics": {
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSmilingThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current smiling threshold value above which the eventFaceCharacteristics/PersonSmiling()is raised. It returns a Promise which is either resolved with the given value (threshold value between 0 and 1 (default = 0.7).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacecharacteristics-api.html#ALFaceCharacteristicsProxy::getSmilingThreshold"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "analyzeFaceCharacteristics": {
        "!type": "fn(id: ?) -> Promise.Prototype",
        "!doc": "Performs the face analysis on a given person using the ID. This method can be called even ifALFaceCharacteristicsis not running in order to update the ALMemory data of this person only. It takes 1 argument(s): [id] - id It returns a Promise which is either resolved with the given value (true if the analysis succeeded and false if something went wrong or if the ID is invalid.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacecharacteristics-api.html#ALFaceCharacteristicsProxy::analyzeFaceCharacteristics__i"
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setSmilingThreshold": {
        "!type": "fn(threshold: ?) -> Promise.Prototype",
        "!doc": "Sets the current smiling threshold value. It takes 1 argument(s): [threshold] - threshold It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alfacecharacteristics-api.html#ALFaceCharacteristicsProxy::setSmilingThreshold__float"
      }
    },
    "ALUserInfo": {
      "set": {
        "!type": "fn(domain: ?, int: ?, dataName: ?, value: ?) -> Promise.Prototype",
        "!doc": "Warning It takes 4 argument(s): [domain] - domain [int] - int [dataName] - dataName [value] - value It returns a Promise which is either resolved with the given value (true if the data has successfully been set.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/aluserinfo-api.html#ALUserInfo::set__ssCR.ssCR"
      },
      "get": {
        "!type": "fn(dataName: ?) -> Promise.Prototype",
        "!doc": "There are four overloads of this functions: It takes 1 argument(s): [dataName] - dataName It returns a Promise which is either resolved with the given value (the value of the data) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/aluserinfo-api.html#ALUserInfo::get__ssCR"
      },
      "getType": {
        "!type": "fn(domain: ?, dataName: ?) -> Promise.Prototype",
        "!doc": "Gets the type (string, int or bool) of the data in the given domain. It takes 2 argument(s): [domain] - domain [dataName] - dataName It returns a Promise which is either resolved with the given value (type of the data) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/aluserinfo-api.html#ALUserInfo::getType__ssCR.ssCR"
      },
      "remove": {
        "!type": "fn(dataName: ?) -> Promise.Prototype",
        "!doc": "There are four overloads of this functions: It takes 1 argument(s): [dataName] - dataName It returns a Promise which is either resolved with the given value (true if the data has been successfully removed) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/aluserinfo-api.html#ALUserInfo::remove__ssCR.ssCR"
      },
      "removeUser": {
        "!type": "fn(domain: ?) -> Promise.Prototype",
        "!doc": "There are four overloads of this functions: It takes 1 argument(s): [domain] - domain It returns a Promise which is either resolved with the given value (true if the data has been successfully removed) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/aluserinfo-api.html#ALUserInfo::removeUser__ssCR"
      },
      "has": {
        "!type": "fn(dataName: ?) -> Promise.Prototype",
        "!doc": "There are four overloads of this functions: It takes 1 argument(s): [dataName] - dataName It returns a Promise which is either resolved with the given value (true if the data has a value) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/aluserinfo-api.html#ALUserInfo::has__ssCRC"
      }
    },
    "ALVideoDevice": {
      "startCamera": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Starts the video capture of the specified video device. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::startCamera__iCR"
      },
      "setParam": {
        "!type": "fn(param: ?, newValue: ?) -> Promise.Prototype",
        "!doc": "Sets the value of a specific parameter for the video source. It takes 2 argument(s): [param] - Camera parameter requested. [newValue] - value requested. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "startFrameGrabber": {
        "!type": "fn(cameraIndex: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [cameraIndex] - Camera requested. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "putImage": {
        "!type": "fn(CameraIndex: ?, Width: ?, Height: ?, ImageBuffer: ?) -> Promise.Prototype",
        "!doc": "Loads Image into kernel circular buffer. Simulates acquisition of a new image by the virtual camera. It takes 4 argument(s): [CameraIndex] - CameraIndex [Width] - Width [Height] - Height [ImageBuffer] - ImageBuffer It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::putImage__iCR.iCR.iCR.AL::ALValueCR"
      },
      "getDirectRawImageRemote": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest image from the video source and send the data coming directly from the raw buffer as an ALValue through the network (no format conversion). It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Container ofimage.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getDirectRawImageRemote__ssCR"
      },
      "getHorizontalFOV": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Gets the camera horizontal field of view for the specified camera. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (Horizontal field of view of the camera (in radian).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getHorizontalFOV__iCR"
      },
      "getParameterList": {
        "!type": "fn(cameraIndex: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [cameraIndex] - Camera requested. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribeCamera": {
        "!type": "fn(Name: ?, CameraIndex: ?, Resolution: ?, ColorSpace: ?, Fps: ?) -> Promise.Prototype",
        "!doc": "Subscribes to ALVideoDevice. When a Video Module registers to ALVideoDevice, a buffer of the requested image format is added to the buffers list. Returns an handle which identifies the module in ALVideoDevice. (This handle is based on the name parameter,e.g. the 3rd one getting _3 added to its name for instance to build this handle). It takes 5 argument(s): [Name] - Name [CameraIndex] - CameraIndex [Resolution] - Resolution [ColorSpace] - ColorSpace [Fps] - Fps It returns a Promise which is either resolved with the given value (String handle under which the module is known from ALVideoDevice, empty string if error occurred.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::subscribeCamera__ssCR.iCR.iCR.iCR.iCR"
      },
      "getVerticalFOV": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Gets the camera vertical field of view for the specified camera. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (Vertical field of view of the camera (in radian).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getVerticalFOV__iCR"
      },
      "openCamera": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Opens and initializes the video source device. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::openCamera__iCR"
      },
      "setCameraParameter": {
        "!type": "fn(Handle: ?, Id: ?, NewValue: ?) -> Promise.Prototype",
        "!doc": "Sets the value of a specific parameter for the module current active camera. It takes 3 argument(s): [Handle] - Handle [Id] - Id [NewValue] - NewValue It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setCameraParameter__ssCR.iCR.iCR"
      },
      "setParameter": {
        "!type": "fn(CameraIndex: ?, parameter: ?, newValue: ?) -> Promise.Prototype",
        "!doc": "Modifies camera internal parameter. It takes 3 argument(s): [CameraIndex] - CameraIndex [parameter] - parameter [newValue] - newValue It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setParameter__iCR.iCR.iCR"
      },
      "isFrameGrabberOff": {
        "!type": "fn(cameraIndex: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [cameraIndex] - Camera requested. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getImagesRemote": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest images from the video source, applies eventual transformations to the images to provide the format requested by the vision module and send it as an ALValue through the network. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Container ofimages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImagesRemote__ssCR"
      },
      "hasDepthCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Asks if a depth camera was detected by ALVideoDevice. If present, a depth camera can be accessed with the indexkDepthCamera. It returns a Promise which is either resolved with the given value (true if a depth camera is present, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::hasDepthCamera"
      },
      "getImageRemote": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest image from the video source, applies eventual transformations to the image to provide the format requested by the vision module and send it as an ALValue through the network. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Container ofimage.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImageRemote__ssCR"
      },
      "isCameraStarted": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Detects if the video device is running (i.e. capture images). It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::isCameraStarted__iCR"
      },
      "unsubscribeAllInstances": {
        "!type": "fn(id: ?) -> Promise.Prototype",
        "!doc": "Used to unsubscribe all instances for a given G.V.M. (e.g. VisionModule and VisionModule_5) from ALVideoDevice. It takes 1 argument(s): [id] - Root name of the G.V.M. (e.g. with the example above this will be VisionModule). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopCamera": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Stops the video capture of the specified video device. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::stopCamera__iCR"
      },
      "getCameraParameterInfo": {
        "!type": "fn(name: ?, parameterId: ?) -> Promise.Prototype",
        "!doc": "It takes 2 argument(s): [name] - Name of the subscribing vision module [parameterId] - Camera parameter requested. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(Handle: ?, Fps: ?) -> Promise.Prototype",
        "!doc": "Changes the framerate requested to the video source by the subscribed module. It takes 2 argument(s): [Handle] - Handle [Fps] - Fps It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setFrameRate__ssCR.iCR"
      },
      "closeCamera": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Closes the video source device, releasing resources. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::closeCamera__iCR"
      },
      "getResolutions": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Gets the current resolutions requested for the specified module. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Array of resolutions (seeSupported resolutions).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getResolutions__ssCR"
      },
      "setColorSpace": {
        "!type": "fn(Handle: ?, ColorSpace: ?) -> Promise.Prototype",
        "!doc": "Sets the current color space requested for the specified module. It takes 2 argument(s): [Handle] - Handle [ColorSpace] - ColorSpace It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setColorSpace__ssCR.iCR"
      },
      "getParameter": {
        "!type": "fn(CameraIndex: ?, parameter: ?) -> Promise.Prototype",
        "!doc": "Gets camera internal parameter. It takes 2 argument(s): [CameraIndex] - CameraIndex [parameter] - parameter It returns a Promise which is either resolved with the given value (Value of the camera parameter.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getParameter__iCR.iCR"
      },
      "getCameraIndexes": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets list of available camera indexes. It returns a Promise which is either resolved with the given value (Array of camera index (seeCamera Indexes).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getCameraIndexes"
      },
      "getCamerasParameter": {
        "!type": "fn(Handle: ?, Id: ?) -> Promise.Prototype",
        "!doc": "Gets a camera's parameter from the module current active cameras. This method will probe for value of the current active camera of the module. It takes 2 argument(s): [Handle] - Handle [Id] - Id It returns a Promise which is either resolved with the given value (Parameter's values.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getCamerasParameter__ssCR.iCR"
      },
      "recordVideo": {
        "!type": "fn(id: ?, path: ?, totalNumber: ?, period: ?) -> Promise.Prototype",
        "!doc": "Background record of an .arv raw format video from the images processed by a vision module Actualy it take picture each time the vision module call getDirectRawImageRemote(). It takes 4 argument(s): [id] - Name under which the G.V.M. is known from the V.I.M. [path] - path/name of the video to be recorded [totalNumber] - number of images to be recorded. 0xFFFFFFFF for \"unlimited\" [period] - one image recorded every pPeriod images It returns a Promise which is either resolved with the given value (true if success) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopFrameGrabber": {
        "!type": "fn(cameraIndex: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [cameraIndex] - Camera requested. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setCamerasParameterToDefault": {
        "!type": "fn(Handle: ?, Id: ?) -> Promise.Prototype",
        "!doc": "Sets a camera's parameter to its default value. It takes 2 argument(s): [Handle] - Handle [Id] - Id It returns a Promise which is either resolved with the given value (Array of booleans with true if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setCamerasParameterToDefault__ssCR.iCR"
      },
      "getDirectRawImagesRemote": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest images from the video source and send the data coming directly from the raw buffer as an ALValue through the network (no format conversion). It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Container ofimages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getDirectRawImagesRemote__ssCR"
      },
      "getDirectRawImageLocal": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest image from the video source and returns a pointer to the lockedAL::ALImage, with data array pointing directly to raw data. There is no format conversion and no copy of the raw buffer. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Pointer to the lockedAL::ALImagebuffer, NULL if error.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getDirectRawImageLocal__ssCR"
      },
      "setActiveCameras": {
        "!type": "fn(Handle: ?, ActiveCameras: ?) -> Promise.Prototype",
        "!doc": "Sets the current active cameras for the specified module. It takes 2 argument(s): [Handle] - Handle [ActiveCameras] - ActiveCameras It returns a Promise which is either resolved with the given value (Array of booleans with true if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setActiveCameras__ssCR.AL::ALValueCR"
      },
      "setResolutions": {
        "!type": "fn(Handle: ?, Resolution: ?) -> Promise.Prototype",
        "!doc": "Sets the size of the output image for the specified module. It takes 2 argument(s): [Handle] - Handle [Resolution] - Resolution It returns a Promise which is either resolved with the given value (Array of booleans with true if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setResolutions__ssCR.AL::ALValueCR"
      },
      "setActiveCamera": {
        "!type": "fn(ActiveCamera: ?) -> Promise.Prototype",
        "!doc": "Sets the current default active camera for the system. It takes 1 argument(s): [ActiveCamera] - ActiveCamera It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setActiveCamera__iCR"
      },
      "getParameterInfo": {
        "!type": "fn(cameraIndex: ?, parameterId: ?) -> Promise.Prototype",
        "!doc": "It takes 2 argument(s): [cameraIndex] - Camera requested. [parameterId] - Camera parameter requested. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopVideo": {
        "!type": "fn(id: ?) -> Promise.Prototype",
        "!doc": "Stop writing the video sequence It takes 1 argument(s): [id] - Name under which the G.V.M. is known from ALVideoDevice. It returns a Promise which is either resolved with the given value (true if success) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "releaseDirectRawImage": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Release image buffer locked by getDirectRawImageLocal(). If the module has no locked image buffer, does nothing. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (true if success) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::releaseDirectRawImage__ssCR"
      },
      "setSimCamInputSize": {
        "!type": "fn(width: ?, height: ?) -> Promise.Prototype",
        "!doc": "Called by the simulator to know expected image parameters It takes 2 argument(s): [width] - int width of image among 1280, 640, 320, 240, 120, 60 [height] - int height of image among 960, 480, 240, 160, 80, 40 It returns a Promise which is either resolved with the given value (true if setSize worked) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getImageInfoFromAngularInfo": {
        "!type": "fn(CameraIndex: ?, AngularInfo: ?) -> Promise.Prototype",
        "!doc": "Returns [X, Y, width, height] normalized info in the image from these info expressed as angles in radians (as returned by vision extractors). It takes 2 argument(s): [CameraIndex] - CameraIndex [AngularInfo] - AngularInfo It returns a Promise which is either resolved with the given value (corresponding normalized position and size info: [X, Y, width, height].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImageInfoFromAngularInfo__iCR.std::vector:float:CR"
      },
      "getImagePositionFromAngularPosition": {
        "!type": "fn(CameraIndex: ?, AngularPosition: ?) -> Promise.Prototype",
        "!doc": "Returns a normalized position in the image from a position expressed with camera angles in radians. It takes 2 argument(s): [CameraIndex] - CameraIndex [AngularPosition] - AngularPosition It returns a Promise which is either resolved with the given value (corresponding normalized position in the image [0.0 - 1.0] (vector of size 2).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImagePositionFromAngularPosition__iCR.std::vector:float:CR"
      },
      "isCameraSimulated": {
        "!type": "fn(cameraIndex: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [cameraIndex] - Camera requested. It returns a Promise which is either resolved with the given value ( True: Camera is simulated - False: Camera is real) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getImagesLocal": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest images from the video source, applies eventual transformations to the images to provide the format requested by the vision module and returns pointers to lockedAL::ALImage. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Array of pointers to lockedAL::ALImagebuffers, NULL if error (e.g. if the previous images was not released).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImagesLocal__ssCR"
      },
      "getDirectRawImagesLocal": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest images from the video source and returns pointers to the lockedAL::ALImage, with data array pointing directly to raw data. There is no format conversion and no copy of the raw buffer. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Array of pointers to the lockedAL::ALImagebuffer, NULL if error.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getDirectRawImagesLocal__ssCR"
      },
      "releaseImages": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Release image buffers locked by getImagesLocal(). If module had no locked image buffers, does nothing. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Array of booleans with true if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::releaseImages__ssCR"
      },
      "onClientDisconnected": {
        "!type": "fn(eventName: ?, eventContents: ?, message: ?) -> Promise.Prototype",
        "!doc": "Callback when client is disconnected It takes 3 argument(s): [eventName] - The echoed event name [eventContents] - The name of the client that has disconnected [message] - The message give when subscribing. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCameraParameter": {
        "!type": "fn(Handle: ?, Id: ?) -> Promise.Prototype",
        "!doc": "Gets a camera's parameter from the module current active camera. This method will probe for value of the current active camera of the module. It takes 2 argument(s): [Handle] - Handle [Id] - Id It returns a Promise which is either resolved with the given value (Parameter's value.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getCameraParameter__ssCR.iCR"
      },
      "getCameraModel": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Gets the camera model of the specified camera. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (Camera model.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getCameraModel__iCR"
      },
      "setCameraParameterToDefault": {
        "!type": "fn(Handle: ?, Id: ?) -> Promise.Prototype",
        "!doc": "Sets a camera's parameter to its default value. It takes 2 argument(s): [Handle] - Handle [Id] - Id It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setCameraParameterToDefault__ssCR.iCR"
      },
      "getParameterRange": {
        "!type": "fn(CameraIndex: ?, Id: ?) -> Promise.Prototype",
        "!doc": "Gets the range of a camera's parameter. It takes 2 argument(s): [CameraIndex] - CameraIndex [Id] - Id It returns a Promise which is either resolved with the given value (An ALValue containing the minimum and maximum value for the requested parameter.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getParameterRange__iCR.iCR"
      },
      "setCamerasParameter": {
        "!type": "fn(Handle: ?, Id: ?, NewValue: ?) -> Promise.Prototype",
        "!doc": "Sets the values of a specific parameter for the module current active cameras. It takes 3 argument(s): [Handle] - Handle [Id] - Id [NewValue] - NewValue It returns a Promise which is either resolved with the given value (Array of booleans with true if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setCamerasParameter__ssCR.iCR.AL::ALValueCR"
      },
      "setResolution": {
        "!type": "fn(Handle: ?, Resolution: ?) -> Promise.Prototype",
        "!doc": "Sets the size of the output image for the specified module. It takes 2 argument(s): [Handle] - Handle [Resolution] - Resolution It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setResolution__ssCR.iCR"
      },
      "subscribe": {
        "!type": "fn(gvmName: ?, resolution: ?, colorSpace: ?, fps: ?) -> Promise.Prototype",
        "!doc": "Register to ALVideoDevice (formerly Video Input Module/V.I.M.). When a General Video Module(G.V.M.) registers to ALVideoDevice, a buffer of the requested image format is added to the buffers list. Returns the name under which the G.V.M. is registered to ALVideoDevice (useful when two G.V.M. try to register using the same name It takes 4 argument(s): [gvmName] - Name of the subscribing G.V.M. [resolution] - Resolution requested. {0: kQQVGA, 1: kQVGA, 2: kVGA} [colorSpace] - Colorspace requested. {0: kYuv, 9: kYUV422, 10: kYUV, 11: kRGB, 12: kHSY, 13: kBGR} [fps] - Fps (frames per second) requested. {5, 10, 15, 30} It returns a Promise which is either resolved with the given value (Name under which the G.V.M. is known from ALVideoDevice, 0 if failed.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getExpectedImageParameters": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Called by the simulator to know expected image parameters It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (ALValue of expected parameters: [int height, int width, int framerate]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getExpectedImageParameters__iCR"
      },
      "setColorSpaces": {
        "!type": "fn(Handle: ?, ColorSpaces: ?) -> Promise.Prototype",
        "!doc": "Sets the current color spaces requested for the specified module. It takes 2 argument(s): [Handle] - Handle [ColorSpaces] - ColorSpaces It returns a Promise which is either resolved with the given value (Array of booleans with true if success) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setColorSpaces__ssCR.AL::ALValueCR"
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the index of the current default active camera. It returns a Promise which is either resolved with the given value (Camera Indexes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getActiveCamera"
      },
      "getCameraParameterList": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [name] - Name of the subscribing vision module It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "resetCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFrameRate": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Gets the internal frame rate of the video source. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (video source framerate. -1: can't access video source.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getFrameRate__iCR"
      },
      "getSubscribers": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets a list containing all the handle name of the subscribers. It returns a Promise which is either resolved with the given value (Array of string containing the subscriber names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getSubscribers"
      },
      "getColorSpace": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Get the color space of the video source before eventual conversion. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (Supported colorspacesor -1: can't access video source.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getColorSpace__iCR"
      },
      "getAngularPositionFromImagePosition": {
        "!type": "fn(CameraIndex: ?, ImagePosition: ?) -> Promise.Prototype",
        "!doc": "Returns position as angles relative to camera axis given a normalized position in the image. It takes 2 argument(s): [CameraIndex] - CameraIndex [ImagePosition] - ImagePosition It returns a Promise which is either resolved with the given value (corresponding angles values in radians (vector of size 2).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getAngularPositionFromImagePosition__iCR.std::vector:float:CR"
      },
      "setCameraCalibration": {
        "!type": "fn(cameraIndex: ?, filenames: ?) -> Promise.Prototype",
        "!doc": "It takes 2 argument(s): [cameraIndex] - Camera requested. [filenames] - Vector of files to retrieve in /media/internal/share/naoqi/vision or ~/.local/share/naoqi/vision It returns a Promise which is either resolved with the given value (true if succeeded, false otherwise) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getAngularSizeFromImageSize": {
        "!type": "fn(CameraIndex: ?, ImageSize: ?) -> Promise.Prototype",
        "!doc": "From a normalized size in the image, returns size expressed as angles in radian relative to camera axis. It takes 2 argument(s): [CameraIndex] - CameraIndex [ImageSize] - ImageSize It returns a Promise which is either resolved with the given value (corresponding angles values in radians (vector of size 2).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getAngularSizeFromImageSize__iCR.std::vector:float:CR"
      },
      "getColorSpaces": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Gets the current color spaces requested for the specified module. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Array of color spaces (seeSupported colorspaces).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getColorSpaces__ssCR"
      },
      "getActiveCameras": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Gets current active cameras for the specified module. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Array of camera indexes (seeCamera Indexes) or -1: can't access video source.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getActiveCameras__ssCR"
      },
      "getCameraName": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Gets the name of the specified camera. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (name of the camera (sensor name used by motion).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getCameraName__iCR"
      },
      "setAllCameraParametersToDefault": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Resets all camera internal parameters to their default value. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (true if successful, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setAllCameraParametersToDefault__ssCR"
      },
      "getCameraParameterRange": {
        "!type": "fn(Handle: ?, Id: ?) -> Promise.Prototype",
        "!doc": "Gets the range of a camera's parameter from the module current active camera. It takes 2 argument(s): [Handle] - Handle [Id] - Id It returns a Promise which is either resolved with the given value (An ALValue containing the minimum and maximum of the requested parameter.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getCameraParameterRange__ssCR.iCR"
      },
      "subscribeCameras": {
        "!type": "fn(Name: ?, CameraIndexes: ?, Resolutions: ?, ColorSpaces: ?, Fps: ?) -> Promise.Prototype",
        "!doc": "Subscribes to Video Input System. When a Video Module subscribes to ALVideoDevice, a buffer of the requested image resolution is added to the list of buffers for each camera. It takes 5 argument(s): [Name] - Name [CameraIndexes] - CameraIndexes [Resolutions] - Resolutions [ColorSpaces] - ColorSpaces [Fps] - Fps It returns a Promise which is either resolved with the given value (String handle under which the module is known from ALVideoDevice.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::subscribeCameras__ssCR.AL::ALValueCR.AL::ALValueCR.AL::ALValueCR.iCR"
      },
      "isCameraOpen": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Detects if the video device is open (i.e. locked). It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::isCameraOpen__iCR"
      },
      "getImageSizeFromAngularSize": {
        "!type": "fn(CameraIndex: ?, AngularSize: ?) -> Promise.Prototype",
        "!doc": "Returns a normalized size from a size expressed with camera angles in radians. It takes 2 argument(s): [CameraIndex] - CameraIndex [AngularSize] - AngularSize It returns a Promise which is either resolved with the given value (corresponding normalized position in the image [0.0 - 1.0] (vector of size 2).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImageSizeFromAngularSize__iCR.std::vector:float:CR"
      },
      "getImageLocal": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Retrieves the latest image from the video source, applies eventual transformations to the image to provide the format requested by the vision module and returns a pointer to a lockedAL::ALImage. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (Pointer to the locked image buffer, NULL if error (e.g. if the previous image was not released).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImageLocal__ssCR"
      },
      "setParameterToDefault": {
        "!type": "fn(CameraIndex: ?, parameter: ?) -> Promise.Prototype",
        "!doc": "Resets camera internal parameter to its default value. It takes 2 argument(s): [CameraIndex] - CameraIndex [parameter] - parameter It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setParameterToDefault__iCR.iCR"
      },
      "unsubscribe": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Unregisters a module from ALVideoDevice. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::unsubscribe__ssCR"
      },
      "releaseImage": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Release image buffer locked by getImageLocal(). If module had no locked image buffer, does nothing. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (true if success) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::releaseImage__ssCR"
      },
      "setAllParametersToDefault": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Resets all camera internal parameters to their default value. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::setAllParametersToDefault__iCR"
      },
      "releaseDirectRawImages": {
        "!type": "fn(Handle: ?) -> Promise.Prototype",
        "!doc": "Release image buffer locked by getDirectRawImagesLocal(). If the module has no locked image buffer, does nothing. It takes 1 argument(s): [Handle] - Handle It returns a Promise which is either resolved with the given value (true if success) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::releaseDirectRawImages__ssCR"
      },
      "getImageInfoFromAngularInfoWithResolution": {
        "!type": "fn(CameraIndex: ?, AngularInfo: ?, ResolutionIndex: ?) -> Promise.Prototype",
        "!doc": "Returns [X, Y, width, height] info as pixels in the image from these info expressed as angles in radians (as returned by vision extractors). It takes 3 argument(s): [CameraIndex] - CameraIndex [AngularInfo] - AngularInfo [ResolutionIndex] - ResolutionIndex It returns a Promise which is either resolved with the given value (corresponding pixels position and size info: [X, Y, width, height].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getImageInfoFromAngularInfoWithResolution__iCR.std::vector:float:CR.iCR"
      },
      "getResolution": {
        "!type": "fn(CameraIndex: ?) -> Promise.Prototype",
        "!doc": "Gets the resolution of the video source before eventual conversion. It takes 1 argument(s): [CameraIndex] - CameraIndex It returns a Promise which is either resolved with the given value (Supported resolutionsor -1: can't access video source.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideodevice-api.html#ALVideoDeviceProxy::getResolution__iCR"
      }
    },
    "ALPhotoCapture": {
      "halfPress": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Manually (un)subscribes to ALVideoDevice. It returns a Promise which is either resolved with the given value (True if eveything went well, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets the frame resolution used to take pictures. It takes 1 argument(s): [resolution] - resolution It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::setResolution__iCR"
      },
      "isHalfPressed": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns True if the \"half press\" mode is on. It returns a Promise which is either resolved with the given value (True or False.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getColorSpace": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current color space (eitherkBGRColorSpaceorkYuvColorSpace). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::getColorSpace"
      },
      "getCameraID": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the ID of the camera used to take pictures. It returns a Promise which is either resolved with the given value (camera ID.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::getCameraID"
      },
      "setPictureFormat": {
        "!type": "fn(pictureFormat: ?) -> Promise.Prototype",
        "!doc": "Sets the image format used to save the pictures. This also corresponds to the file extension added to the filename. It takes 1 argument(s): [pictureFormat] - pictureFormat It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::setPictureFormat__ssCR"
      },
      "setColorSpace": {
        "!type": "fn(colorSpace: ?) -> Promise.Prototype",
        "!doc": "Sets the color space used. It must be eitherkBGRColorSpace(for color images) orkYuvColorSpace(for gray-scale images). It takes 1 argument(s): [colorSpace] - colorSpace It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::setColorSpace__iCR"
      },
      "setCameraID": {
        "!type": "fn(cameraID: ?) -> Promise.Prototype",
        "!doc": "Sets the camera used to take pictures. It takes 1 argument(s): [cameraID] - cameraID It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::setCameraID__iCR"
      },
      "getPictureFormat": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current picture extension. SeeALPhotoCaptureProxy::setPictureFormatfor the list of possible return values. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::getPictureFormat"
      },
      "setHalfPressEnabled": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enable or disables thehalfPressmode. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value (true in case of success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::setHalfPressEnabled__bCR"
      },
      "takePicture": {
        "!type": "fn(folderPath: ?, fileName: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 2 argument(s): [folderPath] - folderPath [fileName] - fileName It returns a Promise which is either resolved with the given value (Array of one element [fileName].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::takePicture__ssCR.ssCR"
      },
      "takePictures": {
        "!type": "fn(numberOfPictures: ?, folderPath: ?, fileName: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 3 argument(s): [numberOfPictures] - numberOfPictures [folderPath] - folderPath [fileName] - fileName It returns a Promise which is either resolved with the given value (Array containing the list of the recorded file names [listOfNames] where listOfNames is an array of strings [name1, name2...].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::takePictures__iCR.ssCR.ssCR"
      },
      "setCaptureInterval": {
        "!type": "fn(captureInterval: ?) -> Promise.Prototype",
        "!doc": "Sets the time period between which two successive shots. It takes 1 argument(s): [captureInterval] - captureInterval It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::setCaptureInterval__iCR"
      },
      "isHalfPressEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current status ofhalfPressmode. It returns a Promise which is either resolved with the given value (true if thehalfPressmode is on, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::isHalfPressEnabled"
      },
      "getCaptureInterval": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current delay in millisecond between two pictures. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::getCaptureInterval"
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current frame resolution. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alphotocapture-api.html#ALPhotoCaptureProxy::getResolution"
      }
    },
    "ALAutonomousBlinking": {
      "setEnabled": {
        "!type": "fn(enabled: ?) -> Promise.Prototype",
        "!doc": "Enables or disables the autonomous blinking. It takes 1 argument(s): [enabled] - enabled It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alautonomousblinking-api.html#AutonomousBlinkingProxy::setEnabled__bCR"
      },
      "isEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether the autonomous blinking is enabled. It returns a Promise which is either resolved with the given value (True if it is enabled, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alautonomousblinking-api.html#AutonomousBlinkingProxy::isEnabled"
      }
    },
    "ALTabletService": {
      "loadUrl": {
        "!type": "fn(url: ?) -> Promise.Prototype",
        "!doc": "Load an URL in the browser of the tablet. Warning: you need to callALTabletService::showWebviewto display the browser. It takes 1 argument(s): [url] - url It returns a Promise which is either resolved with the given value (True if successful, false if the URL is not found or unreachable.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::loadUrl__ssCR"
      },
      "resumeGif": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Resume current gif displayed. It returns a Promise which is either resolved with the given value (True if gif is playing, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::resumeGif"
      },
      "getVideoLength": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get video length in milliseconds. It returns a Promise which is either resolved with the given value (-1 on error.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::getVideoLength"
      },
      "getWifiStatus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Check WiFi status on the tablet. It returns a Promise which is either resolved with the given value (IDLE, SCANNING, DISCONNECTED, or CONNECTED.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::getWifiStatus"
      },
      "configureWifi": {
        "!type": "fn(security: ?, ssid: ?, key: ?) -> Promise.Prototype",
        "!doc": "Configure the WiFi. It takes 3 argument(s): [security] - security [ssid] - ssid [key] - key It returns a Promise which is either resolved with the given value (true if this configuration is valid) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::configureWifi__ssCR.ssCR.ssCR"
      },
      "pauseVideo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Pause the video playing but do not close the video player. Can be resumed byALTabletService::resumeVideo. It returns a Promise which is either resolved with the given value (True if video is playing, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::pauseVideo"
      },
      "getOnTouchScaleFactor": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the touch scale factor of current view displayed. Default is 1.0 for all views except for the browser view which is 1.34 . It returns a Promise which is either resolved with the given value (the scale factor.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::getOnTouchScaleFactor"
      },
      "setOnTouchWebviewScaleFactor": {
        "!type": "fn(scaleFactor: ?) -> Promise.Prototype",
        "!doc": "Set the touch scale factor of the webview. Default is 1.34 so the touch viewport is 1707 x 1067. If set to 1, the touch view port will be 1280x800. It takes 1 argument(s): [scaleFactor] - scaleFactor It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::setOnTouchWebviewScaleFactor__float"
      },
      "getAvailableKeyboards": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of available keyboards installed on the tablet. It returns a Promise which is either resolved with the given value (a list of keyboard IDs) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::getAvailableKeyboards"
      },
      "cleanWebview": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Clean the web browser. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::cleanWebview"
      },
      "forgetWifi": {
        "!type": "fn(ssid: ?) -> Promise.Prototype",
        "!doc": "Forget a wifi network. It takes 1 argument(s): [ssid] - ssid It returns a Promise which is either resolved with the given value (true if it find the network and succeed to forget it.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::forgetWifi__ssCR"
      },
      "resumeVideo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Resume the video paused byALTabletService::pauseVideo. It returns a Promise which is either resolved with the given value (True if video is playing, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::resumeVideo"
      },
      "preLoadImage": {
        "!type": "fn(url: ?) -> Promise.Prototype",
        "!doc": "Pre-load an image. Use the same URL for showImage. It takes 1 argument(s): [url] - url It returns a Promise which is either resolved with the given value (True if pre-load succeed, false if it cannot ping the URL or if it is not a image.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::preLoadImage__ssCR"
      },
      "hide": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Hide view currently displayed (video, image, web, alert ...). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::hide"
      },
      "loadApplication": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Start new application on tablet. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (True if successful, false if the application is not found or unreachable.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::loadApplication__ssCR"
      },
      "showWebview": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It returns a Promise which is either resolved with the given value (True if successful, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::showWebview"
      },
      "enableWifi": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Enable the wifi. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::enableWifi"
      },
      "showAlertView": {
        "!type": "fn(radius: ?, color: ?, delay: ?) -> Promise.Prototype",
        "!doc": "Show an alert view. It takes 3 argument(s): [radius] - radius [color] - color [delay] - delay It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::showAlertView__floatCR.ssCR.iCR"
      },
      "version": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (the tablet browser version.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::version"
      },
      "hideWebview": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Hide thewebviewon the tablet, theidle screenappears instead. It returns a Promise which is either resolved with the given value (True if successful, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::hideWebview"
      },
      "disableWifi": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Disable the wifi. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::disableWifi"
      },
      "hideDialog": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Hide the dialog view. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::hideDialog"
      },
      "connectWifi": {
        "!type": "fn(ssid: ?) -> Promise.Prototype",
        "!doc": "Connect to a known wifi. It takes 1 argument(s): [ssid] - ssid It returns a Promise which is either resolved with the given value (True if connection was established successfully, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::connectWifi__ssCR"
      },
      "resetTablet": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Reset the tablet as if no one used it before, i.e. clean the stack of activities, the web browser content, and the web browser cache. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::resetTablet"
      },
      "setVolume": {
        "!type": "fn(volume: ?) -> Promise.Prototype",
        "!doc": "Configure the media volume of the tablet. It takes 1 argument(s): [volume] - volume It returns a Promise which is either resolved with the given value (true if it's work false otherwise, if the volume isn't in the proper range.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::setVolume__iCR"
      },
      "stopVideo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Close the video player. It returns a Promise which is either resolved with the given value (True if video player is open, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::stopVideo"
      },
      "hideImage": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Hide image currently displayed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::hideImage"
      },
      "setBackgroundColor": {
        "!type": "fn(color: ?) -> Promise.Prototype",
        "!doc": "Set image background color. It takes 1 argument(s): [color] - color It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::setBackgroundColor__ssCR"
      },
      "pauseGif": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Pause current gif displayed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::pauseGif"
      },
      "getVideoPosition": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the time elapsed since the beginning of the video in milliseconds. It returns a Promise which is either resolved with the given value (-1 if no video is played, a positive number otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::getVideoPosition"
      },
      "showImage": {
        "!type": "fn(url: ?) -> Promise.Prototype",
        "!doc": "Show an image, using the cache. Download the image before displaying it, unless the picture is already in the cache, because it has been preloaded or already displayed. It takes 1 argument(s): [url] - url It returns a Promise which is either resolved with the given value (true if show succeed, false if it can't ping the URL or if it's not a image.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::showImage__ssCR"
      },
      "getWifiMacAddress": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the wifi mac address It returns a Promise which is either resolved with the given value (the wifi mac address) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::getWifiMacAddress"
      },
      "turnScreenOn": {
        "!type": "fn(isOn: ?) -> Promise.Prototype",
        "!doc": "Turn on/off the tablet screen. It takes 1 argument(s): [isOn] - isOn It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::turnScreenOn__bCR"
      },
      "wakeUp": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Wake the tablet (from standby mode). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::wakeUp"
      },
      "getBrightness": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the tablet brightness. It returns a Promise which is either resolved with the given value (a float between 0 and 1.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::getBrightness"
      },
      "setTabletLanguage": {
        "!type": "fn(locale: ?) -> Promise.Prototype",
        "!doc": "Set the tablet language. It takes 1 argument(s): [locale] - locale It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::setTabletLanguage__ssCR"
      },
      "robotIp": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Current robot IP.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::robotIp"
      },
      "setBrightness": {
        "!type": "fn(newBrightness: ?) -> Promise.Prototype",
        "!doc": "Set tablet brightness. It takes 1 argument(s): [newBrightness] - newBrightness It returns a Promise which is either resolved with the given value (True if successful, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::setBrightness__float"
      },
      "showInputDialog": {
        "!type": "fn(type: ?, title: ?, ok: ?, cancel: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 4 argument(s): [type] - type [title] - title [ok] - ok [cancel] - cancel It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::showInputDialog__ssCR.ssCR.ssCR.ssCR"
      },
      "playVideo": {
        "!type": "fn(url: ?) -> Promise.Prototype",
        "!doc": "Open a video player on tablet and play video from given url. Recommend format is mp4 container, video codec H.264, audio codec AAC For further details see:pepper-tablet. It takes 1 argument(s): [url] - url It returns a Promise which is either resolved with the given value (True if video is playing, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::playVideo__ssCR"
      },
      "showInputTextDialog": {
        "!type": "fn(title: ?, ok: ?, cancel: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 3 argument(s): [title] - title [ok] - ok [cancel] - cancel It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::showInputTextDialog__ssCR.ssCR.ssCR"
      },
      "disconnectWifi": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Disconnect current connected wifi. It returns a Promise which is either resolved with the given value (true if it succeed to disconnect, false otherwise) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::disconnectWifi"
      },
      "setKeyboard": {
        "!type": "fn(keyboardID: ?) -> Promise.Prototype",
        "!doc": "Set the tablet keyboard. It takes 1 argument(s): [keyboardID] - keyboardID It returns a Promise which is either resolved with the given value (True if the change succeed, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::setKeyboard__ssCR"
      },
      "executeJS": {
        "!type": "fn(script: ?) -> Promise.Prototype",
        "!doc": "Execute javascript on the web browser. It takes 1 argument(s): [script] - script It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::executeJS__ssCR"
      },
      "reloadPage": {
        "!type": "fn(bypassCache: ?) -> Promise.Prototype",
        "!doc": "Reload the current displayed web page. It takes 1 argument(s): [bypassCache] - bypassCache It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::reloadPage__b"
      },
      "goToSleep": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Put the tablet in sleep mode (standby mode). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::goToSleep"
      },
      "showImageNoCache": {
        "!type": "fn(url: ?) -> Promise.Prototype",
        "!doc": "Show an image, without using the cache. Download the image before displaying it. It takes 1 argument(s): [url] - url It returns a Promise which is either resolved with the given value (true if show succeed, false if it can't ping the URL or if it's not a image.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/altabletservice-api.html#ALTabletService::showImageNoCache__ssCR"
      }
    },
    "ALGazeAnalysis": {
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isFaceAnalysisEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current status of face analysis. It returns a Promise which is either resolved with the given value (True if face analysis is enabled, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setTolerance": {
        "!type": "fn(tolerance: ?) -> Promise.Prototype",
        "!doc": "Sets the value of the Tolerance for gaze analysis. SeeALGazeAnalysisfor details about the Tolerance value. It takes 1 argument(s): [tolerance] - tolerance It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/algazeanalysis-api.html#ALGazeAnalysisProxy::setTolerance__floatCR"
      },
      "setFaceAnalysisEnabled": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Turns face analysis on or off. It takes 1 argument(s): [status] - True to turn it on, False to turn it off. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getTolerance": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "SeeALGazeAnalysisfor details about the Tolerance value. It returns a Promise which is either resolved with the given value (Current value of the Tolerance for gaze analysis.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/algazeanalysis-api.html#ALGazeAnalysisProxy::getTolerance"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALCloseObjectDetection": {
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALEngagementZones": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSecondLimitDistance": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (The current value of SecondDistance (in meters). The default value is 2.5m. Please refer to the diagram inALEngagementZonesfor details.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alengagementzones-api.html#ALEngagementZonesProxy::getSecondLimitDistance"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFirstLimitDistance": {
        "!type": "fn(distance: ?) -> Promise.Prototype",
        "!doc": "Sets the value of FirstDistance. Please refer to the diagram inALEngagementZonesfor details. Calling this method will trigger the eventEngagementZones/FirstLimitDistanceUpdated(). It takes 1 argument(s): [distance] - distance It returns a Promise which is either resolved with the given value (true if the update succeeded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alengagementzones-api.html#ALEngagementZonesProxy::setFirstLimitDistance__floatCR"
      },
      "getLimitAngle": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (The current value of LimitAngle (in degrees). The default value is 90 degrees. Please refer to the diagram inALEngagementZonesfor details.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alengagementzones-api.html#ALEngagementZonesProxy::getLimitAngle"
      },
      "setSecondLimitDistance": {
        "!type": "fn(distance: ?) -> Promise.Prototype",
        "!doc": "Sets the value of SecondDistance. Please refer to the diagram inALEngagementZonesfor details. Calling this method will trigger the eventEngagementZones/SecondLimitDistanceUpdated(). It takes 1 argument(s): [distance] - distance It returns a Promise which is either resolved with the given value (true if the update succeeded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alengagementzones-api.html#ALEngagementZonesProxy::setSecondLimitDistance__floatCR"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "computeEngagementZone": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alengagementzones-api.html#ALEngagementZonesProxy::computeEngagementZone"
      },
      "setLimitAngle": {
        "!type": "fn(distance: ?) -> Promise.Prototype",
        "!doc": "Sets the value of LimitAngle. Please refer to the diagram inALEngagementZonesfor details. Calling this method will trigger the eventEngagementZones/LimitAngleUpdated(). It takes 1 argument(s): [distance] - distance It returns a Promise which is either resolved with the given value (true if the update succeeded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alengagementzones-api.html#ALEngagementZonesProxy::setLimitAngle__floatCR"
      },
      "getFirstLimitDistance": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (The current value of FirstDistance (in meters). The default value is 1.5m. Please refer to the diagram inALEngagementZonesfor details.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alengagementzones-api.html#ALEngagementZonesProxy::getFirstLimitDistance"
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "PackageManager": {
      "packages2": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of all installed packages. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::packages2"
      },
      "package": {
        "!type": "fn(uuid: ?) -> Promise.Prototype",
        "!doc": "Get a package with his uuid. Throw if no package has this uuid. With this function you cannot access to new created fields. It takes 1 argument(s): [uuid] - uuid It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::package__ssCR"
      },
      "packageIcon": {
        "!type": "fn(uuid: ?) -> Promise.Prototype",
        "!doc": "Get the icon of the package specified by this uuid. It takes 1 argument(s): [uuid] - uuid It returns a Promise which is either resolved with the given value (a string which is a bytearray of a png image.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::packageIcon__ssCR"
      },
      "hasPackage": {
        "!type": "fn(uuid: ?) -> Promise.Prototype",
        "!doc": "Check for existence of a package with his uuid. It takes 1 argument(s): [uuid] - uuid It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::hasPackage__ssCR"
      },
      "install": {
        "!type": "fn(path: ?) -> Promise.Prototype",
        "!doc": "Install a package from a path. It takes 1 argument(s): [path] - path It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::install__ssCR"
      },
      "removePkg": {
        "!type": "fn(uuid: ?) -> Promise.Prototype",
        "!doc": "Remove a package with his uuid. Throw if no package has this uuid. It takes 1 argument(s): [uuid] - uuid It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::removePkg__ssCR"
      },
      "package2": {
        "!type": "fn(uuid: ?) -> Promise.Prototype",
        "!doc": "Get a package with his uuid. Throw if no package has this uuid. It takes 1 argument(s): [uuid] - uuid It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::package2__ssCR"
      },
      "packages": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of all installed packages. With this function you cannot access to new created fields. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::packages"
      },
      "installCheckMd5": {
        "!type": "fn(path: ?, md5: ?) -> Promise.Prototype",
        "!doc": "Check for md5 compatibility then, if successful, install the package from a path. It takes 2 argument(s): [path] - path [md5] - md5 It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/packagemanager-api.html#PackageManager::installCheckMd5__ssCR.ssCR"
      }
    },
    "ALVideoRecorder": {
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Current video framerate.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::getFrameRate"
      },
      "getColorSpace": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Current color space.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::getColorSpace"
      },
      "getCameraID": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Current camera ID.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::getCameraID"
      },
      "isRecording": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if the robot is currently recording a video.false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::isRecording"
      },
      "setColorSpace": {
        "!type": "fn(colorSpace: ?) -> Promise.Prototype",
        "!doc": "Sets the color space used. It takes 1 argument(s): [colorSpace] - colorSpace It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::setColorSpace__iCR"
      },
      "setCameraID": {
        "!type": "fn(cameraID: ?) -> Promise.Prototype",
        "!doc": "Sets the camera used for recording. It takes 1 argument(s): [cameraID] - cameraID It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::setCameraID__iCR"
      },
      "stopRecording": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stops a video record that was launched withALVideoRecorderProxy::startRecording. The function returns the number of frames that were recorded, as well as the video absolute path. It returns a Promise which is either resolved with the given value (Array of two elements [numRecordedFrames, recordAbsolutePath].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::stopRecording"
      },
      "startRecording": {
        "!type": "fn(folderPath: ?, fileName: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 2 argument(s): [folderPath] - folderPath [fileName] - fileName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::startRecording__ssCR.ssCR"
      },
      "setFrameRate": {
        "!type": "fn(frameRate: ?) -> Promise.Prototype",
        "!doc": "Sets the number of frames per second (FPS). It takes 1 argument(s): [frameRate] - frameRate It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::setFrameRate__iCR"
      },
      "setVideoFormat": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Sets the codec name used to encode the video. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::setVideoFormat__ssCR"
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets the frame resolution. It takes 1 argument(s): [resolution] - resolution It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::setResolution__iCR"
      },
      "getVideoFormat": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Current video format used to encode video. SeeALVideoRecorderProxy::setVideoFormatfor the list of possible return values.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::getVideoFormat"
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Current frame resolution.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvideorecorder-api.html#ALVideoRecorderProxy::getResolution"
      }
    },
    "ALMotion": {
      "getExternalCollisionProtectionEnabled": {
        "!type": "fn(pName: ?) -> Promise.Prototype",
        "!doc": "Allow to know if the external collision protection is activated on the given name. It takes 1 argument(s): [pName] - The name {\"All\", \"Move\", \"Arms\", \"LArm\" or \"RArm\"}. It returns a Promise which is either resolved with the given value (Return true is the external collision protection of the given name is activated.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stiffnessInterpolation": {
        "!type": "fn(names: ?, stiffnessLists: ?, timeLists: ?) -> Promise.Prototype",
        "!doc": "Interpolates one or multiple joints to a target stiffness or along timed trajectories of stiffness. This is a blocking call. It takes 3 argument(s): [names] - Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". [stiffnessLists] - An stiffness, list of stiffnesses or list of list of stiffnesses [timeLists] - A time, list of times or list of list of times. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "moveTo": {
        "!type": "fn(x: ?, y: ?, theta: ?) -> Promise.Prototype",
        "!doc": "Makes the robot move at the given position. This is a blocking call. It takes 3 argument(s): [x] - The position along x axis [m]. [y] - The position along y axis [m]. [theta] - The position around z axis [rd]. It returns a Promise which is either resolved with the given value (true if the moveTo finished successfully) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbGoToBalance": {
        "!type": "fn(supportLeg: ?, duration: ?) -> Promise.Prototype",
        "!doc": "Advanced Whole Body API: \"Com\" go to a desired support polygon. This is a blocking call. It takes 2 argument(s): [supportLeg] - Name of the support leg: \"Legs\", \"LLeg\", \"RLeg\". [duration] - Time in seconds. Must be upper 0.5 s. It returns a Promise which is either resolved with the given value (A boolean of the success of the go to balance.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "changeAngles": {
        "!type": "fn(names: ?, changes: ?, fractionMaxSpeed: ?) -> Promise.Prototype",
        "!doc": "Changes Angles. This is a non-blocking call. It takes 3 argument(s): [names] - The name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". [changes] - One or more changes in radians [fractionMaxSpeed] - The fraction of maximum speed to use It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSummary": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns a string representation of the Model's state It returns a Promise which is either resolved with the given value (A formated string) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "moveIsActive": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Check if the move process is actif. It returns a Promise which is either resolved with the given value (True if move is active) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "killMove": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Emergency Stop on Move task: This method will end the move task brutally, without attempting to return to a balanced state. The robot could easily fall. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "moveToward": {
        "!type": "fn(x: ?, y: ?, theta: ?) -> Promise.Prototype",
        "!doc": "Makes the robot move at the given normalized velocity. This is a non-blocking call. It takes 3 argument(s): [x] - The normalized velocity along x axis (between -1 and 1). [y] - The normalized velocity along y axis (between -1 and 1). [theta] - The normalized velocity around z axis (between -1 and 1). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "move": {
        "!type": "fn(x: ?, y: ?, theta: ?) -> Promise.Prototype",
        "!doc": "Makes the robot move at the given velocity. This is a non-blocking call. It takes 3 argument(s): [x] - The velocity along x axis [m.s-1]. [y] - The velocity along y axis [m.s-1]. [theta] - The velocity around z axis [rd.s-1]. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbEnableBalanceConstraint": {
        "!type": "fn(isEnable: ?, supportLeg: ?) -> Promise.Prototype",
        "!doc": "UserFriendly Whole Body API: enable to keep balance in support polygon. It takes 2 argument(s): [isEnable] - Enable Robot to keep balance. [supportLeg] - Name of the support leg: \"Legs\", \"LLeg\", \"RLeg\". It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "rest": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "The robot will rest: go to a relax and safe position and set Motor OFF It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMoveArmsEnabled": {
        "!type": "fn(leftArmEnabled: ?, rightArmEnabled: ?) -> Promise.Prototype",
        "!doc": "Sets if Arms Motions are enabled during the Move Process. It takes 2 argument(s): [leftArmEnabled] - if true Left Arm motions are controlled by the Move Task [rightArmEnabled] - if true Right Arm mMotions are controlled by the Move Task It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getNextRobotPosition": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the World Absolute next Robot Position. In fact in the walk algorithm some foot futur foot step are incompressible due to preview control, so this function give the next robot position which is incompressible. If the robot doesn't walk this function is equivalent to getRobotPosition(false) It returns a Promise which is either resolved with the given value (A vector containing the World Absolute next Robot position.(Absolute Position X, Absolute Position Y, Absolute Angle Z)) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbEnable": {
        "!type": "fn(isEnabled: ?) -> Promise.Prototype",
        "!doc": "UserFriendly Whole Body API: enable Whole Body Balancer. It's a Generalized Inverse Kinematics which deals with cartesian control, balance, redundancy and task priority. The main goal is to generate and stabilized consistent motions without precomputed trajectories and adapt nao's behaviour to the situation. The generalized inverse kinematic problem takes in account equality constraints (keep foot fix), inequality constraints (joint limits, balance, ...) and quadratic minimization (cartesian / articular desired trajectories). We solve each step a quadratic programming on the robot. It takes 1 argument(s): [isEnabled] - Active / Disactive Whole Body Balancer. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOrthogonalSecurityDistance": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current orthogonal security distance. It returns a Promise which is either resolved with the given value (The current orthogonal security distance.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbFootState": {
        "!type": "fn(stateName: ?, supportLeg: ?) -> Promise.Prototype",
        "!doc": "UserFriendly Whole Body API: set the foot state: fixed foot, constrained in a plane or free. It takes 2 argument(s): [stateName] - Name of the foot state. \"Fixed\" set the foot fixed. \"Plane\" constrained the Foot in the plane. \"Free\" set the foot free. [supportLeg] - Name of the foot. \"LLeg\", \"RLeg\" or \"Legs\". It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setDiagnosisEffectEnabled": {
        "!type": "fn(pEnable: ?) -> Promise.Prototype",
        "!doc": "Enable or disable the diagnosis effect into ALMotion It takes 1 argument(s): [pEnable] - Enable or disable the diagnosis effect. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "waitUntilMoveIsFinished": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Waits until the move process is finished: This method can be used to block your script/code execution until the move task is totally finished. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getTaskList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets an ALValue structure describing the tasks in the Task List It returns a Promise which is either resolved with the given value (An ALValue containing an ALValue for each task. The inner ALValue contains: Name, MotionID) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "killTask": {
        "!type": "fn(motionTaskID: ?) -> Promise.Prototype",
        "!doc": "Kills a motion task. It takes 1 argument(s): [motionTaskID] - TaskID of the motion task you want to kill. It returns a Promise which is either resolved with the given value (Return true if the specified motionTaskId has been killed.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCollisionProtectionEnabled": {
        "!type": "fn(pChainName: ?) -> Promise.Prototype",
        "!doc": "Allow to know if the collision protection is activated on the given chain. It takes 1 argument(s): [pChainName] - The chain name {\"LArm\" or \"RArm\"}. It returns a Promise which is either resolved with the given value (Return true is the collision protection of the given Arm is activated.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getTransform": {
        "!type": "fn(name: ?, space: ?, useSensorValues: ?) -> Promise.Prototype",
        "!doc": "Gets an Homogenous Transform relative to the FRAME. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical. It takes 3 argument(s): [name] - Name of the item. Could be: any joint or chain or sensor (Head, LArm, RArm, LLeg, RLeg, Torso, HeadYaw, ..., CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot. [space] - Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. [useSensorValues] - If true, the sensor values will be used to determine the position. It returns a Promise which is either resolved with the given value (Vector of 16 floats corresponding to the values of the matrix, line by line.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getLimits": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Get the minAngle (rad), maxAngle (rad), and maxVelocity (rad.s-1) for a given joint or actuator in the body. It takes 1 argument(s): [name] - Name of a joint, chain, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". It returns a Promise which is either resolved with the given value (Array of ALValue arrays containing the minAngle, maxAngle, maxVelocity and maxTorque for all the bodies specified.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wakeUp": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "The robot will wake up: set Motor ON and go to initial position if needed It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSmartStiffnessEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Give the state of the smart Stiffness. It returns a Promise which is either resolved with the given value (Return true is the smart Stiffnes is activated. ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getIdlePostureEnabled": {
        "!type": "fn(pChain: ?) -> Promise.Prototype",
        "!doc": "This function gets the status of idle posture management on a chain. Chain name can be \"Body\", \"Arms\", \"LArm\", \"RArm\", \"Legs\" or \"Head\". It takes 1 argument(s): [pChain] - Chain name. It returns a Promise which is either resolved with the given value (True if breathing animation is enabled on the chain.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMotionCycleTime": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the motion cycle time in milliseconds. It returns a Promise which is either resolved with the given value (Expressed in milliseconds) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbEnableEffectorOptimization": {
        "!type": "fn(effectorName: ?, isActive: ?) -> Promise.Prototype",
        "!doc": "Advanced Whole Body API: enable to control an effector as an optimization. It takes 2 argument(s): [effectorName] - Name of the effector : \"All\", \"Arms\", \"Legs\", \"Head\", \"LArm\", \"RArm\", \"LLeg\", \"RLeg\", \"Torso\", \"Com\". [isActive] - if true, the effector control is taken in acount in the optimization criteria. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isCollision": {
        "!type": "fn(pChainName: ?) -> Promise.Prototype",
        "!doc": "Give the collision state of a chain. If a chain has a collision state \"none\" or \"near\", it could be desactivated. It takes 1 argument(s): [pChainName] - The chain name {\"Arms\", \"LArm\" or \"RArm\"}. It returns a Promise which is either resolved with the given value (A string which notice the collision state: \"none\" there are no collision, \"near\" the collision is taking in account in the anti-collision algorithm, \"collision\" the chain is in contact with an other body. If the chain asked is \"Arms\" the most unfavorable result is given. ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setExternalCollisionProtectionEnabled": {
        "!type": "fn(pName: ?, pEnable: ?) -> Promise.Prototype",
        "!doc": "Enable Anticollision protection of the arms and base move of the robot with external environment. It takes 2 argument(s): [pName] - The name {\"All\", \"Move\", \"Arms\", \"LArm\" or \"RArm\"}. [pEnable] - Activate or disactivate the anticollision of the desired name. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getRobotPosition": {
        "!type": "fn(useSensors: ?) -> Promise.Prototype",
        "!doc": "Gets the World Absolute Robot Position. It takes 1 argument(s): [useSensors] - If true, use the sensor values It returns a Promise which is either resolved with the given value (A vector containing the World Absolute Robot Position. (Absolute Position X, Absolute Position Y, Absolute Angle Z)) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbSetEffectorControl": {
        "!type": "fn(effectorName: ?, targetCoordinate: ?) -> Promise.Prototype",
        "!doc": "UserFriendly Whole Body API: set new target for controlled effector. This is a non-blocking call. It takes 2 argument(s): [effectorName] - Name of the effector : \"Head\", \"LArm\" or \"RArm\". Nao goes to posture init. He manages his balance and keep foot fix. \"Head\" is controlled in rotation. \"LArm\" and \"RArm\" are controlled in position. [targetCoordinate] - \"Head\" is controlled in rotation (WX, WY, WZ). \"LArm\" and \"RArm\" are controlled in position (X, Y, Z). TargetCoordinate must be absolute and expressed in FRAME_ROBOT. If the desired position/orientation is unfeasible, target is resize to the nearest feasible motion. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "areResourcesAvailable": {
        "!type": "fn(resourceNames: ?) -> Promise.Prototype",
        "!doc": "Returns true if all the desired resources are available. Only motion API's' blocking call takes resources. It takes 1 argument(s): [resourceNames] - A vector of resource names such as joints. Use getBodyNames(\"Body\") to have the list of the available joint for your robot. It returns a Promise which is either resolved with the given value (True if the resources are available) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFootStepsWithSpeed": {
        "!type": "fn(legName: ?, footSteps: ?, fractionMaxSpeed: ?, clearExisting: ?) -> Promise.Prototype",
        "!doc": "Makes Nao do foot step planner with speed. This is a blocking call. It takes 4 argument(s): [legName] - name of the leg to move('LLeg'or 'RLeg') [footSteps] - [x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta] [fractionMaxSpeed] - speed of each foot step. Must be between 0 and 1. [clearExisting] - Clear existing foot steps. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getBodyNames": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the names of all the joints and actuators in the collection. It takes 1 argument(s): [name] - Name of a chain, \"Arms\", \"Legs\", \"Body\", \"Chains\", \"JointActuators\", \"Joints\" or \"Actuators\". It returns a Promise which is either resolved with the given value (Vector of strings, one for each joint and actuator in the collection) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getRobotVelocity": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the World Absolute Robot Velocity. It returns a Promise which is either resolved with the given value (A vector containing the World Absolute Robot Velocity. (Absolute Velocity Translation X [m.s-1], Absolute Velocity Translation Y[m.s-1], Absolute Velocity Rotation WZ [rd.s-1])) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setCollisionProtectionEnabled": {
        "!type": "fn(pChainName: ?, pEnable: ?) -> Promise.Prototype",
        "!doc": "Enable Anticollision protection of the arms of the robot. Use api isCollision to know if a chain is in collision and can be disactivated. It takes 2 argument(s): [pChainName] - The chain name {\"Arms\", \"LArm\" or \"RArm\"}. [pEnable] - Activate or disactivate the anticollision of the desired Chain. It returns a Promise which is either resolved with the given value (A bool which return always true.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setEnableNotifications": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enable / Disable notifications. It takes 1 argument(s): [enable] - If True enable notifications. If False disable notifications. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setAngles": {
        "!type": "fn(names: ?, angles: ?, fractionMaxSpeed: ?) -> Promise.Prototype",
        "!doc": "Sets angles. This is a non-blocking call. It takes 3 argument(s): [names] - The name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". [angles] - One or more angles in radians [fractionMaxSpeed] - The fraction of maximum speed to use It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setTangentialSecurityDistance": {
        "!type": "fn(securityDistance: ?) -> Promise.Prototype",
        "!doc": "Defines the tangential security distance used with external collision protection \"Move\". It takes 1 argument(s): [securityDistance] - The tangential security distance. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "closeHand": {
        "!type": "fn(handName: ?) -> Promise.Prototype",
        "!doc": "NAO stiffens the motors of desired hand. Then, he closes the hand, then cuts motor current to conserve energy. This is a blocking call. It takes 1 argument(s): [handName] - The name of the hand. Could be: \"RHand\" or \"LHand\" It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopMove": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stop Move task safely as fast as possible. The move task is ended less brutally than killMove but more quickly than move(0.0, 0.0, 0.0). This is a blocking call. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMass": {
        "!type": "fn(pName: ?) -> Promise.Prototype",
        "!doc": "Gets the mass of a joint, chain, \"Body\" or \"Joints\". It takes 1 argument(s): [pName] - Name of the body which we want the mass. \"Body\", \"Joints\" and \"Com\" give the total mass of nao. For the chain, it gives the total mass of the chain. It returns a Promise which is either resolved with the given value (The mass in kg.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "openHand": {
        "!type": "fn(handName: ?) -> Promise.Prototype",
        "!doc": "NAO stiffens the motors of desired hand. Then, he opens the hand, then cuts motor current to conserve energy. This is a blocking call. It takes 1 argument(s): [handName] - The name of the hand. Could be: \"RHand or \"LHand\" It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCOM": {
        "!type": "fn(pName: ?, pSpace: ?, pUseSensorValues: ?) -> Promise.Prototype",
        "!doc": "Gets the COM of a joint, chain, \"Body\" or \"Joints\". It takes 3 argument(s): [pName] - Name of the body which we want the mass. In chain name case, this function give the com of the chain. [pSpace] - Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. [pUseSensorValues] - If true, the sensor values will be used to determine the position. It returns a Promise which is either resolved with the given value (The COM position (meter).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFallManagerEnabled": {
        "!type": "fn(pEnable: ?) -> Promise.Prototype",
        "!doc": "Enable The fall manager protection for the robot. When a fall is detected the robot adopt a joint configuration to protect himself and cut the stiffness. . An memory event called \"robotHasFallen\" is generated when the fallManager have been activated. It takes 1 argument(s): [pEnable] - Activate or disactivate the smart stiffness. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setOrthogonalSecurityDistance": {
        "!type": "fn(securityDistance: ?) -> Promise.Prototype",
        "!doc": "Defines the orthogonal security distance used with external collision protection \"Move\". It takes 1 argument(s): [securityDistance] - The orthogonal security distance. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "angleInterpolationWithSpeed": {
        "!type": "fn(names: ?, targetAngles: ?, maxSpeedFraction: ?) -> Promise.Prototype",
        "!doc": "Interpolates one or multiple joints to a target angle, using a fraction of max speed. Only one target angle is allowed for each joint. This is a blocking call. It takes 3 argument(s): [names] - Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". [targetAngles] - An angle, or list of angles in radians [maxSpeedFraction] - A fraction. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMoveArmsEnabled": {
        "!type": "fn(chainName: ?) -> Promise.Prototype",
        "!doc": "Gets if Arms Motions are enabled during the Move Process. It takes 1 argument(s): [chainName] - Name of the chain. Could be: \"LArm\", \"RArm\" or \"Arms\" It returns a Promise which is either resolved with the given value (For LArm and RArm true if the corresponding arm is enabled. For Arms, true if both are enabled. False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setPositions": {
        "!type": "fn(names: ?, spaces: ?, positions: ?, fractionMaxSpeed: ?, axisMask: ?) -> Promise.Prototype",
        "!doc": "Moves multiple end-effectors to the given position and orientation position6d. This is a non-blocking call. It takes 5 argument(s): [names] - The name or names of effector. [spaces] - The task frame or task frames {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. [positions] - Position6D arrays [fractionMaxSpeed] - The fraction of maximum speed to use [axisMask] - Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMotionConfig": {
        "!type": "fn(config: ?) -> Promise.Prototype",
        "!doc": "Internal Use. It takes 1 argument(s): [config] - Internal: An array of ALValues [i][0]: name, [i][1]: value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFallManagerEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Give the state of the fall manager. It returns a Promise which is either resolved with the given value (Return true is the fall manager is activated. ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setBreathEnabled": {
        "!type": "fn(pChain: ?, pIsEnabled: ?) -> Promise.Prototype",
        "!doc": "This function starts or stops breathing animation on a chain. Chain name can be \"Body\", \"Arms\", \"LArm\", \"RArm\", \"Legs\" or \"Head\". Head breathing animation will work only if Leg animation is active. It takes 2 argument(s): [pChain] - Chain name. [pIsEnabled] - Enables / disables the chain. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "robotIsWakeUp": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return true if the robot is already wakeUp It returns a Promise which is either resolved with the given value (True if the robot is already wakeUp.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMoveConfig": {
        "!type": "fn(config: ?) -> Promise.Prototype",
        "!doc": "Gets the move config. It takes 1 argument(s): [config] - a string should be \"Max\", \"Min\", \"Default\" It returns a Promise which is either resolved with the given value (An ALvalue with the move config) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setStiffnesses": {
        "!type": "fn(names: ?, stiffnesses: ?) -> Promise.Prototype",
        "!doc": "Sets the stiffness of one or more joints. This is a non-blocking call. It takes 2 argument(s): [names] - Names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". [stiffnesses] - One or more stiffnesses between zero and one. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setPushRecoveryEnabled": {
        "!type": "fn(pEnable: ?) -> Promise.Prototype",
        "!doc": "Enable The push recovery protection for the robot. It takes 1 argument(s): [pEnable] - Enable the push recovery. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getStiffnesses": {
        "!type": "fn(jointName: ?) -> Promise.Prototype",
        "!doc": "Gets stiffness of a joint or group of joints It takes 1 argument(s): [jointName] - Name of the joints, chains, \"Body\", \"Joints\" or \"Actuators\". It returns a Promise which is either resolved with the given value (One or more stiffnesses. 1.0 indicates maximum stiffness. 0.0 indicated minimum stiffness) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "angleInterpolation": {
        "!type": "fn(names: ?, angleLists: ?, timeLists: ?, isAbsolute: ?) -> Promise.Prototype",
        "!doc": "Interpolates one or multiple joints to a target angle or along timed trajectories. This is a blocking call. It takes 4 argument(s): [names] - Name or names of joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". [angleLists] - An angle, list of angles or list of list of angles in radians [timeLists] - A time, list of times or list of list of times in seconds [isAbsolute] - If true, the movement is described in absolute angles, else the angles are relative to the current angle. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getDiagnosisEffectEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Give the state of the diagnosis effect. It returns a Promise which is either resolved with the given value (Return true is the diagnosis reflex is activated. ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFootSteps": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the foot steps. This is a non-blocking call. It returns a Promise which is either resolved with the given value (Give two list of foot steps. The first one give the unchangeable foot step. The second list give the changeable foot steps. Il you use setFootSteps or setFootStepsWithSpeed with clearExisting parmater equal true, walk engine execute unchangeable foot step and remove the other.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getPosition": {
        "!type": "fn(name: ?, space: ?, useSensorValues: ?) -> Promise.Prototype",
        "!doc": "Gets a Position relative to the FRAME. Axis definition: the x axis is positive toward Nao's front, the y from right to left and the z is vertical. The angle convention of Position6D is Rot_z(wz).Rot_y(wy).Rot_x(wx). It takes 3 argument(s): [name] - Name of the item. Could be: Head, LArm, RArm, LLeg, RLeg, Torso, CameraTop, CameraBottom, MicroFront, MicroRear, MicroLeft, MicroRight, Accelerometer, Gyrometer, Laser, LFsrFR, LFsrFL, LFsrRR, LFsrRL, RFsrFR, RFsrFL, RFsrRR, RFsrRL, USSensor1, USSensor2, USSensor3, USSensor4. Use getSensorNames for the list of sensors supported on your robot. [space] - Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. [useSensorValues] - If true, the sensor values will be used to determine the position. It returns a Promise which is either resolved with the given value (Vector containing the Position6D using meters and radians (x, y, z, wx, wy, wz)) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getTangentialSecurityDistance": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current tangential security distance. It returns a Promise which is either resolved with the given value (The current tangential security distance.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSupportPolygon": {
        "!type": "fn(pSpace: ?, pUseSensorValues: ?) -> Promise.Prototype",
        "!doc": "Gets the support polygon It takes 2 argument(s): [pSpace] - Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. [pUseSensorValues] - If true, the sensor values will be used to determine the position. It returns a Promise which is either resolved with the given value (A vector containing the x,y coordinates of each of the outer points of the support polygon in specified frame.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSensorNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the list of sensors supported on your robot. It returns a Promise which is either resolved with the given value (Vector of sensor names) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbGoToBalanceWithSpeed": {
        "!type": "fn(supportLeg: ?, fractionMaxSpeed: ?) -> Promise.Prototype",
        "!doc": "Advanced Whole Body API: \"Com\" go to a desired support polygon. This is a blocking call. It takes 2 argument(s): [supportLeg] - Name of the support leg: \"Legs\", \"LLeg\", \"RLeg\". [fractionMaxSpeed] - The fraction of maximum speed to use. It returns a Promise which is either resolved with the given value (A boolean of the success of the go to balance.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "areNotificationsEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return true if notifications are active. It returns a Promise which is either resolved with the given value (Return True if notifications are active.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "angleInterpolationBezier": {
        "!type": "fn(jointNames: ?, times: ?, controlPoints: ?) -> Promise.Prototype",
        "!doc": "Interpolates a sequence of timed angles for several motors using bezier control points. This is a blocking call. It takes 3 argument(s): [jointNames] - A vector of joint names [times] - An ragged ALValue matrix of floats. Each line corresponding to a motor, and column element to a control point. [controlPoints] - An ALValue array of arrays each containing [float angle, Handle1, Handle2], where Handle is [int InterpolationType, float dAngle, float dTime] descibing the handle offsets relative to the angle and time of the point. The first bezier param describes the handle that controls the curve preceeding the point, the second describes the curve following the point. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getChainClosestObstaclePosition": {
        "!type": "fn(pName: ?, space: ?) -> Promise.Prototype",
        "!doc": "Gets chain closest obstacle Position . It takes 2 argument(s): [pName] - The Chain name {\"LArm\" or \"RArm\"}. [space] - Task frame {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. It returns a Promise which is either resolved with the given value (Vector containing the Position3D in meters (x, y, z)) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "wbEnableEffectorControl": {
        "!type": "fn(effectorName: ?, isEnabled: ?) -> Promise.Prototype",
        "!doc": "UserFriendly Whole Body API: enable whole body cartesian control of an effector. It takes 2 argument(s): [effectorName] - Name of the effector : \"Head\", \"LArm\" or \"RArm\". Nao goes to posture init. He manages his balance and keep foot fix. \"Head\" is controlled in rotation. \"LArm\" and \"RArm\" are controlled in position. [isEnabled] - Active / Disactive Effector Control. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "killTasksUsingResources": {
        "!type": "fn(resourceNames: ?) -> Promise.Prototype",
        "!doc": "Kills all tasks that use any of the resources given. Only motion API's' blocking call takes resources and can be killed. Use getBodyNames(\"Body\") to have the list of the available joint for your robot. It takes 1 argument(s): [resourceNames] - A vector of resource joint names It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setIdlePostureEnabled": {
        "!type": "fn(pChain: ?, pIsEnabled: ?) -> Promise.Prototype",
        "!doc": "Starts or stops idle posture management on a chain. Chain name can be \"Body\", \"Arms\", \"LArm\", \"RArm\", \"Legs\" or \"Head\". It takes 2 argument(s): [pChain] - Chain name. [pIsEnabled] - Enables / disables the chain. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "moveInit": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Initialize the move process. Check the robot pose and take a right posture. This is blocking called. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setTransforms": {
        "!type": "fn(names: ?, spaces: ?, transforms: ?, fractionMaxSpeed: ?, axisMask: ?) -> Promise.Prototype",
        "!doc": "Moves multiple end-effectors to the given position and orientation transforms. This is a non-blocking call. It takes 5 argument(s): [names] - The name or names of effector. [spaces] - The task frame or task frames {FRAME_TORSO = 0, FRAME_WORLD = 1, FRAME_ROBOT = 2}. [transforms] - Transform arrays [fractionMaxSpeed] - The fraction of maximum speed to use [axisMask] - Axis mask. True for axes that you wish to control. e.g. 7 for position only, 56 for rotation only and 63 for both It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "killAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Kills all tasks. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFootSteps": {
        "!type": "fn(legName: ?, footSteps: ?, timeList: ?, clearExisting: ?) -> Promise.Prototype",
        "!doc": "Makes Nao do foot step planner. This is a non-blocking call. It takes 4 argument(s): [legName] - name of the leg to move('LLeg'or 'RLeg') [footSteps] - [x, y, theta], [Position along X/Y, Orientation round Z axis] of the leg relative to the other Leg in [meters, meters, radians]. Must be less than [MaxStepX, MaxStepY, MaxStepTheta] [timeList] - time list of each foot step [clearExisting] - Clear existing foot steps. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getPushRecoveryEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Give the state of the push recovery. It returns a Promise which is either resolved with the given value (Return true is the push recovery is activated. ) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getBreathEnabled": {
        "!type": "fn(pChain: ?) -> Promise.Prototype",
        "!doc": "This function gets the status of breathing animation on a chain. Chain name can be \"Body\", \"Arms\", \"LArm\", \"RArm\", \"Legs\" or \"Head\". It takes 1 argument(s): [pChain] - Chain name. It returns a Promise which is either resolved with the given value (True if breathing animation is enabled on the chain.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getAngles": {
        "!type": "fn(names: ?, useSensors: ?) -> Promise.Prototype",
        "!doc": "Gets the angles of the joints It takes 2 argument(s): [names] - Names the joints, chains, \"Body\", \"JointActuators\", \"Joints\" or \"Actuators\". [useSensors] - If true, sensor angles will be returned It returns a Promise which is either resolved with the given value (Joint angles in radians.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setSmartStiffnessEnabled": {
        "!type": "fn(pEnable: ?) -> Promise.Prototype",
        "!doc": "Enable Smart Stiffness for all the joints (True by default), the update take one motion cycle for updating. The smart Stiffness is a gestion of joint maximum torque. More description is available on the red documentation of ALMotion module. It takes 1 argument(s): [pEnable] - Activate or disactivate the smart stiffness. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALAnimatedSpeech": {
      "getBodyLanguageMode": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Set the current body language mode. 3 modes exist: SPEAKINGMOVEMENT_MODE_DISABLED,SPEAKINGMOVEMENT_MODE_RANDOM and SPEAKINGMOVEMENT_MODE_CONTEXTUAL (see BodyLanguageMode enum for more details) It returns a Promise which is either resolved with the given value (The current body language mode.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setBodyLanguageMode": {
        "!type": "fn(bodyLanguageMode: ?) -> Promise.Prototype",
        "!doc": "Set the current body language mode. 3 modes exist: SPEAKINGMOVEMENT_MODE_DISABLED,SPEAKINGMOVEMENT_MODE_RANDOM and SPEAKINGMOVEMENT_MODE_CONTEXTUAL (see BodyLanguageMode enum for more details) It takes 1 argument(s): [bodyLanguageMode] - The choosen body language mode. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setBodyLanguageModeFromStr": {
        "!type": "fn(stringBodyLanguageMode: ?) -> Promise.Prototype",
        "!doc": "Set the current body language mode. 3 modes exist: \"disabled\", \"random\" and \"contextual\" (see BodyLanguageMode enum for more details) It takes 1 argument(s): [stringBodyLanguageMode] - The choosen body language mode. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "say": {
        "!type": "fn(text: ?) -> Promise.Prototype",
        "!doc": "Say the annotated text given in parameter and animate it with animations inserted in the text. The current Animated Speech configuration will be used. It takes 1 argument(s): [text] - text It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alanimatedspeech-api.html#ALAnimatedSpeechProxy::say__ssCR"
      },
      "getBodyLanguageModeToStr": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Set the current body language mode. 3 modes exist: \"disabled\", \"random\" and \"contextual\" (see BodyLanguageMode enum for more details) It returns a Promise which is either resolved with the given value (The current body language mode.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "addTagsToWords": {
        "!type": "fn(tagsToWords: ?) -> Promise.Prototype",
        "!doc": "Add some new links between tags and words. It takes 1 argument(s): [tagsToWords] - Map of tags to words. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALAnimationPlayer": {
      "reset": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Go back to the default ALAnimationPlayer's configuration. Only the \"Animation Library\" will be declared as an animation package and all the links between tags and animations dynamically added will be removed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alanimationplayer-api.html#ALAnimationPlayerProxy::reset"
      },
      "declarePathForTags": {
        "!type": "fn(path: ?) -> Promise.Prototype",
        "!doc": "Allow using animations contained in the specified path as tagged animations. It takes 1 argument(s): [path] - path It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alanimationplayer-api.html#ALAnimationPlayerProxy::declarePathForTags__ssCR"
      },
      "addTagForAnimations": {
        "!type": "fn(tagsToAnimations: ?) -> Promise.Prototype",
        "!doc": "Associates tags to animations. It takes 1 argument(s): [tagsToAnimations] - tagsToAnimations It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alanimationplayer-api.html#ALAnimationPlayerProxy::addTagForAnimations__TagForAnimationsCR"
      },
      "run": {
        "!type": "fn(path: ?) -> Promise.Prototype",
        "!doc": "Runs an animation. It takes 1 argument(s): [path] - path It returns a Promise which is either resolved with the given value (A future to cancel the animation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alanimationplayer-api.html#ALAnimationPlayerProxy::run__ssCR"
      },
      "runTag": {
        "!type": "fn(tag: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 1 argument(s): [tag] - tag It returns a Promise which is either resolved with the given value (A future to cancel the animation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alanimationplayer-api.html#ALAnimationPlayerProxy::runTag__ssCR"
      }
    },
    "ALColorBlobDetection": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getAutoExposure": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the status of the auto exposure option of the camera. It returns a Promise which is either resolved with the given value (false if deactivated, true if activated.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alcolorblobdetection-api.html#ALColorBlobDetectionProxy::getAutoExposure"
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCircle": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Retrieve the circle surrounding the blob. It returns a Promise which is either resolved with the given value (the outer circle of the found blob as a vector of 3 values: x, y, radius in relative coordinates in the image (i.e. between 0 and 1).For example in VGA (640x480), for a circle of 50 pixels in radius and a center located at (123, 71), this function would return [123/640, 71/480, 50/640].) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alcolorblobdetection-api.html#ALColorBlobDetectionProxy::getCircle"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(paused: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [paused] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(subscriberName: ?, framerate: ?) -> Promise.Prototype",
        "!doc": "Sets the extractor framerate for a chosen subscriber It takes 2 argument(s): [subscriberName] - Name of the subcriber [framerate] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setObjectProperties": {
        "!type": "fn(minSize: ?, span: ?, shape: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 3 argument(s): [minSize] - minSize [span] - span [shape] - shape It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alcolorblobdetection-api.html#ALColorBlobDetectionProxy::setObjectProperties__i.float.ss"
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setAutoExposure": {
        "!type": "fn(mode: ?) -> Promise.Prototype",
        "!doc": "Set the status of the auto exposure option of the camera. It takes 1 argument(s): [mode] - mode It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alcolorblobdetection-api.html#ALColorBlobDetectionProxy::setAutoExposure__b"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setColor": {
        "!type": "fn(R: ?, G: ?, B: ?, colorThres: ?) -> Promise.Prototype",
        "!doc": "Set the color of the blob to find (in RGB space). It takes 4 argument(s): [R] - R [G] - G [B] - B [colorThres] - colorThres It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alcolorblobdetection-api.html#ALColorBlobDetectionProxy::setColor__i.i.i.i"
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALSonar": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFilteredValues": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns a vector with rightand left filtered sonar values (in this order). Theses valuesare the distances to the nearest detected obstacle. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALLocalization": {
      "load": {
        "!type": "fn(pDirectory: ?) -> Promise.Prototype",
        "!doc": "Replaces the data of nodes in the default directory by those in a given directory, unloads the previous nodes and loads the new ones. By default, since the location of the robot is unknown, the current node is supposed to be the node with the lowest id. It takes 1 argument(s): [pDirectory] - pDirectory It returns a Promise which is either resolved with the given value (0 if no error occurred. Otherwise please refer toReturn codes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::load__ssCR"
      },
      "getFrame": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get a frame buffer. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isDataAvailable": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if there is a panorama loaded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::isDataAvailable"
      },
      "getDriftPercentages": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "clear": {
        "!type": "fn(pDirectory: ?) -> Promise.Prototype",
        "!doc": "Deletes the data of the nodes saved in a directory. If the directory is the default directory, the nodes are also unloaded. It takes 1 argument(s): [pDirectory] - pDirectory It returns a Promise which is either resolved with the given value (0 if no error occurred. Otherwise please refer toReturn codes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::clear__ssCR"
      },
      "getCurrentPanoramaDescriptor": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get some information about the current panorama. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "goToPosition": {
        "!type": "fn(theta: ?) -> Promise.Prototype",
        "!doc": "Go to the given position trying to perform a visual close loop with the image contained in current panorama at theta. It takes 1 argument(s): [theta] - theta It returns a Promise which is either resolved with the given value (0 if the robot finish the movement at the good position. Else refer toReturn codes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::goToPosition__floatCR"
      },
      "getRobotPosition": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "False by default. Define the relocalization process in case of non reliable odometry: It returns a Promise which is either resolved with the given value (the coordinates x, y, theta of the pose2D of the robot, computed by the localization.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::getRobotPosition__b"
      },
      "isRelocalizationRequired": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if the robot will need to perform a scan to localize. Else it means that goToHome will be performed using odometry (so the robot is confident in its current location).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::isRelocalizationRequired"
      },
      "isInGivenZone": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMessageFromErrorCode": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (theReturn codesmessage corresponding to the given error code int.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::getMessageFromErrorCode__iCR"
      },
      "goToHome": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Localizes if needed and moves the robot back to the place where was performedALLocalizationProxy::learnHome. Accuracy depends on the environment. It returns a Promise which is either resolved with the given value (0 if no error occurred. Otherwise please refer toReturn codes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::goToHome"
      },
      "getRobotOrientation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the estimated position in the current panorama. It returns a Promise which is either resolved with the given value ([EstimatedPosition, SuccessFlag, Confidence, OdometryOnly] wherepanoramaOriginToRobotAngleEstimationis the estimated angular position (in radians) between -Pi and Pi.SuccessFlagis set to false if a critical error occurred (for example if no image could be retrieved)Confidenceis a measurement of the confidence of the position estimationOdometryOnlyis set to true if the confidence is too low and the estimation relies on odometry only) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::getRobotOrientation__b"
      },
      "learnHome": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Learns the home node of the robot. It returns a Promise which is either resolved with the given value (0 if no error occurred. Otherwise please refer toReturn codes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::learnHome"
      },
      "save": {
        "!type": "fn(pDirectory: ?) -> Promise.Prototype",
        "!doc": "Saves the data in the default directory into a given directory. If the directory already exists, it is first emptied. If it does not, it is created. It takes 1 argument(s): [pDirectory] - pDirectory It returns a Promise which is either resolved with the given value (0 if no error occurred. Otherwise please refer toReturn codes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::save__ssCR"
      },
      "isInCurrentHome": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Is the robot in its home? It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "stopAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "The robot immediately drops all localization tasks and stops moving. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/allocalization-api.html#ALLocalizationProxy::stopAll"
      }
    },
    "ALUserSession": {
      "getSecondsSinceLastEncounter": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets the number seconds since the last encounter of a given UserSession ID with the robot. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (The number of seconds since the last encounter of the user with the robot. It corresponds to the number of seconds since the last closed session of the user. If the user has never encountered the robot, it returns -1. If it is the first time the user encounters the robots, it returns 0.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getSecondsSinceLastEncounter__iCC"
      },
      "getLastEncounterDate": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets the date of the last encounter of a given UserSession ID with the robot. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (The date of the last encounter of the user with the robot. It corresponds to date of the last closed session of the user. The format of the date is from posix_time:ptime (day+time) turned into a simple string. This date is an empty string if the user has never encountered the robot.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getLastEncounterDate__iCC"
      },
      "doUsersExist": {
        "!type": "fn(userIDs: ?) -> Promise.Prototype",
        "!doc": "Checks if UserSession IDs exist in database. It takes 1 argument(s): [userIDs] - userIDs It returns a Promise which is either resolved with the given value (True if all users exist, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::doUsersExist__std::list:i:CC"
      },
      "doesUserExist": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Checks if UserSession ID exist in database. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (True if the user exists, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::doesUserExist__iC"
      },
      "getUserList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets all UserSession IDs in the database. It returns a Promise which is either resolved with the given value (a list of the integer UserSession IDs.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getUserListC"
      },
      "getNumUsers": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the number of users in the database. It returns a Promise which is either resolved with the given value (the number of users.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getNumUsersC"
      },
      "getFocusedUser": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets which user has the robot focus. It returns a Promise which is either resolved with the given value (The UserSession ID of the focused user if there is one, -1 otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getFocusedUserC"
      },
      "getUserBindings": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets the sources a UserSession ID is bound to. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (A map of binding sources names and their bound ID.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getUserBindings__iCC"
      },
      "doesBindingExist": {
        "!type": "fn(bindingName: ?) -> Promise.Prototype",
        "!doc": "Queries if a particular binding has been applied to UserSession. It takes 1 argument(s): [bindingName] - bindingName It returns a Promise which is either resolved with the given value (True if a binding exists, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::doesBindingExist__ssCC"
      },
      "areUserSessionsOpen": {
        "!type": "fn(userIDs: ?) -> Promise.Prototype",
        "!doc": "Checks if UserSession IDs have an open session. It takes 1 argument(s): [userIDs] - userIDs It returns a Promise which is either resolved with the given value (True if all users have open sessions, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::areUserSessionsOpen__std::list:i:CC"
      },
      "getFirstEncounterDate": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets the date of the first encounter of a given UserSession ID with the robot. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (The date of the first encounter of the user with the robot. The format of the date is from posix_time:ptime (day+time) turned into a simple string. This date is an empty string if the user has never encountered the robot.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getFirstEncounterDate__iCC"
      },
      "getUserBinding": {
        "!type": "fn(userID: ?, bindingName: ?) -> Promise.Prototype",
        "!doc": "Gets the specific source a UserSession ID is bound to. It takes 2 argument(s): [userID] - userID [bindingName] - bindingName It returns a Promise which is either resolved with the given value (Bound ID for the specified user ID and binding source.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getUserBinding__iC.ssCC"
      },
      "findUsersWithBinding": {
        "!type": "fn(bindingName: ?, bindingValue: ?) -> Promise.Prototype",
        "!doc": "Gets the sources a User Session ID is bound to. It takes 2 argument(s): [bindingName] - bindingName [bindingValue] - bindingValue It returns a Promise which is either resolved with the given value (The int UserSession IDs of the users with the passed bindingValue.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::findUsersWithBinding__ssC.ssCC"
      },
      "getUsidFromPpid": {
        "!type": "fn(ppID: ?) -> Promise.Prototype",
        "!doc": "Gets the UserSession ID of a given PeoplePeople ID. It takes 1 argument(s): [ppID] - ppID It returns a Promise which is either resolved with the given value (the UserSession ID of the corresponding user if it exists, -1 otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getUsidFromPpid__iC"
      },
      "getPpidFromUsid": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets the PeoplePerception ID of a given UserSession ID. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (the PeoplePerception ID of the given user if it exists, -1 otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getPpidFromUsid__iC"
      },
      "getPermanentUserList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the list of permanent UserSession IDs. It returns a Promise which is either resolved with the given value (List of permanent UserSession IDs.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getPermanentUserListC"
      },
      "getBindingList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the list of bindings that have been applied to UserSession. It returns a Promise which is either resolved with the given value (the names of the bindings.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getBindingListC"
      },
      "getCurrentEncounterDate": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets the date of the current encounter of a given UserSession ID with the robot. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (The date of the current encounter of the user with the robot. The format of the date is from posix_time:ptime (day+time) turned into a simple string. This date is an empty string if the user does not have an open session.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getCurrentEncounterDate__iCC"
      },
      "isUserPermanent": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Checks if a given UserSession ID is permanent. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (True if the user is permanent, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::isUserPermanent__iC"
      },
      "areUsersPermanent": {
        "!type": "fn(userIDs: ?) -> Promise.Prototype",
        "!doc": "Checks if UserSession IDs are permanent. It takes 1 argument(s): [userIDs] - userIDs It returns a Promise which is either resolved with the given value (True if all the users are permanent, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::areUsersPermanent__std::list:i:CC"
      },
      "isUserSessionOpen": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Checks if a given UserSession ID has an open session. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (True if the user has an open session, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::isUserSessionOpen__iC"
      },
      "getOpenUserSessions": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets which users have an open session. It returns a Promise which is either resolved with the given value (the UserSession IDs of the users with an open session.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getOpenUserSessionsC"
      },
      "getUserCreationDate": {
        "!type": "fn(userID: ?) -> Promise.Prototype",
        "!doc": "Gets the date of the creation of a given UserSession ID. It takes 1 argument(s): [userID] - userID It returns a Promise which is either resolved with the given value (The date of the creation of the user. The format of the date is from posix_time:ptime (day+time) turned into a simple string.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alusersession-api.html#ALUserSession::getUserCreationDate__iCC"
      }
    },
    "ALTextToSpeech": {
      "getVolume": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current gain applied to the signal synthesized by the text to speech engine. The default value is 1.0. It returns a Promise which is either resolved with the given value (Volume [0 - 1]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::getVolume"
      },
      "locale": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the locale associated to the current language set on the robot. It returns a Promise which is either resolved with the given value (The locale associated to the current language.Example: 'en_US'See also:Supported languages,Supported languages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::locale"
      },
      "sayToFile": {
        "!type": "fn(stringToSay: ?, fileName: ?) -> Promise.Prototype",
        "!doc": "Works similarly toALTextToSpeechProxy::saybut the synthesized signal is recorded into the specified file instead of being sent to the robot's loudspeakers. The signal is encoded with a sample rate of 22050Hz (European languages) and 16000Hz (Asian languages), format S16_LE, 1 channel. It takes 2 argument(s): [stringToSay] - stringToSay [fileName] - fileName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::sayToFile__ssCR.ssCR"
      },
      "say": {
        "!type": "fn(stringToSay: ?) -> Promise.Prototype",
        "!doc": "Says the specified string of characters. It takes 1 argument(s): [stringToSay] - stringToSay It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::say__ssCR"
      },
      "setParameter": {
        "!type": "fn(parameter: ?, value: ?) -> Promise.Prototype",
        "!doc": "Sets parameters of the text to speech engine. It takes 2 argument(s): [parameter] - parameter [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::setParameter__ssCR.floatCR"
      },
      "getVoice": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the voice currently used by the text to speech engine. It returns a Promise which is either resolved with the given value (Name of the current voice) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::getVoice"
      },
      "showDictionary": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Nuance and Japanese only. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::showDictionary"
      },
      "stopAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "This method stops the current and all the pending tasks immediately. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::stopAll"
      },
      "getAvailableLanguages": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the list of the languages currently installed on the system. It returns a Promise which is either resolved with the given value (a list of languages.Example: ['French', 'Chinese', 'English', 'Japanese']A subset of the supported languages:ALTextToSpeechProxy::getSupportedLanguagesSee also:Supported languages,Supported languages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::getAvailableLanguages"
      },
      "getParameter": {
        "!type": "fn(parameter: ?) -> Promise.Prototype",
        "!doc": "Returns the value of one of the text to speech engine parameters. The available parameters are: \"pitchShift\", \"doubleVoice\",\"doubleVoiceLevel\" and \"doubleVoiceTimeShift\". Please refers toALTextToSpeechProxy::setParameterfor details about this parameters. It takes 1 argument(s): [parameter] - parameter It returns a Promise which is either resolved with the given value (Value of the specified parameter) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::getParameter__ssCR"
      },
      "setLanguageDefaultVoice": {
        "!type": "fn(language: ?, voice: ?) -> Promise.Prototype",
        "!doc": "Sets the voice to be used by default with a specified language. It takes 2 argument(s): [language] - language [voice] - voice It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::setLanguageDefaultVoice__ssCR.ssCR"
      },
      "addToDictionary": {
        "!type": "fn(word: ?, pronunciation: ?) -> Promise.Prototype",
        "!doc": "Nuance only. It takes 2 argument(s): [word] - word [pronunciation] - pronunciation It returns a Promise which is either resolved with the given value (true if succeeded otherwise false) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::addToDictionary__ssCR.ssCR"
      },
      "setVolume": {
        "!type": "fn(volume: ?) -> Promise.Prototype",
        "!doc": "Sets the current gain applied to the signal synthesized by the text to speech engine. The default value is 1.0. It takes 1 argument(s): [volume] - volume It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::setVolume__floatCR"
      },
      "setLanguage": {
        "!type": "fn(language: ?) -> Promise.Prototype",
        "!doc": "Sets the language used by the text to speech system for the current application. It takes 1 argument(s): [language] - language It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::setLanguage__ssCR"
      },
      "getSupportedLanguages": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the list of all supported languages. It returns a Promise which is either resolved with the given value (a list of languages.Example: ['French', 'Chinese', 'English', 'German', 'Italian', 'Japanese', 'Korean', 'Portuguese', 'Spanish']See also:Supported languages,Supported languages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::getSupportedLanguages"
      },
      "loadVoicePreference": {
        "!type": "fn(pPreferenceName: ?) -> Promise.Prototype",
        "!doc": "Loads a set of voice parameters defined in a xml file contained in the preferences folder.The name of the xml file must begin with ALTextToSpeech_Voice_ It takes 1 argument(s): [pPreferenceName] - Name of the voice preference. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getAvailableVoices": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the list of the voices currently installed on the system. Each voice name is given in English. It returns a Promise which is either resolved with the given value (Voices Installed) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::getAvailableVoices"
      },
      "setVoice": {
        "!type": "fn(voiceID: ?) -> Promise.Prototype",
        "!doc": "Changes the voice used by the text-to-speech engine. The voice identifier must belong to the installed voices, that can be listed using theALTextToSpeechProxy::getAvailableVoicesmethod. It takes 1 argument(s): [voiceID] - voiceID It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::setVoice__ssCR"
      },
      "reset": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Reset ALTextToSpeech to his default state. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "deleteFromDictionary": {
        "!type": "fn(word: ?) -> Promise.Prototype",
        "!doc": "Nuance only. It takes 1 argument(s): [word] - word It returns a Promise which is either resolved with the given value (true if succeeded otherwise false) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::deleteFromDictionary__ssCR"
      },
      "resetSpeed": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Reset the speed of the speech to the value stored in the parameter defaultVoiceSpeed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::resetSpeed"
      },
      "getLanguage": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the language currently used by the text to speech engine. It returns a Promise which is either resolved with the given value (a language name.Example: 'French'Could be one of the installed languages:ALTextToSpeechProxy::getAvailableLanguagesSee also:Supported languages,Supported languages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/altexttospeech-api.html#ALTextToSpeechProxy::getLanguage"
      }
    },
    "ALKnowledge": {
      "contains": {
        "!type": "fn(domain: ?, subject: ?, predicate: ?, object: ?) -> Promise.Prototype",
        "!doc": "Checks if the ontology contains the given triplet. It takes 4 argument(s): [domain] - domain [subject] - subject [predicate] - predicate [object] - object It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::contains__ssCR.ssCR.ssCR.ssCR"
      },
      "getPredicate": {
        "!type": "fn(domain: ?, subject: ?, object: ?) -> Promise.Prototype",
        "!doc": "Gets the vector of all predicates given the subject and the object. It takes 3 argument(s): [domain] - domain [subject] - subject [object] - object It returns a Promise which is either resolved with the given value (vector of all predicates (of the given domain) for which the triplet subject-predicate-object exists in the ontology.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::getPredicate__ssCR.ssCR.ssCR"
      },
      "update": {
        "!type": "fn(domain: ?, subject: ?, predicate: ?, object: ?) -> Promise.Prototype",
        "!doc": "Removes all triplets where the subject is subject and the predicate is predicate and add the triplet subject-predicate-object. It takes 4 argument(s): [domain] - domain [subject] - subject [predicate] - predicate [object] - object It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::update__ssCR.ssCR.ssCR.ssCR"
      },
      "remove": {
        "!type": "fn(domain: ?, subject: ?, predicate: ?, object: ?) -> Promise.Prototype",
        "!doc": "Removes the triplet given the subject, predicate and object. It takes 4 argument(s): [domain] - domain [subject] - subject [predicate] - predicate [object] - object It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::remove__ssCR.ssCR.ssCR.ssCR"
      },
      "getObject": {
        "!type": "fn(domain: ?, subject: ?, predicate: ?) -> Promise.Prototype",
        "!doc": "Gets the vector of all objects given the subject and the predicate. It takes 3 argument(s): [domain] - domain [subject] - subject [predicate] - predicate It returns a Promise which is either resolved with the given value (vector of all objects (of the given domain) for which the triplet subject-predicate-object exists in the ontology.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::getObject__ssCR.ssCR.ssCR"
      },
      "resetKnowledge": {
        "!type": "fn(domain: ?) -> Promise.Prototype",
        "!doc": "Removes all the triplets where the predicate is in the domain \"domain\". It takes 1 argument(s): [domain] - domain It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::resetKnowledge__ssCR"
      },
      "add": {
        "!type": "fn(domain: ?, subject: ?, predicate: ?, object: ?) -> Promise.Prototype",
        "!doc": "Adds a triplet to the ontology. It takes 4 argument(s): [domain] - domain [subject] - subject [predicate] - predicate [object] - object It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::add__ssCR.ssCR.ssCR.ssCR"
      },
      "getSubject": {
        "!type": "fn(domain: ?, predicate: ?, object: ?) -> Promise.Prototype",
        "!doc": "Gets the vector of all subjects given the predicate and the object. It takes 3 argument(s): [domain] - domain [predicate] - predicate [object] - object It returns a Promise which is either resolved with the given value (vector of all subjects for which the triplet subject-predicate-object exists in the ontology.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::getSubject__ssCR.ssCR.ssCR"
      },
      "query": {
        "!type": "fn(domain: ?, subject: ?, predicate: ?, object: ?) -> Promise.Prototype",
        "!doc": "Returns the list of values satisfying the query given in parameters. It takes 4 argument(s): [domain] - domain [subject] - subject [predicate] - predicate [object] - object It returns a Promise which is either resolved with the given value (A vector of values.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alknowledge-api.html#ALKnowledge::query__ssCR.ssCR.ssCR.ssCR"
      }
    },
    "ALDarknessDetection": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(paused: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [paused] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(subscriberName: ?, framerate: ?) -> Promise.Prototype",
        "!doc": "Sets the extractor framerate for a chosen subscriber It takes 2 argument(s): [subscriberName] - Name of the subcriber [framerate] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getDarknessThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Current value of the darkness threshold used for raising the eventDarknessDetection/DarknessDetected().) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/aldarknessdetection-api.html#ALDarknessDetectionProxy::getDarknessThreshold"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setDarknessThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Enables to change the value of the darkness threshold for raising the eventDarknessDetection/DarknessDetected(). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/aldarknessdetection-api.html#ALDarknessDetectionProxy::setDarknessThreshold__iCR"
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALResourceManager": {
      "isInGroup": {
        "!type": "fn(resourceGroupName: ?, resourceName: ?) -> Promise.Prototype",
        "!doc": "True if a resource is in another parent resource It takes 2 argument(s): [resourceGroupName] - resourceGroupName [resourceName] - resourceName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::isInGroup__ssCR.ssCR"
      },
      "releaseResource": {
        "!type": "fn(resourceName: ?, ownerName: ?) -> Promise.Prototype",
        "!doc": "Release resource It takes 2 argument(s): [resourceName] - Resource name [ownerName] - Existing owner name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "waitForOptionalResourcesTree": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Wait resource It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "checkStateResourceFree": {
        "!type": "fn(resourceName: ?) -> Promise.Prototype",
        "!doc": "Check if all the state resource in the list are free It takes 1 argument(s): [resourceName] - Resource name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "acquireResourcesTree": {
        "!type": "fn(resourceNameList: ?, moduleName: ?, callbackName: ?, timeoutSeconds: ?) -> Promise.Prototype",
        "!doc": "Wait and acquire the specified resource. Once acquired the callback is called if someone else want to take the resource. The callback takes only two parameters which are the resourcename and the current owner name. In the callback you can decide to release the resource by callingALResourceManagerProxy::releaseResourceIf timeoutSeconds is less than 0, an infinite wait is performed, if timeoutSeconds is zero the function is non-bloquing, else the function waits at most timeoutSeconds to acquire the resource, or throws if the resource is still not available. The function throws in case of error. It takes 4 argument(s): [resourceNameList] - resourceNameList [moduleName] - moduleName [callbackName] - callbackName [timeoutSeconds] - timeoutSeconds It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::acquireResourcesTree__std::vector:ss:CR.ssCR.ssCR.iCR"
      },
      "areResourcesOwnedBy": {
        "!type": "fn(resourceNameList: ?, ownerName: ?) -> Promise.Prototype",
        "!doc": "True if all the specified resources are owned by the owner It takes 2 argument(s): [resourceNameList] - resourceNameList [ownerName] - ownerName It returns a Promise which is either resolved with the given value (True if all the specify resources are owned by the owner) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::areResourcesOwnedBy__std::vector:ss:CR.ssCR"
      },
      "areResourcesFree": {
        "!type": "fn(resourceNames: ?) -> Promise.Prototype",
        "!doc": "True if resources free It takes 1 argument(s): [resourceNames] - resourceNames It returns a Promise which is either resolved with the given value (True if all the specified resources are free) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::areResourcesFree__std::vector:ss:CR"
      },
      "releaseResources": {
        "!type": "fn(resourceNames: ?, ownerName: ?) -> Promise.Prototype",
        "!doc": "Release the resources listed It takes 2 argument(s): [resourceNames] - resourceNames [ownerName] - ownerName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::releaseResources__std::vector:ss:CR.ssCR"
      },
      "isResourceFree": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (a bool indicating if the resource is free or not) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::isResourceFree__ssCR"
      },
      "ownersGet": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (the list of owners for each resources) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::ownersGet"
      },
      "deleteResource": {
        "!type": "fn(resourceName: ?) -> Promise.Prototype",
        "!doc": "Delete a resource It takes 1 argument(s): [resourceName] - resourceName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::deleteResource__ssCR"
      },
      "createResource": {
        "!type": "fn(resourceName: ?, parentResourceName: ?) -> Promise.Prototype",
        "!doc": "Create a resource It takes 2 argument(s): [resourceName] - resourceName [parentResourceName] - parentResourceName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::createResource__ssCR.ssCR"
      },
      "acquireResource": {
        "!type": "fn(resourceName: ?, moduleName: ?, callbackName: ?, timeoutSeconds: ?) -> Promise.Prototype",
        "!doc": "Wait and acquire the specified resource. Once acquired the callback is called if someone else want to take the resource. The callback takes only two parameters which are the resourcename and the current owner name. In the callback you can decide to release the resource by callingALResourceManagerProxy::releaseResourceIf timeoutSeconds is less than 0, an infinite wait is performed, if timeoutSeconds is zero the function is non-bloquing, else the function waits at most timeoutSeconds to acquire the resource, or throws if the resource is still not available. The function throws in case of error. It takes 4 argument(s): [resourceName] - resourceName [moduleName] - moduleName [callbackName] - callbackName [timeoutSeconds] - timeoutSeconds It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::acquireResource__ssCR.ssCR.ssCR.iCR"
      },
      "waitForResourcesTree": {
        "!type": "fn(resourceName: ?, moduleName: ?, callbackName: ?, timeoutSeconds: ?) -> Promise.Prototype",
        "!doc": "Wait for resource tree. Parent and children are not in conflict. Local function It takes 4 argument(s): [resourceName] - Resource name [moduleName] - Module name [callbackName] - callback name [timeoutSeconds] - Timeout in seconds It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResources": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (the full list of resources) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::getResources"
      },
      "createResourcesList": {
        "!type": "fn(resourceNameList: ?, strModule: ?) -> Promise.Prototype",
        "!doc": "Create the resources listed in pResourceNameList It takes 2 argument(s): [resourceNameList] - resourceNameList [strModule] - strModule It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::createResourcesList__std::vector:ss:CR.ssCR"
      },
      "waitForResource": {
        "!type": "fn(resourceName: ?, ownerName: ?, callbackName: ?, timeoutSeconds: ?) -> Promise.Prototype",
        "!doc": "Wait resource It takes 4 argument(s): [resourceName] - Resource name [ownerName] - Module name [callbackName] - callback name [timeoutSeconds] - Timeout in seconds It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "enableStateResource": {
        "!type": "fn(resourceName: ?, enabled: ?) -> Promise.Prototype",
        "!doc": "Enable or disable a state resource It takes 2 argument(s): [resourceName] - resourceName [enabled] - enabled It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alresourcemanager-api.html#ALResourceManagerProxy::enableStateResource__ssCR.bCR"
      }
    },
    "ALRecharge": {
      "lookForStation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Tries to locate the charging station. This is a blocking call. It returns a Promise which is either resolved with the given value ([int error_code, [float x, float y, float theta]] where error_code returns the error of the call (seeError code). It is 0 if the charging station has been successfully localized. his position is then given inFRAME_WORLDin the second array (x,y,theta).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::lookForStation"
      },
      "getMaxNumberOfTries": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (returns the number of attempts authorized duringALRechargeProxy::moveInFrontOfStationbefore failing.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::getMaxNumberOfTries"
      },
      "getStationPosition": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the current charging pose2D used by the recharge module. It returns a Promise which is either resolved with the given value (Pose2D (x, y, theta) of the charging station inFRAME_WORLD) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::getStationPosition"
      },
      "moveInFrontOfStation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "MakesPeppergo in front of his charging station. This is a blocking call. It returns a Promise which is either resolved with the given value (anError codecorresponding to the situation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::moveInFrontOfStation"
      },
      "getStatus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the current Status of the recharge manager module. It returns a Promise which is either resolved with the given value (Int representing theStatus.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::getStatus"
      },
      "adjustDockingPosition": {
        "!type": "fn(positions: ?) -> Promise.Prototype",
        "!doc": "MakesPeppermove onto his charging station to ensure working connection. This is a blocking call. It takes 1 argument(s): [positions] - positions It returns a Promise which is either resolved with the given value (anError codecorresponding to the situation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::adjustDockingPosition__std::vector:std::vector:float::"
      },
      "getUseTrackerSearcher": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if theALRechargeProxy::lookForStationuses the whole body tracker animation fromALTrackerduring search and else returns false.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::getUseTrackerSearcher"
      },
      "subscribe": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setUseTrackerSearcher": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Sets default or custom animation to be used upon call ofALRechargeProxy::lookForStation. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::setUseTrackerSearcher__b"
      },
      "unsubscribe": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMaxNumberOfTries": {
        "!type": "fn(number: ?) -> Promise.Prototype",
        "!doc": "Sets the number of attempts authorized duringALRechargeProxy::moveInFrontOfStationbefore returning failure error code. It takes 1 argument(s): [number] - number It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::setMaxNumberOfTries__i"
      },
      "goToStation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "MakesPeppergo onto his charging station. It returns a Promise which is either resolved with the given value (a future that will be updated with the finalError code.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::goToStation"
      },
      "leaveStation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "IfPepperis on the charging station, this method makesPeppergo just in front of it. It returns a Promise which is either resolved with the given value (anError codecorresponding to the situation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::leaveStation"
      },
      "dockOnStation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "MakesPepperdock onto his charging station. This is a blocking call. It returns a Promise which is either resolved with the given value (anError codecorrespondig to the situation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/motion/alrecharge-api.html#ALRechargeProxy::dockOnStation"
      },
      "stopAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALSensors": {
      "run": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Monitors sensors. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::run"
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::getMyPeriod__ssCR"
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::getCurrentPrecision"
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::getOutputNames"
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::getCurrentPeriod"
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - name [period] - period [precision] - precision It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::subscribe__ssCR.iCR.floatCR"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::unsubscribe__ssCR"
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::getSubscribersInfo"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::getMyPrecision__ssCR"
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - name [period] - period It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::updatePeriod__ssCR.iCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - name [precision] - precision It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/alsensors-api.html#ALSensorsProxy::updatePrecision__ssCR.floatCR"
      }
    },
    "ALAudioPlayer": {
      "playFileFromPosition": {
        "!type": "fn(fileName: ?, position: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 2 argument(s): [fileName] - fileName [position] - position It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::playFileFromPosition__ssCR.floatCR"
      },
      "getVolume": {
        "!type": "fn(taskId: ?) -> Promise.Prototype",
        "!doc": "Returns the volume level at which the specified task should be played. This volume is independent of the master volume set withALAudioPlayerProxy::setMasterVolume. This task dependent volume can be set by usingALAudioPlayerProxy::setVolume. It takes 1 argument(s): [taskId] - taskId It returns a Promise which is either resolved with the given value (Volume - [0.0 - 1.0]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getVolume__iCR"
      },
      "getFileLength": {
        "!type": "fn(taskId: ?) -> Promise.Prototype",
        "!doc": "Returns the length in second of the file that is currently played. It takes 1 argument(s): [taskId] - taskId It returns a Promise which is either resolved with the given value (Length of the file in seconds) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getFileLength__iCR"
      },
      "unloadSoundSet": {
        "!type": "fn(setName: ?) -> Promise.Prototype",
        "!doc": "Unloads a soundset. It takes 1 argument(s): [setName] - setName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::unloadSoundSet__ssCR"
      },
      "playWebStream": {
        "!type": "fn(streamName: ?, volume: ?, pan: ?) -> Promise.Prototype",
        "!doc": "Starts the playback of a web audio stream. It takes 3 argument(s): [streamName] - streamName [volume] - volume [pan] - pan It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::playWebStream__ssCR.floatCR.floatCR"
      },
      "setPanorama": {
        "!type": "fn(pan: ?) -> Promise.Prototype",
        "!doc": "Sets the stereo panorama for all the playback tasks handled byALAudioPlayer. It takes 1 argument(s): [pan] - pan It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::setPanorama__floatCR"
      },
      "unloadAllFiles": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Unloads all the files already loaded. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::unloadAllFiles"
      },
      "getInstalledSoundSetsList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the list of the installed soundsets. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getInstalledSoundSetsList"
      },
      "loadSoundSet": {
        "!type": "fn(setName: ?) -> Promise.Prototype",
        "!doc": "Loads a soundset. It takes 1 argument(s): [setName] - setName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::loadSoundSet__ssCR"
      },
      "getMasterVolume": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the master volume used byALAudioPlayerfor playback. This volume can be set by usingALAudioPlayerProxy::setMasterVolume. This volume is independent of the system volume that can be set throughALAudioDevice. It returns a Promise which is either resolved with the given value (Volume [0.0 - 1.0]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getMasterVolume"
      },
      "playFileInLoop": {
        "!type": "fn(fileName: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 1 argument(s): [fileName] - fileName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::playFileInLoop__ssCR"
      },
      "stopAll": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Stops all the files that are currently being played. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::stopAll"
      },
      "pause": {
        "!type": "fn(taskId: ?) -> Promise.Prototype",
        "!doc": "Pause the playback of the specified task. The pause can be resume by callingALAudioPlayerProxy::play. It takes 1 argument(s): [taskId] - taskId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::pause__iCR"
      },
      "goTo": {
        "!type": "fn(taskId: ?, position: ?) -> Promise.Prototype",
        "!doc": "Jumps to a given position in second in the specified file. It takes 2 argument(s): [taskId] - taskId [position] - position It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::goTo__iCR.floatCR"
      },
      "getCurrentPosition": {
        "!type": "fn(taskId: ?) -> Promise.Prototype",
        "!doc": "Returns the position in seconds in the file currently played. The Id of the playing task will be returned when calling a play method (eg.ALAudioPlayerProxy::play) in a non-blocking manner. See below for an example in Python. It takes 1 argument(s): [taskId] - taskId It returns a Promise which is either resolved with the given value (Current position in seconds) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getCurrentPosition__iCR"
      },
      "setMasterVolume": {
        "!type": "fn(volume: ?) -> Promise.Prototype",
        "!doc": "Sets the master volume used byALAudioPlayerfor playback. This volume is independent of the system volume that can be set throughALAudioDevice. It takes 1 argument(s): [volume] - volume It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::setMasterVolume__floatCR"
      },
      "getSoundSetFileNames": {
        "!type": "fn(setName: ?) -> Promise.Prototype",
        "!doc": "Returns an array containing the filenames of the corresponding soundset. It takes 1 argument(s): [setName] - setName It returns a Promise which is either resolved with the given value (Array of filenames) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getSoundSetFileNames__ssC"
      },
      "loadFile": {
        "!type": "fn(fileName: ?) -> Promise.Prototype",
        "!doc": "Preloads a file but does not play it yet. Preloading a file is a way to reduce the time necessary to actually start the playback when a \"play\" function is called. The playback of a loaded file can be started by callingALAudioPlayerProxy::play. It takes 1 argument(s): [fileName] - fileName It returns a Promise which is either resolved with the given value (Id of the task handling the playing of the file) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::loadFile__ssCR"
      },
      "isSoundSetLoaded": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Tells if a given soundset is already loaded. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::isSoundSetLoaded__ssCR"
      },
      "disablePitch": {
        "!type": "fn(id: ?) -> Promise.Prototype",
        "!doc": "Remove pitch on the current file It takes 1 argument(s): [id] - Id returned by the loadFile function It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isSoundSetFileInstalled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Tells if a sound is present in a given soundset. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::isSoundSetFileInstalled__ssCR.ssCR"
      },
      "setVolume": {
        "!type": "fn(taskId: ?, volume: ?) -> Promise.Prototype",
        "!doc": "Sets the volume level at which the specified task should be played. This volume is independent of the master volume set withALAudioPlayerProxy::setMasterVolume. It takes 2 argument(s): [taskId] - taskId [volume] - volume It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::setVolume__iCR.floatCR"
      },
      "play": {
        "!type": "fn(taskId: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 1 argument(s): [taskId] - taskId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::play__iCR"
      },
      "getLoadedSoundSetsList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns an array containing the currently loaded soundsets. It returns a Promise which is either resolved with the given value (Array of loaded soundsets) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getLoadedSoundSetsList"
      },
      "playFile": {
        "!type": "fn(fileName: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 1 argument(s): [fileName] - fileName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::playFile__ssCR"
      },
      "unloadFile": {
        "!type": "fn(taskId: ?) -> Promise.Prototype",
        "!doc": "Unloads a file previously loaded withALAudioPlayerProxy::loadFile. It takes 1 argument(s): [taskId] - taskId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::unloadFile__iCR"
      },
      "playSine": {
        "!type": "fn(frequence: ?, gain: ?, pan: ?, duration: ?) -> Promise.Prototype",
        "!doc": "Play a sine wave which the specified characteristics. It takes 4 argument(s): [frequence] - frequence [gain] - gain [pan] - pan [duration] - duration It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::playSine__iCR.iCR.iCR.floatCR"
      },
      "isSoundSetInstalled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Tells if a soundset is installed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::isSoundSetInstalled__ssCR"
      },
      "playInLoop": {
        "!type": "fn(taskId: ?) -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It takes 1 argument(s): [taskId] - taskId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::playInLoop__iCR"
      },
      "getLoadedFilesIds": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns an array containing the task Ids corresponding to the currently loaded files. File can be loaded usingALAudioPlayerProxy::loadFile. It returns a Promise which is either resolved with the given value (Array of task Ids) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getLoadedFilesIds"
      },
      "getLoadedFilesNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns an array containing the filenames (absolute paths) of the currently loaded files. File can be loaded usingALAudioPlayerProxy::loadFile. It returns a Promise which is either resolved with the given value (Array of filenames) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::getLoadedFilesNames"
      },
      "setPitch": {
        "!type": "fn(id: ?, level: ?) -> Promise.Prototype",
        "!doc": "Set a pith on the current playing file It takes 2 argument(s): [id] - Id returned by the loadFile function [level] - Pitch shifting to apply It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "playSoundSetFile": {
        "!type": "fn(fileName: ?) -> Promise.Prototype",
        "!doc": "There are 3 overloads of this function: It takes 1 argument(s): [fileName] - fileName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alaudioplayer-api.html#ALAudioPlayerProxy::playSoundSetFile__ssCR"
      }
    },
    "ALVisionRecognition": {
      "clearCurrentDatabase": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Clear the current database. Warning: all files in the database folder will be deleted. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::clearCurrentDatabase"
      },
      "setParam": {
        "!type": "fn(paramName: ?, paramValue: ?) -> Promise.Prototype",
        "!doc": "Set vision recognition parameters (deprecated in 1.22) It takes 2 argument(s): [paramName] - Name of the parameter to be changed. Only \"resolution\" can be used. [paramValue] - Value of the resolution as an integer: 0(QQVGA) 1(QVGA) 2(VGA) It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "changeDatabase": {
        "!type": "fn(databasePath: ?, databaseName: ?) -> Promise.Prototype",
        "!doc": "By default, databases are located on the robot in \"/home/nao/naoqi/.local/share/naoqi/vision/visionrecognition/\" folder. The default database name is \"current\". It takes 2 argument(s): [databasePath] - databasePath [databaseName] - databaseName It returns a Promise which is either resolved with the given value (true if success.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::changeDatabase__ssCR.ssCR"
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSize": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the size of the current database, i.e. number of objects stored in the database. It returns a Promise which is either resolved with the given value (Number of objects in the current database.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::getSize"
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getParam": {
        "!type": "fn(paramName: ?) -> Promise.Prototype",
        "!doc": "Get vision recognition parameters. Available parameters are: It takes 1 argument(s): [paramName] - paramName It returns a Promise which is either resolved with the given value (Value of the parameter as a string.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::getParam__ssCR"
      },
      "getDefaultDatabaseName": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the default database name. It returns a Promise which is either resolved with the given value (Default database name.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "detectFromFile": {
        "!type": "fn(filename: ?) -> Promise.Prototype",
        "!doc": "Search for known objects in the given image file. It takes 1 argument(s): [filename] - filename It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::detectFromFile__ssCR"
      },
      "pause": {
        "!type": "fn(paused: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [paused] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(subscriberName: ?, framerate: ?) -> Promise.Prototype",
        "!doc": "Sets the extractor framerate for a chosen subscriber It takes 2 argument(s): [subscriberName] - Name of the subcriber [framerate] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getDefaultDatabaseDirectory": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the default directory used for databases storage. It returns a Promise which is either resolved with the given value (Default directory used for databases storage.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMaxOutObjs": {
        "!type": "fn(iMaxOutObjs: ?) -> Promise.Prototype",
        "!doc": "Set the maximal number of detected objects for each detection. It takes 1 argument(s): [iMaxOutObjs] - iMaxOutObjs It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::setMaxOutObjs__i"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMaxOutObjs": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the maximal number of detected objects for each detection. It returns a Promise which is either resolved with the given value (Number of maximal objects to be detected.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::getMaxOutObjs"
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "learnFromFile": {
        "!type": "fn(image: ?, name: ?, tags: ?, isWholeImage: ?, forced: ?) -> Promise.Prototype",
        "!doc": "Load the image from the given filename and learn it with given information about name, tags, boundary. It takes 5 argument(s): [image] - image [name] - name [tags] - tags [isWholeImage] - isWholeImage [forced] - forced It returns a Promise which is either resolved with the given value (true if success, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisionrecognition-api.html#ALVisionRecognitionProxy::learnFromFile__ssCR.ssCR.std::vector:ss:CR.b.b"
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "sendDatabase": {
        "!type": "fn(name: ?, file: ?) -> Promise.Prototype",
        "!doc": "Upload a zipped database to the robot. It takes 2 argument(s): [name] - Database name. [file] - Archive (ZIP) containing the database file. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALPreferenceManager": {
      "setValue": {
        "!type": "fn(domain: ?, name: ?, value: ?) -> Promise.Prototype",
        "!doc": "Stores a preference. It takes 3 argument(s): [domain] - domain [name] - name [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::setValue__ssCR.ssCR.AL::ALValueCR"
      },
      "getValueList": {
        "!type": "fn(domain: ?) -> Promise.Prototype",
        "!doc": "Retrieves all the preferences associated to a domain. It takes 1 argument(s): [domain] - domain It returns a Promise which is either resolved with the given value (A list containing couples (list of size 2) of preference names and values (example: [ [\"/voice/pitch\", \"60\"], [\"/voice/speed\", \"20\"] ]).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::getValueList__ssCR"
      },
      "removeDomainValues": {
        "!type": "fn(domain: ?) -> Promise.Prototype",
        "!doc": "Remove all the preferences associated to a domain. It takes 1 argument(s): [domain] - domain It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::removeDomainValues__ssCR"
      },
      "update": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Synchronizes local preferences with preferences stored on a server. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::update"
      },
      "getValue": {
        "!type": "fn(domain: ?, name: ?) -> Promise.Prototype",
        "!doc": "Retrieves the value of a preference from its domain and name. It takes 2 argument(s): [domain] - domain [name] - name It returns a Promise which is either resolved with the given value (The value of the preference.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::getValue__ssCR.ssCR"
      },
      "importPrefFile": {
        "!type": "fn(domain: ?, applicationName: ?, filename: ?) -> Promise.Prototype",
        "!doc": "Imports an XML Preference files into the preference system. It takes 3 argument(s): [domain] - domain [applicationName] - applicationName [filename] - filename It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::importPrefFile__ssCR.ssCR.ssCR.b"
      },
      "removeValue": {
        "!type": "fn(domain: ?, name: ?) -> Promise.Prototype",
        "!doc": "Removes a preference. It takes 2 argument(s): [domain] - domain [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::removeValue__ssCR.ssCR"
      },
      "setValues": {
        "!type": "fn(values: ?) -> Promise.Prototype",
        "!doc": "Add many values at once. It takes 1 argument(s): [values] - A map (domain as index) of map (setting name as index) of values. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getDomainList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Retrieves the list of defined preference domains. It returns a Promise which is either resolved with the given value (An array of domain names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alpreferencemanager-api.html#ALPreferenceManagerProxy::getDomainList"
      }
    },
    "ALConnectionManager": {
      "tetheringPassphrase": {
        "!type": "fn(technology: ?) -> Promise.Prototype",
        "!doc": "Returns the passphrase used for the tethering mode. It takes 1 argument(s): [technology] - technology It returns a Promise which is either resolved with the given value (Returns the passphrase used for the tethering mode.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::tetheringPassphrase__ssCR"
      },
      "disconnect": {
        "!type": "fn(serviceId: ?) -> Promise.Prototype",
        "!doc": "Disconnects from the service. It takes 1 argument(s): [serviceId] - serviceId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::disconnect__ssCR"
      },
      "forget": {
        "!type": "fn(serviceId: ?) -> Promise.Prototype",
        "!doc": "Removes a favorite service. Requests the given serviceId to forget association information. This will set the favorite and auto-connect boolean to false. It takes 1 argument(s): [serviceId] - serviceId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::forget__ssCR"
      },
      "service": {
        "!type": "fn(serviceId: ?) -> Promise.Prototype",
        "!doc": "Returns the properties of a given service identifier, the NetworkInfo is represented as ALValue:ALValue representation of NetworkInfo. It takes 1 argument(s): [serviceId] - serviceId It returns a Promise which is either resolved with the given value (the properties of the given service identifier.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::service__ssCR"
      },
      "scan": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "There are two overloads of this function: It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::scan"
      },
      "disableTethering": {
        "!type": "fn(technology: ?) -> Promise.Prototype",
        "!doc": "Disables the Tethering mode. It takes 1 argument(s): [technology] - technology It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::disableTethering__ssCR"
      },
      "country": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Returns the country code currently in use for wireless regulatory.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::country"
      },
      "interfaces": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Warning It returns a Promise which is either resolved with the given value (Returns a list of pairs: interface name, MAC address.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::interfaces"
      },
      "countries": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Returns an std::vector<std::string> of known country codes as defined in ISO-3166-1.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::countries"
      },
      "enableTethering": {
        "!type": "fn(technology: ?) -> Promise.Prototype",
        "!doc": "Creates a Network Access Point on a given technology and share Internet connection if any. For WiFi technology you have to set the Name and the Passphrase before. It takes 1 argument(s): [technology] - technology It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::enableTethering__ssCR"
      },
      "tetheringName": {
        "!type": "fn(technology: ?) -> Promise.Prototype",
        "!doc": "Returns the service name used for the tethering mode. It takes 1 argument(s): [technology] - technology It returns a Promise which is either resolved with the given value (Returns the service name used for the tethering mode.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::tetheringName__ssCR"
      },
      "state": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the global state of the network connectivity. Possible values are: It returns a Promise which is either resolved with the given value (The global state of the connection manager.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::state"
      },
      "connect": {
        "!type": "fn(serviceId: ?) -> Promise.Prototype",
        "!doc": "Connects to a network service. It takes 1 argument(s): [serviceId] - serviceId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::connect__ssCR"
      },
      "setServiceInput": {
        "!type": "fn(input: ?) -> Promise.Prototype",
        "!doc": "Provides the connection manager module with the inputs required to finish a pending connection. This method must be called when receiving the NetworkServiceInputRequired event. It takes 1 argument(s): [input] - input It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::setServiceInput__AL::ALValueCR"
      },
      "services": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the list of all services with their properties. It might be useful to call theALConnectionManagerProxy::scanmethod before. It returns a Promise which is either resolved with the given value (An array of NetworkInfo contained in an ALValue.ALValue NetworkInfo.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::services"
      },
      "setCountry": {
        "!type": "fn(country: ?) -> Promise.Prototype",
        "!doc": "ALError when the country code is not known. It takes 1 argument(s): [country] - country It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::setCountry__ssCR"
      },
      "technologies": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns an array of string representing the available technologies, possible values are: It returns a Promise which is either resolved with the given value (A list of available technologies.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::technologies"
      },
      "setServiceConfiguration": {
        "!type": "fn(serviceId: ?) -> Promise.Prototype",
        "!doc": "Requests to apply static service configuration. The following properties are available for static settings. It takes 1 argument(s): [serviceId] - serviceId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::setServiceConfiguration__AL::ALValueCR"
      },
      "getTetheringEnable": {
        "!type": "fn(technology: ?) -> Promise.Prototype",
        "!doc": "A boolean, true if Tethering mode is enabled false instead. It takes 1 argument(s): [technology] - technology It returns a Promise which is either resolved with the given value (A boolean, true if Tethering mode is enabled false instead.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/connectionmanager/alconnectionmanager-api.html#ALConnectionManagerProxy::getTetheringEnable__ssCR"
      }
    },
    "ALSegmentation3D": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isBlobTrackingEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if blob tracking is running, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::isBlobTrackingEnabled"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(value: ?) -> Promise.Prototype",
        "!doc": "Sets extractor framerate It takes 1 argument(s): [value] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getVerticalOffset": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (The current value of the VerticalOffset (in meters). The default value is -0.2m. A negative value means that the offset will be substracted to the position of TopOfBlob. See definition of VerticalOffset in sectionBlob tracking.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::getVerticalOffset"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getBlobTrackingDistance": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (The current value of BlobTrackingDistance (in meters). See definition of BlobTrackingDistance in sectionBlob tracking.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::getBlobTrackingDistance"
      },
      "setDeltaDepthThreshold": {
        "!type": "fn(threshold: ?) -> Promise.Prototype",
        "!doc": "Sets the value of DepthThreshold (in meters) used for the segmentation. See definition of DepthThreshold in sectionSegmentation. It takes 1 argument(s): [threshold] - threshold It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::setDeltaDepthThreshold__floatCR"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getDeltaDepthThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (The current value of DepthThreshold (in meters) for the segmentation. The default value is 0.05m. See definition of DepthThreshold in sectionSegmentation.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::getDeltaDepthThreshold"
      },
      "setBlobTrackingDistance": {
        "!type": "fn(distance: ?) -> Promise.Prototype",
        "!doc": "Sets the value of BlobTrackingDistance. See definition of BlobTrackingDistance in sectionBlob tracking. It takes 1 argument(s): [distance] - distance It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::setBlobTrackingDistance__floatCR"
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getTopOfBlob": {
        "!type": "fn(dist: ?, frame: ?, applyVerticalOffset: ?) -> Promise.Prototype",
        "!doc": "This function is like a \"one-shot\" version of theBlob tracking It takes 3 argument(s): [dist] - dist [frame] - frame [applyVerticalOffset] - applyVerticalOffset It returns a Promise which is either resolved with the given value (If frame equals -1, result = [xAngle, yAngle, distBlob] where [xAngle,yAngle] are the angular coordinates in the image and distBlob is the real distance of the blob with respect ot the camera. If frame equals 0,1 or 2, result = [x, y, z] where [x,y,z] are the coordinates in the corresponding frame.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::getTopOfBlob__floatCR.iCR.bCR"
      },
      "setVerticalOffset": {
        "!type": "fn(threshold: ?) -> Promise.Prototype",
        "!doc": "Sets the value of VerticalOffset. See definition of VerticalOffset in sectionBlob tracking. It takes 1 argument(s): [threshold] - threshold It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::setVerticalOffset__floatCR"
      },
      "setBlobTrackingEnabled": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Turns on or off the blob tracking. It takes 1 argument(s): [status] - status It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alsegmentation3D-api.html#ALSegmentation3DProxy::setBlobTrackingEnabled__bCR"
      }
    },
    "ALRedBallDetection": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALSystem": {
      "robotName": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get robot name. For further details, see:My robotorMy robot. It returns a Promise which is either resolved with the given value (the robot name) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::robotName"
      },
      "upgrade": {
        "!type": "fn(imageurl: ?, checksum: ?) -> Promise.Prototype",
        "!doc": "Upgrade the system image. It takes 2 argument(s): [imageurl] - imageurl [checksum] - checksum It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::upgrade__ssCR.ssCR"
      },
      "setRobotName": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Set robot name. This will raiseALSystem/RobotNameChanged(). It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value (True if successful, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::setRobotName__ssCR"
      },
      "factoryReset": {
        "!type": "fn(imageurl: ?, checksum: ?) -> Promise.Prototype",
        "!doc": "Update the system image, and erase all the user data. It takes 2 argument(s): [imageurl] - imageurl [checksum] - checksum It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::factoryReset__ssCR.ssCR"
      },
      "freeMemory": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Amount of available memory in heap. It returns a Promise which is either resolved with the given value (Number of kb free on the heap.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::freeMemory"
      },
      "totalMemory": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Amount of total memory in heap. It returns a Promise which is either resolved with the given value (Number of total kb on the heap.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::totalMemory"
      },
      "reboot": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Reboot the robot after going to safety position usingALMotionProxy::rest. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::reboot"
      },
      "appBackupInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the backup information of applications It returns a Promise which is either resolved with the given value (A vector with all application backup infos) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setRobotIcon": {
        "!type": "fn(imageFile: ?) -> Promise.Prototype",
        "!doc": "Set current robot icon It takes 1 argument(s): [imageFile] - Image file to use as a robot icon It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "systemVersion": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "GetNAOqi OSversion currently run by the robot. It returns a Promise which is either resolved with the given value (the version ofNAOqi OS) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::systemVersion"
      },
      "previousSystemVersion": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Previous system version before software update (empty if this is not the 1st boot after a software update). It returns a Promise which is either resolved with the given value (Previous system version before software update.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::previousSystemVersion"
      },
      "shutdown": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Shut down the robot after going to safety position usingALMotionProxy::rest. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::shutdown"
      },
      "diskFree": {
        "!type": "fn(all: ?) -> Promise.Prototype",
        "!doc": "Display free disk space. It takes 1 argument(s): [all] - all It returns a Promise which is either resolved with the given value (A vector containing all information about thePartitionInfo.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::diskFree__b"
      },
      "timezone": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get timezone currently used by the robot. It returns a Promise which is either resolved with the given value (Current timezone.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::timezone"
      },
      "robotIcon": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the content of the robot icon file. It returns a Promise which is either resolved with the given value (a buffer containing the robot icon) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::robotIcon"
      },
      "systemInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Running system version It returns a Promise which is either resolved with the given value (information about the system version) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setTimezone": {
        "!type": "fn(timezone: ?) -> Promise.Prototype",
        "!doc": "Set timezone. It takes 1 argument(s): [timezone] - timezone It returns a Promise which is either resolved with the given value (True if successful, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::setTimezone__ssCR"
      },
      "changePassword": {
        "!type": "fn(old: ?, new: ?) -> Promise.Prototype",
        "!doc": "Change the user password on the robot. This password is required to login into system services such as: webpage, ssh, and ftp. It takes 2 argument(s): [old] - old [new] - new It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alsystem-api.html#ALSystemProxy::changePassword__ssCR.ssCR"
      }
    },
    "ALSittingPeopleDetection": {
      "setSittingThreshold": {
        "!type": "fn(threshold: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [threshold] - threshold It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alsittingpeopledetection-api.html#ALSittingPeopleDetectionProxy::setSittingThreshold__floatCR"
      },
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSittingThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the threshold used to distinguish between sitting and standing people. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alsittingpeopledetection-api.html#ALSittingPeopleDetectionProxy::getSittingThreshold"
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALDiagnosis": {
      "isNotificationEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get notification status. Returns true if notification is active. It returns a Promise which is either resolved with the given value (Return true if notification is active.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/diagnosis/aldiagnosis-api.html#ALDiagnosisProxy::isNotificationEnabled"
      },
      "getDiagnosisStatus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the actual state of the active and passive diagnosis. Only the highest level of failure is returned. It returns a Promise which is either resolved with the given value (An ALValue with the summary of active and passive diagnosis result with the following form:[ intLevel of failure severity, [AL::ALValueThe list of device in failure] ]Where:Level of failure severityis 0 (NEGLIGIBLE), 1 (SERIOUS) or 2 (CRITICAL).See:Diagnosis key list,Diagnosis key list.The list of device in failureis a chain name or a sensor name.See:Chains,Actuator & Sensor list,Chains,Actuator & Sensor list.Example: [1, [\"LArm\", \"Sonar\"]]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/diagnosis/aldiagnosis-api.html#ALDiagnosisProxy::getDiagnosisStatus"
      },
      "getActiveDiagnosis": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the actual state of the active diagnosis. Only the highest level of failure is returned. It returns a Promise which is either resolved with the given value (An ALValue with the actual active diagnosis result with the following form:[ intLevel of failure severity, [AL::ALValueThe list of device in failure] ]Where:Level of failure severityis 0 (NEGLIGIBLE), 1 (SERIOUS) or 2 (CRITICAL).See:Diagnosis key list,Diagnosis key list.The list of device in failureis a chain name or a sensor name.See:Chains,Actuator & Sensor list,Chains,Actuator & Sensor list.Example: [1, [\"LArm\", \"Sonar\"]]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/diagnosis/aldiagnosis-api.html#ALDiagnosisProxy::getActiveDiagnosis"
      },
      "getPassiveDiagnosis": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the actual state of the passive diagnosis. Only the highest level of failure is returned. It returns a Promise which is either resolved with the given value (An ALValue containing the actual passive diagnosis result with the following form:[ intLevel of failure severity, [AL::ALValueThe list of device in failure] ]Where:Level of failure severityis 0 (NEGLIGIBLE), 1 (SERIOUS) or 2 (CRITICAL).See:Diagnosis key list,Diagnosis key list.The list of device in failureis a chain name or a sensor name.See:Chains,Actuator & Sensor list,Chains,Actuator & Sensor list.Example: [1, [\"LArm\", \"Sonar\"]]) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/diagnosis/aldiagnosis-api.html#ALDiagnosisProxy::getPassiveDiagnosis"
      },
      "setEnableNotification": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enable / Disable passive diagnosis notification. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/diagnosis/aldiagnosis-api.html#ALDiagnosisProxy::setEnableNotification__b"
      }
    },
    "ALNotificationManager": {
      "notification": {
        "!type": "fn(notificationId: ?) -> Promise.Prototype",
        "!doc": "Returns the NotificationInfo corresponding to the given notification identifier. The notification is represented as an ALValue (seeNotificationInfo). It takes 1 argument(s): [notificationId] - notificationId It returns a Promise which is either resolved with the given value (The notificationInfo of the given notification identifier.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/notificationmanager/alnotificationmanager-api.html#ALNotificationManagerProxy::notification__iCR"
      },
      "add": {
        "!type": "fn(notification: ?) -> Promise.Prototype",
        "!doc": "Adds a new Notification. As soon as it is added, the eventnotificationAdded()is raised. It takes 1 argument(s): [notification] - notification It returns a Promise which is either resolved with the given value (The notification identifier.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/notificationmanager/alnotificationmanager-api.html#ALNotificationManagerProxy::add__AL::ALValueCR"
      },
      "remove": {
        "!type": "fn(notificationId: ?) -> Promise.Prototype",
        "!doc": "Removes a Notification. As soon as it is removed, the eventnotificationRemoved()is raised. It takes 1 argument(s): [notificationId] - notificationId It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/notificationmanager/alnotificationmanager-api.html#ALNotificationManagerProxy::remove__iCR"
      },
      "notifications": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the list of pending NotificationInfos. It returns a Promise which is either resolved with the given value (An array of NotificationInfos contained in an ALValue (seeNotificationInfo).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/notificationmanager/alnotificationmanager-api.html#ALNotificationManagerProxy::notifications"
      }
    },
    "ALWavingDetection": {
      "getMinSize": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "3d sensor only It returns a Promise which is either resolved with the given value (The current value of MinSize (in meters).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alwavingdetection-api.html#ALWavingDetectionProxy::getMinSize"
      },
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMaxDistance": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "3d sensor only It returns a Promise which is either resolved with the given value (The current value of MaxDistance (in meters).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alwavingdetection-api.html#ALWavingDetectionProxy::getMaxDistance"
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getThreshold": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "2d sensor only It returns a Promise which is either resolved with the given value (The current value of threshold (normalized in range [0,1]).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alwavingdetection-api.html#ALWavingDetectionProxy::getThreshold"
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMinSize": {
        "!type": "fn(size: ?) -> Promise.Prototype",
        "!doc": "3d sensor only It takes 1 argument(s): [size] - size It returns a Promise which is either resolved with the given value (true if the update succeeded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alwavingdetection-api.html#ALWavingDetectionProxy::setMinSize__floatCR"
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMaxDistance": {
        "!type": "fn(distance: ?) -> Promise.Prototype",
        "!doc": "3d sensor only It takes 1 argument(s): [distance] - distance It returns a Promise which is either resolved with the given value (true if the update succeeded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alwavingdetection-api.html#ALWavingDetectionProxy::setMaxDistance__floatCR"
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setThreshold": {
        "!type": "fn(threshold: ?) -> Promise.Prototype",
        "!doc": "2d sensor only It takes 1 argument(s): [threshold] - threshold It returns a Promise which is either resolved with the given value (true if the update succeeded.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alwavingdetection-api.html#ALWavingDetectionProxy::setThreshold__floatCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALBackgroundMovement": {
      "setEnabled": {
        "!type": "fn(enabled: ?) -> Promise.Prototype",
        "!doc": "Enables or disables the background movements. It takes 1 argument(s): [enabled] - enabled It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albackgroundmovement-api.html#ALBackgroundMovementProxy::setEnabled__b"
      },
      "isEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether the background movements are enabled. It returns a Promise which is either resolved with the given value (True if the background movements are enabled, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albackgroundmovement-api.html#ALBackgroundMovementProxy::isEnabled"
      },
      "isRunning": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether the background movements are currently running. It returns a Promise which is either resolved with the given value (True if the background movements are running, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albackgroundmovement-api.html#ALBackgroundMovementProxy::isRunning"
      }
    },
    "ALBasicAwareness": {
      "setEnabled": {
        "!type": "fn(enabled: ?) -> Promise.Prototype",
        "!doc": "Enables or disables basic awareness. It takes 1 argument(s): [enabled] - enabled It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::setEnabled__b"
      },
      "resumeAwareness": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Manually resumesALBasicAwareness. For further details see:Pausing and Resuming. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::resumeAwareness"
      },
      "isRunning": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether basic awareness is actually running, i.e. is started and not paused (neither manually nor automatically). It returns a Promise which is either resolved with the given value (True if it is running, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::isRunning"
      },
      "setTrackingMode": {
        "!type": "fn(trackingMode: ?) -> Promise.Prototype",
        "!doc": "Sets the current tracking Mode. It takes 1 argument(s): [trackingMode] - trackingMode It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::setTrackingMode__ssCR"
      },
      "getTrackingMode": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current tracking mode. It returns a Promise which is either resolved with the given value (the tracking mode name. For further details, see:Tracking Modes.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::getTrackingMode"
      },
      "isEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether basic awareness is enabled. It returns a Promise which is either resolved with the given value (True if it is enabled, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::isEnabled"
      },
      "pauseAwareness": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Manually pausesALBasicAwareness. For further details see:Pausing and Resuming. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::pauseAwareness"
      },
      "getParameter": {
        "!type": "fn(paramName: ?) -> Promise.Prototype",
        "!doc": "Gets parameters related to basic awareness features. It takes 1 argument(s): [paramName] - paramName It returns a Promise which is either resolved with the given value (value of the parameter (ALValue).) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::getParameter__ssCR"
      },
      "isAwarenessPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the status (paused or not) of the module. It returns a Promise which is either resolved with the given value (Boolean value: true if the module is paused, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::isAwarenessPaused"
      },
      "getEngagementMode": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current engagement mode. For further details, see:Engagement Modes. It returns a Promise which is either resolved with the given value (The engagement mode name.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::getEngagementMode"
      },
      "isStimulusDetectionEnabled": {
        "!type": "fn(stimType: ?) -> Promise.Prototype",
        "!doc": "Gets status enabled/disabled for the detection of the specified type of stimulus. It takes 1 argument(s): [stimType] - stimType It returns a Promise which is either resolved with the given value (true if enabled, false if disabled) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::isStimulusDetectionEnabled__ssC"
      },
      "triggerStimulus": {
        "!type": "fn(positionFrameWorld: ?) -> Promise.Prototype",
        "!doc": "Triggers a custom stimulus that will be processed as other stimuli, but with a higher priority. It takes 1 argument(s): [positionFrameWorld] - positionFrameWorld It returns a Promise which is either resolved with the given value (The ID of the found human if any, as referenced inPeoplePerception/PeopleList(), or -1, if no human has been found.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::triggerStimulus__std::vector:float:CR"
      },
      "setEngagementMode": {
        "!type": "fn(modeName: ?) -> Promise.Prototype",
        "!doc": "Sets the engagement mode. It takes 1 argument(s): [modeName] - modeName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::setEngagementMode__ssCR"
      },
      "setParameter": {
        "!type": "fn(paramName: ?) -> Promise.Prototype",
        "!doc": "Sets parameters related to basic awareness features. It takes 1 argument(s): [paramName] - paramName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::setParameter__ssCR.AL::ALValueCR"
      },
      "setStimulusDetectionEnabled": {
        "!type": "fn(stimType: ?, enable: ?) -> Promise.Prototype",
        "!doc": "Enables/disables detection of the specified type of stimulus. It takes 2 argument(s): [stimType] - stimType [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::setStimulusDetectionEnabled__ssC.bC"
      },
      "resetAllParameters": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Resets all parameters to their default values. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::resetAllParameters"
      },
      "engagePerson": {
        "!type": "fn(idPersonToEngage: ?) -> Promise.Prototype",
        "!doc": "Forces the robot to engage a person identified by its PeoplePerception ID. It takes 1 argument(s): [idPersonToEngage] - idPersonToEngage It returns a Promise which is either resolved with the given value (true if the robot succeeded to engage the person, else false.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/albasicawareness-api.html#ALBasicAwarenessProxy::engagePerson__iC"
      }
    },
    "ALSoundDetection": {
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Subscribes toALSoundDetection. This causes the module to start writing information toALMemoryin\"SoundDetected\". This can be accessed inALMemoryusingALMemoryProxy::getData. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alsounddetection-api.html#ALSoundDetection::subscribe__ssCR"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes toALSoundDetection. This causes the module to stop writing information toALMemoryin\"SoundDetected\". It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alsounddetection-api.html#ALSoundDetection::unsubscribe__ssCR"
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setParameter": {
        "!type": "fn(parameter: ?, value: ?) -> Promise.Prototype",
        "!doc": "Use it to set the sensitivity of the detection. It takes 2 argument(s): [parameter] - parameter [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alsounddetection-api.html#ALSoundDetection::setParameter__ssCR.floatCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALSpeakingMovement": {
      "setEnabled": {
        "!type": "fn(enabled: ?) -> Promise.Prototype",
        "!doc": "Enables or disables the speaking movements. It takes 1 argument(s): [enabled] - enabled It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alspeakingmovement-api.html#ALSpeakingMovementProxy::setEnabled__bCR"
      },
      "getMode": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current speaking movement mode. It returns a Promise which is either resolved with the given value (The current speaking movement mode.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alspeakingmovement-api.html#ALSpeakingMovementProxy::getMode"
      },
      "isRunning": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether the speaking movements are running. It returns a Promise which is either resolved with the given value (True if the speaking movements are running, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alspeakingmovement-api.html#ALSpeakingMovementProxy::isRunning"
      },
      "isEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns whether the speaking movements are enabled. It returns a Promise which is either resolved with the given value (True if the speaking movements are enabled, False otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alspeakingmovement-api.html#ALSpeakingMovementProxy::isEnabled"
      },
      "setMode": {
        "!type": "fn(mode: ?) -> Promise.Prototype",
        "!doc": "Sets the current speaking movement mode. It takes 1 argument(s): [mode] - mode It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alspeakingmovement-api.html#ALSpeakingMovementProxy::setMode__ssCR"
      },
      "resetTagsToWords": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Removes all the tagged words dynamically added by the methodALSpeakingMovementProxy::addTagsToWords. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alspeakingmovement-api.html#ALSpeakingMovementProxy::resetTagsToWords"
      },
      "addTagsToWords": {
        "!type": "fn(tagsToWords: ?) -> Promise.Prototype",
        "!doc": "Links some words to some specific animation tags. It takes 1 argument(s): [tagsToWords] - tagsToWords It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/interaction/autonomousabilities/alspeakingmovement-api.html#ALSpeakingMovementProxy::addTagsToWords__ALValueCR"
      }
    },
    "ALExpressionWatcher": {
      "add": {
        "!type": "fn(expression: ?, report_mode: ?) -> Promise.Prototype",
        "!doc": "Adds a condition expression to ALExpressionWatcher engine. It takes 2 argument(s): [expression] - expression [report_mode] - report_mode It returns a Promise which is either resolved with the given value (CorrespondigExpressionObject.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/core/alexpressionwatcher-api.html#ALExpressionWatcher::add__ssCR.iCR"
      }
    },
    "ALSpeechRecognition": {
      "createContext": {
        "!type": "fn(pathToGrammarFile: ?, contextName: ?) -> Promise.Prototype",
        "!doc": "Creates a context from an LCF of FCF file. It takes 2 argument(s): [pathToGrammarFile] - Binary file containing the grammar or SLM [contextName] - Name of the created context It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "addWordListToSlot": {
        "!type": "fn(contextName: ?, slotName: ?, wordList: ?) -> Promise.Prototype",
        "!doc": "Adds a list of words in a slot. A slot is a part of a context which can be modified. You can add a list of words that should be recognized by the speech recognition engine. It takes 3 argument(s): [contextName] - contextName [slotName] - slotName [wordList] - wordList It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::addWordListToSlot__ssCR.ssCR.std::vector:ss:CR"
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "eraseContextSet": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Erases the save named saveName. This will not remove any currently loaded contexts. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::eraseContextSet__ssCR"
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "loadVocabulary": {
        "!type": "fn(vocabularyFile: ?) -> Promise.Prototype",
        "!doc": "Load the vocabulary to recognized contained in a .lxd file. This method is not available with the ASR engine language set to Chinese. For more informations see the red documentation It takes 1 argument(s): [vocabularyFile] - Name of the lxd file containing the vocabulary It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setVisualExpressionMode": {
        "!type": "fn(mode: ?) -> Promise.Prototype",
        "!doc": "Sets the LED animation mode It takes 1 argument(s): [mode] - animation mode: 0: deactivated, 1: eyes, 2: ears, 3: full It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Subscribes toALSpeechRecognition. This causes the module to start writing information toALMemoryin\"WordRecognized\". This can be accessed inALMemoryusingALMemoryProxy::getData. It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::subscribe__ssCR"
      },
      "removeContextSet": {
        "!type": "fn(contextSetName: ?) -> Promise.Prototype",
        "!doc": "Remove a saved context set from the speech recognition engine (without deleting it) It takes 1 argument(s): [contextSetName] - Name of the context set It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setParameter": {
        "!type": "fn(parameter: ?, value: ?) -> Promise.Prototype",
        "!doc": "Sets parameters of the speech recognition engine. It takes 2 argument(s): [parameter] - parameter [value] - value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::setParameter__ssCR.floatCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "activateAllRules": {
        "!type": "fn(contextName: ?) -> Promise.Prototype",
        "!doc": "Activates all rules contained in the specified context. It takes 1 argument(s): [contextName] - contextName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::activateAllRules__ssCR"
      },
      "setVocabulary": {
        "!type": "fn(vocabulary: ?, enableWordSpotting: ?) -> Promise.Prototype",
        "!doc": "Sets the list of words/phrases (vocabulary) that should be recognized by the speech recognition engine. If word spotting is disabled (default), the engine expects to hear one of the specified words, nothing more, nothing less. If enabled, the specified words can be pronounced in the middle of a whole speech stream : the engine will try to spot them. The parameter enableWordSpotting changes the results given by the speech recognition. Please refer toALSpeechRecognitionfor details. It takes 2 argument(s): [vocabulary] - vocabulary [enableWordSpotting] - enableWordSpotting It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::setVocabulary__std::vector:ss:CR.bCR"
      },
      "pause": {
        "!type": "fn(isPaused: ?) -> Promise.Prototype",
        "!doc": "Stops and restarts the speech recognition engine according to the input parameter. It takes 1 argument(s): [isPaused] - isPaused It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::pause__bCR"
      },
      "addContext": {
        "!type": "fn(pathToLCFFile: ?, contextName: ?) -> Promise.Prototype",
        "!doc": "Adds the context contained in the LCF file. This LCF file contains the set of rules that should be recognized by the speech recognition engine. It takes 2 argument(s): [pathToLCFFile] - pathToLCFFile [contextName] - contextName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::addContext__ssCR.ssCR"
      },
      "popContexts": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Disable current contexts and restore saved contexts of the speech recognition engine. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getAvailableLanguages": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the list of the languages currently installed on the system. It returns a Promise which is either resolved with the given value (A list of languages.Example: ['French', 'Chinese', 'English', 'Japanese']See also:Supported languages,Supported languages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::getAvailableLanguages"
      },
      "pushContexts": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Disable current contexts of the speech recognition engine and save them in a stack. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setVisualExpression": {
        "!type": "fn(setOrNot: ?) -> Promise.Prototype",
        "!doc": "Enables or disables the LEDs animations showing the state of the recognition engine during the recognition process. It takes 1 argument(s): [setOrNot] - setOrNot It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::setVisualExpression__bCR"
      },
      "getParameter": {
        "!type": "fn(parameter: ?) -> Promise.Prototype",
        "!doc": "Gets a parameter of the speech recognition engine. It takes 1 argument(s): [parameter] - parameter It returns a Promise which is either resolved with the given value (Value of the parameter) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::getParameter__ssCR"
      },
      "getAudioExpression": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the value of the parameter AudioExpression. This parameter indicates if the recognition process plays a \"bip\" or not. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::getAudioExpression"
      },
      "getContextSets": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the names of the contexts belonging to a given context set It returns a Promise which is either resolved with the given value (List of context set names) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "removeWordListFromSlot": {
        "!type": "fn(contextName: ?, slotName: ?) -> Promise.Prototype",
        "!doc": "Removes all words from a slot. It takes 2 argument(s): [contextName] - contextName [slotName] - slotName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::removeWordListFromSlot__ssCR.ssCR"
      },
      "getContexts": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the names of all existing contexts It returns a Promise which is either resolved with the given value (List of context names) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "saveContextSet": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Saves the current context set under the name saveName. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::saveContextSet__ssCR"
      },
      "removeContextFromSet": {
        "!type": "fn(contextName: ?, contextSetName: ?) -> Promise.Prototype",
        "!doc": "Remove a context from an existing context set It takes 2 argument(s): [contextName] - Name of the context to remove from the context set [contextSetName] - Name of the context set It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setContextParam": {
        "!type": "fn(contextName: ?, paramName: ?, value: ?) -> Promise.Prototype",
        "!doc": "Set the given parameter for the specified context. It takes 3 argument(s): [contextName] - Name of the context [paramName] - Name of the parameter to change [value] - New parameter value It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "deactivateAllRules": {
        "!type": "fn(contextName: ?) -> Promise.Prototype",
        "!doc": "Deactivates all rules contained in the specified context. It takes 1 argument(s): [contextName] - contextName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::deactivateAllRules__ssCR"
      },
      "setLanguage": {
        "!type": "fn(language: ?) -> Promise.Prototype",
        "!doc": "Sets the language used by the speech recognition system for the current application. It takes 1 argument(s): [language] - language It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::setLanguage__ssCR"
      },
      "deleteContextSet": {
        "!type": "fn(contextSetName: ?) -> Promise.Prototype",
        "!doc": "Erase a context set It takes 1 argument(s): [contextSetName] - Name of the context set It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "deleteAllContextSets": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Erase all saved contexts set of the speech recognition engine It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "createContextSet": {
        "!type": "fn(contextList: ?, name: ?) -> Promise.Prototype",
        "!doc": "Create a context set It takes 2 argument(s): [contextList] - List of context names to add to the context set [name] - Name of the context set It returns a Promise which is either resolved with the given value (True if a context set with the same name existed and was overwritten) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "activateRule": {
        "!type": "fn(contextName: ?, ruleName: ?) -> Promise.Prototype",
        "!doc": "Activates a rule contained in the specified context. It takes 2 argument(s): [contextName] - contextName [ruleName] - ruleName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::activateRule__ssCR.ssCR"
      },
      "setWordListAsVocabulary": {
        "!type": "fn(vocabulary: ?) -> Promise.Prototype",
        "!doc": "Set the list of words (vocabulary) that should be recognized by the speech recognition engine. It takes 1 argument(s): [vocabulary] - List of words that should be recognized It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes toALSpeechRecognition. This causes the module to stop writing information toALMemoryin\"WordRecognized\". It takes 1 argument(s): [name] - name It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::unsubscribe__ssCR"
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "deleteAllContexts": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Delete all existing contexts. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getContextParam": {
        "!type": "fn(contextName: ?, paramName: ?) -> Promise.Prototype",
        "!doc": "Get the given parameter for the specified context. It takes 2 argument(s): [contextName] - Name of the context [paramName] - Name of the parameter to get It returns a Promise which is either resolved with the given value (Value of the fetched parameter) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "removeAllContext": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Removes all contexts from the speech recognition engine. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::removeAllContext"
      },
      "addContextToSet": {
        "!type": "fn(contextName: ?, contextSetName: ?) -> Promise.Prototype",
        "!doc": "Add a context to an existing context set It takes 2 argument(s): [contextName] - Name of the context to add to the context set [contextSetName] - Name of the context set It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "loadContextSet": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Replaces the currently loaded context set by the one previously saved under the name saveName. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::loadContextSet__ssCR"
      },
      "setAudioExpression": {
        "!type": "fn(setOrNot: ?) -> Promise.Prototype",
        "!doc": "When set to True, a \"bip\" is played at the beginning of the recognition process, and another \"bip\" is played at the end of the process. This is a useful indication to let the user know when it is appropriate to speak. It takes 1 argument(s): [setOrNot] - setOrNot It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::setAudioExpression__bCR"
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "deactivateRule": {
        "!type": "fn(contextName: ?, ruleName: ?) -> Promise.Prototype",
        "!doc": "Deactivates a rule contained in the specified context. It takes 2 argument(s): [contextName] - contextName [ruleName] - ruleName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::deactivateRule__ssCR.ssCR"
      },
      "compile": {
        "!type": "fn(pathToInputBNFFile: ?, pathToOutputLCFFile: ?, language: ?) -> Promise.Prototype",
        "!doc": "Converts a BNF file to a LCF file. The LCF file is a binary file which contains the same content as the BNF file. Use this file for the method addContext. It takes 3 argument(s): [pathToInputBNFFile] - pathToInputBNFFile [pathToOutputLCFFile] - pathToOutputLCFFile [language] - language It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::compile__ssCR.ssCR.ssCR"
      },
      "addContextSet": {
        "!type": "fn(contextSetName: ?) -> Promise.Prototype",
        "!doc": "Add a context set to the recognizer It takes 1 argument(s): [contextSetName] - Name of the context set It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "removeContext": {
        "!type": "fn(contextName: ?) -> Promise.Prototype",
        "!doc": "Removes one context from the speech recognition engine. It takes 1 argument(s): [contextName] - contextName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::removeContext__ssCR"
      },
      "getRules": {
        "!type": "fn(contextName: ?, typeName: ?) -> Promise.Prototype",
        "!doc": "Gets rules corresponding to the specified type. Type can be: It takes 2 argument(s): [contextName] - contextName [typeName] - typeName It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::getRules__ssCR.ssCR"
      },
      "getLanguage": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the language currently used by the speech recognition system. It returns a Promise which is either resolved with the given value (a language name.Example: 'French'Could be one of the installed languages:ALSpeechRecognitionProxy::getAvailableLanguagesSee also:Supported languages,Supported languages.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/audio/alspeechrecognition-api.html#ALSpeechRecognitionProxy::getLanguage"
      },
      "deleteContext": {
        "!type": "fn(contextName: ?) -> Promise.Prototype",
        "!doc": "Delete an existing context. It takes 1 argument(s): [contextName] - Name of the context to delete It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALTouch": {
      "getStatus": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the current Touch status of all managed body parts. The format is equivalent to that ofTouchChanged()event. It returns a Promise which is either resolved with the given value (Return a vector of pairs [name, bool] indicating if body part namednameis currently touched.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altouch-api.html#ALTouchProxy::getStatus"
      },
      "getSensorList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Return the list of sensors managed by touch module, i.e. capable of generating aTouchChanged()event. It returns a Promise which is either resolved with the given value (Return a vector<std::string> of sensor names.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/sensors/altouch-api.html#ALTouchProxy::getSensorList"
      }
    },
    "ALPeoplePerception": {
      "getTimeBeforePersonDisappears": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Time after which a person disappears from the PeopleList. The default value is 10 seconds. SeeALPeoplePerception::setTimeBeforePersonDisappearsfor a description of this parameter.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::getTimeBeforePersonDisappears"
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isGraphicalDisplayEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if the module currently pushes data toALMemoryfor graphical display in Choregraphe, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::isGraphicalDisplayEnabled"
      },
      "setTimeBeforeVisiblePersonDisappears": {
        "!type": "fn(seconds: ?) -> Promise.Prototype",
        "!doc": "Sets the time after which a person disappears from the PeopleList (seeEvents) if he/she is no more visible because he/she moved or is hidden from the camera. In this case the robot didn't move but doesn't see the person anymore. It takes 1 argument(s): [seconds] - seconds It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::setTimeBeforeVisiblePersonDisappears__floatCR"
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFaceDetectionEnabled": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Turns face detection on or off. It takes 1 argument(s): [enable] - True to turn it on, False to turn it off. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getTimeBeforeVisiblePersonDisappears": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Time after which a visible person disappears from the PeopleList. The default value is 2 seconds. SeeALPeoplePerception::setTimeBeforeVisiblePersonDisappearsfor a description of this parameter.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::getTimeBeforeVisiblePersonDisappears"
      },
      "getMaximumBodyHeight": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current maximum body height used for human detection (3D mode only). It returns a Promise which is either resolved with the given value (Maximum height in meters.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMaximumDetectionRange": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (Maximum detection and tracking range in meters. The default value is 3.5 meters.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::getMaximumDetectionRange"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "resetPopulation": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Empties the current population and erases all data related to People Perception and associated modules from ALMemory. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::resetPopulation"
      },
      "setTimeBeforePersonDisappears": {
        "!type": "fn(seconds: ?) -> Promise.Prototype",
        "!doc": "Sets the time after which a person disappears from the PeopleList (seeEvents) if he/she is no more visible because the robot looks away. The robot knows that it moved and that the person cannot be seen anymore if he/she stays at the same position. It takes 1 argument(s): [seconds] - seconds It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::setTimeBeforePersonDisappears__floatCR"
      },
      "setFastModeEnabled": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enables or disables thefast mode. When enabled, all optional detections (face and movement for example) are disabled. If this method is called withenable = false, all optional detections will be turned on. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::setFastModeEnabled__bCR"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMinimumBodyHeight": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current minimum body height used for human detection (3D mode only). It returns a Promise which is either resolved with the given value (Minimum height in meters.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setGraphicalDisplayEnabled": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enables or disables the push of debug data intoALMemory. These data are used by Choregraphe to display spheres representing humans in theRobot View. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::setGraphicalDisplayEnabled__bCR"
      },
      "isFastModeEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if thefast modeis enabled, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::isFastModeEnabled"
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isFaceDetectionEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if the module uses the face detection, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::isFaceDetectionEnabled"
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMovementDetectionEnabled": {
        "!type": "fn(enable: ?) -> Promise.Prototype",
        "!doc": "Enables or disables the movement detection to detect people. This can make the overall process slower if enabled. It takes 1 argument(s): [enable] - enable It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::setMovementDetectionEnabled__bCR"
      },
      "setMinimumBodyHeight": {
        "!type": "fn(height: ?) -> Promise.Prototype",
        "!doc": "Sets the minimum human body height (3D mode only). It takes 1 argument(s): [height] - Minimum height in meters. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setMaximumDetectionRange": {
        "!type": "fn(range: ?) -> Promise.Prototype",
        "!doc": "Sets the maximum detection and tracking range. Any person further away than this distance will not be tracked. Setting this range to a smaller value can help preventing the background noise from being detected as a human shape but will require humans to get closer to the robot in order to be successfully detected and tracked. It takes 1 argument(s): [range] - range It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::setMaximumDetectionRange__floatCR"
      },
      "setMaximumBodyHeight": {
        "!type": "fn(height: ?) -> Promise.Prototype",
        "!doc": "Sets the maximum human body height (3D mode only). It takes 1 argument(s): [height] - Maximum height in meters. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isMovementDetectionEnabled": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "It returns a Promise which is either resolved with the given value (true if the module uses the movement detection, false otherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/peopleperception/alpeopleperception-api.html#ALPeoplePerception::isMovementDetectionEnabled"
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALMovementDetection": {
      "resetDetection": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Resets to zero the values of the previously seen depth images, which resets the detection of movement. For example, this function is automatically called when the robot just moved, in order to avoid false positives that could be induced by the robot's movements. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/almovementdetection-api.html#ALMovementDetectionProxy::resetDetection"
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setDepthSensitivity": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "3d sensor only It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/almovementdetection-api.html#ALMovementDetectionProxy::setDepthSensitivity__floatCR"
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(status: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [status] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setFrameRate": {
        "!type": "fn(value: ?) -> Promise.Prototype",
        "!doc": "Sets extractor framerate It takes 1 argument(s): [value] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setColorSensitivity": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "2d sensor only It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/almovementdetection-api.html#ALMovementDetectionProxy::setColorSensitivity__floatCR"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getColorSensitivity": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "2d sensor only It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/almovementdetection-api.html#ALMovementDetectionProxy::getColorSensitivity"
      },
      "getDepthSensitivity": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "3d sensor only It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/almovementdetection-api.html#ALMovementDetectionProxy::getDepthSensitivity"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALVisualCompass": {
      "moveTo": {
        "!type": "fn(x: ?, y: ?, theta: ?) -> Promise.Prototype",
        "!doc": "LikeALMotionProxy::moveTo, makes the robot move to the given pose in the ground plane, relative to FRAME_ROBOT. UnlikeALMotionProxy::moveTo, the robot decomposes the movement in pure rotation and pure translation: the robot will turn to face the direction defined by x and y, move forwards until the location is reached, then turn one last time to reach the right orientation. It takes 3 argument(s): [x] - x [y] - y [theta] - theta It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualcompass-api.html#ALVisualCompassProxy::moveTo__floatCR.floatCR.floatCR"
      },
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "moveStraightTo": {
        "!type": "fn(pDistance: ?) -> Promise.Prototype",
        "!doc": "Makes the robot move forward in a straight line of a given distance. A negative distance value will result in moving backward. It takes 1 argument(s): [pDistance] - pDistance It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualcompass-api.html#ALVisualCompassProxy::moveStraightTo__floatCR"
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "isProcessing": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor running status It returns a Promise which is either resolved with the given value (True if the extractor is currently processing images, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setCurrentImageAsReference": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Clears the old reference image then sets the current image as new reference image. It returns a Promise which is either resolved with the given value (trueif the current image was successfully set as new reference image,falseotherwise.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualcompass-api.html#ALVisualCompassProxy::setCurrentImageAsReference"
      },
      "setFrameRate": {
        "!type": "fn(subscriberName: ?, framerate: ?) -> Promise.Prototype",
        "!doc": "Sets the extractor framerate for a chosen subscriber It takes 2 argument(s): [subscriberName] - Name of the subcriber [framerate] - New framerate It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "waitUntilTargetReached": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Waits until the end of aALVisualCompassProxy::moveToor aALVisualCompassProxy::moveStraightTo. This is a blocking call. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualcompass-api.html#ALVisualCompassProxy::waitUntilTargetReached"
      },
      "enableReferenceRefresh": {
        "!type": "fn(refresh: ?) -> Promise.Prototype",
        "!doc": "Determines if the reference image is taken again at subscribe (default behavior) or not. If not, the reference image is not reset at next subscribe. It takes 1 argument(s): [refresh] - refresh It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualcompass-api.html#ALVisualCompassProxy::enableReferenceRefresh__bCR"
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setActiveCamera": {
        "!type": "fn(cameraId: ?) -> Promise.Prototype",
        "!doc": "Sets extractor active camera It takes 1 argument(s): [cameraId] - Id of the camera that will become the active camera It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "pause": {
        "!type": "fn(paused: ?) -> Promise.Prototype",
        "!doc": "Changes the pause status of the extractor It takes 1 argument(s): [paused] - New pause satus It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setResolution": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "Sets extractor resolution It takes 1 argument(s): [resolution] - New resolution It returns a Promise which is either resolved with the given value (True if the update succeeded, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getActiveCamera": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor active camera It returns a Promise which is either resolved with the given value (Id of the current active camera of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMatchingQuality": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the reliability of the matching and the compass deviation computations. It gives both the number of matches and the percentage of inliers for the model. The number of matches must be at least greater than 4 and the percentage over 50% for the matching to be significant. It returns a Promise which is either resolved with the given value (Quality with the following format:quality[0]: float. Percentage of model inliers amongst matched keypoints. Between 0.0f and 1.0f, must be over 0.5f to be significant.quality[1]: int. Number of keypoints that were matched.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualcompass-api.html#ALVisualCompassProxy::getMatchingQuality"
      },
      "getFrameRate": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor framerate It returns a Promise which is either resolved with the given value (Current value of the framerate of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getReferenceImage": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns an AL::ALValue containing the image used as a reference. It returns a Promise which is either resolved with the given value (AL::ALValue formatted like the output ofALVideoDeviceProxy::getImageRemote.) or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualcompass-api.html#ALVisualCompassProxy::getReferenceImage"
      },
      "isPaused": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor pause status It returns a Promise which is either resolved with the given value (True if the extractor is paused, False if not) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getResolution": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets extractor resolution It returns a Promise which is either resolved with the given value (Current value of the resolution of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    },
    "ALVisualSpaceHistory": {
      "updatePeriod": {
        "!type": "fn(name: ?, period: ?) -> Promise.Prototype",
        "!doc": "Updates the period if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [period] - Refresh period (in milliseconds). It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPeriod": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the period for a specific subscription. It takes 1 argument(s): [name] - Name of the module which has subscribed. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "subscribe": {
        "!type": "fn(name: ?, period: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you. It takes 3 argument(s): [name] - Name of the module which subscribes. [period] - Refresh period (in milliseconds) if relevant. [precision] - Precision of the extractor if relevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getGridPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Returns the current visual grid resolution. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualspacehistory-api.html#ALVisualSpaceHistoryProxy::getGridPrecision"
      },
      "getCurrentPrecision": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current precision. It returns a Promise which is either resolved with the given value (Precision of the extractor.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getOutputNames": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of values updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of values updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getEventList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getCurrentPeriod": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the current period. It returns a Promise which is either resolved with the given value (Refresh period (in milliseconds).) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "resetGrid": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Fills the visual grid with the current timestamp. This may be useful if the robot moves its torso since it makes the grid data irrelevant. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualspacehistory-api.html#ALVisualSpaceHistoryProxy::resetGrid"
      },
      "unsubscribe": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Unsubscribes from the extractor. It takes 1 argument(s): [name] - Name of the module which had subscribed. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMemoryKeyList": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Get the list of events updated in ALMemory. It returns a Promise which is either resolved with the given value (Array of events updated by this extractor in ALMemory) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getSubscribersInfo": {
        "!type": "fn() -> Promise.Prototype",
        "!doc": "Gets the parameters given by the module. It returns a Promise which is either resolved with the given value (Array of names and parameters of all subscribers.) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "getMyPrecision": {
        "!type": "fn(name: ?) -> Promise.Prototype",
        "!doc": "Gets the precision for a specific subscription. It takes 1 argument(s): [name] - name of the module which has subscribed It returns a Promise which is either resolved with the given value (precision of the extractor) or rejected with the given reason (a runtime error).",
        "!url": ""
      },
      "setGridPrecision": {
        "!type": "fn(resolution: ?) -> Promise.Prototype",
        "!doc": "It takes 1 argument(s): [resolution] - resolution It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": "http://doc.aldebaran.com/2-5/naoqi/vision/alvisualspacehistory-api.html#ALVisualSpaceHistoryProxy::setGridPrecision__floatCR"
      },
      "updatePrecision": {
        "!type": "fn(name: ?, precision: ?) -> Promise.Prototype",
        "!doc": "Updates the precision if relevant. It takes 2 argument(s): [name] - Name of the module which has subscribed. [precision] - Precision of the extractor. It returns a Promise which is either resolved with the given value or rejected with the given reason (a runtime error).",
        "!url": ""
      }
    }
  }
}